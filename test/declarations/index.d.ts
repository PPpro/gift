/// <reference types="./@types/globals" />
/// <reference types="./@types/ammo.js" />
/// <reference types="./cocos/gfx/webgl/WebGL" />
/// <reference types="./cocos/gfx/webgl2/WebGL2" />
declare module "cocos/core/platform/CCDebug" {
    /**
     * !#en Outputs a message to the Cocos Creator Console (editor) or Web Console (runtime).
     * !#zh 输出一条消息到 Cocos Creator 编辑器的 Console 或运行时 Web 端的 Console 中。
     * @param message - A JavaScript string containing zero or more substitution strings.
     * @param optionalParams - JavaScript objects with which to replace substitution strings within msg.
     * This gives you additional control over the format of the output.
     */
    export function log(message?: any, ...optionalParams: any[]): void;
    /**
     * !#en
     * Outputs a warning message to the Cocos Creator Console (editor) or Web Console (runtime).
     * - In Cocos Creator, warning is yellow.
     * - In Chrome, warning have a yellow warning icon with the message text.
     * !#zh
     * 输出警告消息到 Cocos Creator 编辑器的 Console 或运行时 Web 端的 Console 中。<br/>
     * - 在 Cocos Creator 中，警告信息显示是黄色的。<br/>
     * - 在 Chrome 中，警告信息有着黄色的图标以及黄色的消息文本。<br/>
     * @param message - A JavaScript string containing zero or more substitution strings.
     * @param optionalParams - JavaScript objects with which to replace substitution strings within msg.
     * This gives you additional control over the format of the output.
     */
    export function warn(message?: any, ...optionalParams: any[]): void;
    /**
     * !#en
     * Outputs an error message to the Cocos Creator Console (editor) or Web Console (runtime).<br/>
     * - In Cocos Creator, error is red.<br/>
     * - In Chrome, error have a red icon along with red message text.<br/>
     * !#zh
     * 输出错误消息到 Cocos Creator 编辑器的 Console 或运行时页面端的 Console 中。<br/>
     * - 在 Cocos Creator 中，错误信息显示是红色的。<br/>
     * - 在 Chrome 中，错误信息有红色的图标以及红色的消息文本。<br/>
     * @param message - A JavaScript string containing zero or more substitution strings.
     * @param optionalParams - JavaScript objects with which to replace substitution strings within msg.
     * This gives you additional control over the format of the output.
     */
    export function error(message?: any, ...optionalParams: any[]): void;
    export function assert(value: any, message?: string, ...optionalParams: any[]): void;
    export function _resetDebugSetting(mode: DebugMode): void;
    export function _throw(error_: any): void;
    export function logID(id: number, ...optionalParams: any[]): void;
    export function warnID(id: number, ...optionalParams: any[]): void;
    export function errorID(id: number, ...optionalParams: any[]): void;
    export function assertID(condition: boolean, id: number, ...optionalParams: any[]): void;
    /**
     * !#en Enum for debug modes.
     * !#zh 调试模式
     */
    export enum DebugMode {
        /**
         * !#en The debug mode none.
         * !#zh 禁止模式，禁止显示任何日志信息。
         */
        NONE = 0,
        /**
         * !#en The debug mode info.
         * !#zh 信息模式，在 console 中显示所有日志。
         */
        INFO = 1,
        /**
         * !#en The debug mode warn.
         * !#zh 警告模式，在 console 中只显示 warn 级别以上的（包含 error）日志。
         */
        WARN = 2,
        /**
         * !#en The debug mode error.
         * !#zh 错误模式，在 console 中只显示 error 日志。
         */
        ERROR = 3,
        /**
         * !#en The debug mode info for web page.
         * !#zh 信息模式（仅 WEB 端有效），在画面上输出所有信息。
         */
        INFO_FOR_WEB_PAGE = 4,
        /**
         * !#en The debug mode warn for web page.
         * !#zh 警告模式（仅 WEB 端有效），在画面上输出 warn 级别以上的（包含 error）信息。
         */
        WARN_FOR_WEB_PAGE = 5,
        /**
         * !#en The debug mode error for web page.
         * !#zh 错误模式（仅 WEB 端有效），在画面上输出 error 信息。
         */
        ERROR_FOR_WEB_PAGE = 6
    }
    /**
     * !#en Gets error message with the error id and possible parameters.
     * !#zh 通过 error id 和必要的参数来获取错误信息。
     */
    export function getError(errorId: any, param?: any): string;
    /**
     * !#en Returns whether or not to display the FPS informations.
     * !#zh 是否显示 FPS 信息。
     */
    export function isDisplayStats(): boolean;
    /**
     * !#en Sets whether display the FPS on the bottom-left corner.
     * !#zh 设置是否在左下角显示 FPS。
     */
    export function setDisplayStats(displayStats: boolean): void;
}
declare module "cocos/core/utils/path" {
    /**
     * !#en Join strings to be a path.
     * !#zh 拼接字符串为路径。
     * @example {@link cocos2d/core/utils/CCPath/join.js}
     */
    export function join(...segments: string[]): string;
    /**
     * !#en Get the ext name of a path including '.', like '.png'.
     * !#zh 返回 Path 的扩展名，包括 '.'，例如 '.png'。
     * @example {@link cocos2d/core/utils/CCPath/extname.js}
     */
    export function extname(path: string): string;
    /**
     * !#en Get the main name of a file name.
     * !#zh 获取文件名的主名称。
     * @deprecated
     */
    export function mainFileName(fileName: string): string;
    /**
     * !#en Get the file name of a file path.
     * !#zh 获取文件路径的文件名。
     * @example {@link cocos2d/core/utils/CCPath/basename.js}
     */
    export function basename(path: string, extName?: string): string;
    /**
     * !#en Get dirname of a file path.
     * !#zh 获取文件路径的目录名。
     * @example {@link cocos2d/core/utils/CCPath/dirname.js}
     */
    export function dirname(path: string): string;
    /**
     * !#en Change extname of a file path.
     * !#zh 更改文件路径的扩展名。
     * @example {@link cocos2d/core/utils/CCPath/changeExtname.js}
     */
    export function changeExtname(path: string, extName?: string): string;
    /**
     * !#en Change file name of a file path.
     * !#zh 更改文件路径的文件名。
     * @example {@link cocos2d/core/utils/CCPath/changeBasename.js}
     */
    export function changeBasename(path: string, baseName: string, isSameExt?: boolean): string;
    export function _normalize(url: any): any;
    export function stripSep(path: string): string;
    export function getSeperator(): "/" | "\\";
}
declare module "cocos/legacy" { }
declare module "cocos/core/vmath/utils" {
    export const EPSILON = 0.000001;
    /**
     * Tests whether or not the arguments have approximately the same value, within an absolute
     * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
     * than or equal to 1.0, and a relative tolerance is used for larger values)
     *
     * @param a The first number to test.
     * @param b The second number to test.
     * @return True if the numbers are approximately equal, false otherwise.
     */
    export function equals(a: number, b: number): boolean;
    /**
     * Tests whether or not the arguments have approximately the same value by given maxDiff
     *
     * @param a The first number to test.
     * @param b The second number to test.
     * @param maxDiff Maximum difference.
     * @return True if the numbers are approximately equal, false otherwise.
     */
    export function approx(a: number, b: number, maxDiff: number): boolean;
    /**
     * Clamps a value between a minimum float and maximum float value.
     *
     * @param val
     * @param min
     * @param max
     */
    export function clamp(val: number, min: number, max: number): number;
    /**
     * Clamps a value between 0 and 1.
     *
     * @param val
     */
    export function clamp01(val: number): number;
    /**
     * @param from
     * @param to
     * @param ratio - The interpolation coefficient.
     */
    export function lerp(from: number, to: number, ratio: number): number;
    /**
     * Convert Degree To Radian
     *
     * @param {Number} a Angle in Degrees
     */
    export function toRadian(a: number): number;
    /**
     * Convert Radian To Degree
     *
     * @param {Number} a Angle in Radian
     */
    export function toDegree(a: number): number;
    /**
     * @method random
     */
    export const random: () => number;
    /**
     * Returns a floating-point random number between min (inclusive) and max (exclusive).
     *
     * @method randomRange
     * @param min
     * @param max
     * @return The random number.
     */
    export function randomRange(min: number, max: number): number;
    /**
     * Returns a random integer between min (inclusive) and max (exclusive).
     *
     * @param min
     * @param max
     * @return The random integer.
     */
    export function randomRangeInt(min: number, max: number): number;
    /**
     * Linear congruential generator using Hull-Dobell Theorem.
     *
     * @param seed The random seed.
     * @return The pseudo random.
     */
    export function pseudoRandom(seed: number): number;
    /**
     * Returns a floating-point pseudo-random number between min (inclusive) and max (exclusive).
     *
     * @param seed
     * @param min
     * @param max
     * @return The random number.
     */
    export function pseudoRandomRange(seed: number, min: number, max: number): number;
    /**
     * Returns a pseudo-random integer between min (inclusive) and max (exclusive).
     *
     * @param seed
     * @param min
     * @param max
     * @return The random integer.
     */
    export function pseudoRandomRangeInt(seed: number, min: number, max: number): number;
    /**
     * Returns the next power of two for the value.
     *
     * @param val
     * @return The the next power of two.
     */
    export function nextPow2(val: number): number;
    /**
     * Returns float remainder for t / length.
     *
     * @param t Time start at 0.
     * @param length Time of one cycle.
     * @return The Time wrapped in the first cycle.
     */
    export function repeat(t: number, length: number): number;
    /**
     * Returns time wrapped in ping-pong mode.
     *
     * @param t Time start at 0.
     * @param length Time of one cycle.
     * @return The time wrapped in the first cycle.
     */
    export function pingPong(t: number, length: number): number;
    /**
     * Returns ratio of a value within a given range.
     *
     * @param from Start value.
     * @param to End value.
     * @param value Given value.
     * @return The ratio between [from, to].
     */
    export function inverseLerp(from: number, to: number, value: number): number;
}
declare module "cocos/core/vmath/bits" {
    /**
     * Bit twiddling hacks for JavaScript.
     *
     * Author: Mikola Lysenko
     *
     * Ported from Stanford bit twiddling hack library:
     *    http://graphics.stanford.edu/~seander/bithacks.html
     */
    /**
     * @ignore
     */
    export const INT_BITS = 32;
    /**
     * @ignore
     */
    export const INT_MAX = 2147483647;
    /**
     * @ignore
     */
    export const INT_MIN: number;
    /**
     * Returns -1, 0, +1 depending on sign of x.
     *
     * @param v
     * @return
     */
    export function sign(v: number): number;
    /**
     * Computes absolute value of integer.
     *
     * @param v
     * @return
     */
    export function abs(v: number): number;
    /**
     * Computes minimum of integers x and y.
     *
     * @param x
     * @param y
     * @return
     */
    export function min(x: number, y: number): number;
    /**
     * Computes maximum of integers x and y.
     *
     * @param x
     * @param y
     * @return
     */
    export function max(x: number, y: number): number;
    /**
     * Checks if a number is a power of two.
     *
     * @param v
     * @return
     */
    export function isPow2(v: number): boolean;
    /**
     * Computes log base 2 of v.
     *
     * @param v
     * @return
     */
    export function log2(v: number): number;
    /**
     * Computes log base 10 of v.
     *
     * @param v
     * @return
     */
    export function log10(v: number): 1 | 0 | 2 | 4 | 5 | 3 | 8 | 9 | 7 | 6;
    /**
     * Counts number of bits.
     *
     * @param v
     * @return
     */
    export function popCount(v: number): number;
    /**
     * Counts number of trailing zeros.
     *
     * @param v
     * @return
     */
    export function countTrailingZeros(v: number): number;
    /**
     * Rounds to next power of 2.
     *
     * @param v
     * @return
     */
    export function nextPow2(v: number): number;
    /**
     * Rounds down to previous power of 2.
     *
     * @param v
     * @return
     */
    export function prevPow2(v: number): number;
    /**
     * Computes parity of word.
     *
     * @param v
     * @return
     */
    export function parity(v: number): number;
    /**
     * Reverse bits in a 32 bit word.
     *
     * @param v
     * @return
     */
    export function reverse(v: number): number;
    /**
     * Interleave bits of 2 coordinates with 16 bits. Useful for fast quadtree codes.
     *
     * @param x
     * @param y
     * @return
     */
    export function interleave2(x: number, y: number): number;
    /**
     * Extracts the nth interleaved component.
     *
     * @param v
     * @param n
     * @return
     */
    export function deinterleave2(v: number, n: number): number;
    /**
     * Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes.
     *
     * @param x
     * @param y
     * @param z
     * @return
     */
    export function interleave3(x: number, y: number, z: number): number;
    /**
     * Extracts nth interleaved component of a 3-tuple.
     *
     * @param v
     * @param n
     * @return
     */
    export function deinterleave3(v: number, n: number): number;
    /**
     * Computes next combination in colexicographic order (this is
     * mistakenly called nextPermutation on the bit twiddling hacks page).
     *
     * @param v
     * @return
     */
    export function nextCombination(v: number): number;
}
declare module "cocos/core/vmath/mat2" {
    import vec2 from "cocos/core/vmath/vec2";
    /**
     * Mathematical 2x2 matrix.
     */
    export default class mat2 {
        /**
         * Creates a matrix, with elements specified separately.
         *
         * @param m00 - Value assigned to element at column 0 row 0.
         * @param m01 - Value assigned to element at column 0 row 1.
         * @param m02 - Value assigned to element at column 1 row 0.
         * @param m03 - Value assigned to element at column 1 row 1.
         * @return The newly created matrix.
         */
        static create(m00?: number, m01?: number, m02?: number, m03?: number): mat2;
        /**
         * Clone a matrix.
         *
         * @param a - Matrix to clone.
         * @return The newly created matrix.
         */
        static clone(a: mat2): mat2;
        /**
         * Copy content of a matrix into another.
         *
         * @param out - Matrix to modified.
         * @param a - The specified matrix.
         * @return out.
         */
        static copy<Out extends mat2>(out: Out, a: mat2): Out;
        /**
         * Sets a matrix as identity matrix.
         *
         * @param out - Matrix to modified.
         * @return out.
         */
        static identity<Out extends mat2>(out: Out): Out;
        /**
         * Sets the elements of a matrix to the given values.
         *
         * @param out - The matrix to modified.
         * @param m00 - Value assigned to element at column 0 row 0.
         * @param m01 - Value assigned to element at column 0 row 1.
         * @param m10 - Value assigned to element at column 1 row 0.
         * @param m11 - Value assigned to element at column 1 row 1.
         * @return out.
         */
        static set<Out extends mat2>(out: Out, m00: number, m01: number, m10: number, m11: number): Out;
        /**
         * Transposes a matrix.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to transpose.
         * @return out.
         */
        static transpose<Out extends mat2>(out: Out, a: mat2): Out;
        /**
         * Inverts a matrix.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to invert.
         * @return out.
         */
        static invert<Out extends mat2>(out: Out, a: mat2): Out | null;
        /**
         * Calculates the adjugate of a matrix.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to calculate.
         * @return out.
         */
        static adjoint<Out extends mat2>(out: Out, a: mat2): Out;
        /**
         * Calculates the determinant of a matrix.
         *
         * @param a - Matrix to calculate.
         * @return Determinant of a.
         */
        static determinant(a: mat2): number;
        /**
         * Multiply two matrices explicitly.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static multiply<Out extends mat2>(out: Out, a: mat2, b: mat2): Out;
        /**
         * Alias of {@link mat2.multiply}.
         */
        static mul<Out extends mat2>(out: Out, a: mat2, b: mat2): Out;
        /**
         * Rotates a matrix by the given angle.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to rotate.
         * @param rad - The rotation angle.
         * @return out
         */
        static rotate<Out extends mat2>(out: Out, a: mat2, rad: number): Out;
        /**
         * Scales the matrix given by a scale vector.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to scale.
         * @param v - The scale vector.
         * @return out
         */
        static scale<Out extends mat2>(out: Out, a: mat2, v: vec2): Out;
        /**
         * Creates a matrix from a given angle.
         * This is equivalent to (but much faster than):
         *
         *     mat2.set(dest, 1, 0, 0, 1);
         *     mat2.rotate(dest, dest, rad);
         *
         * @param out - Matrix to store result.
         * @param rad - The rotation angle.
         * @return out.
         */
        static fromRotation<Out extends mat2>(out: Out, rad: number): Out;
        /**
         * Creates a matrix from a scale vector.
         * This is equivalent to (but much faster than):
         *
         *     mat2.set(dest, 1, 0, 0, 1);
         *     mat2.scale(dest, dest, vec);
         *
         * @param out - Matrix to store result.
         * @param v - Scale vector.
         * @return out.
         */
        static fromScaling<Out extends mat2>(out: Out, v: vec2): Out;
        /**
         * Returns a string representation of a matrix.
         *
         * @param a - The matrix.
         * @return String representation of this matrix.
         */
        static str(a: mat2): string;
        /**
         * Store elements of a matrix into array.
         *
         * @param out - Array to store result.
         * @param m - The matrix.
         * @return out.
         */
        static array<Out extends IWritableArrayLike<number>>(out: Out, m: mat2, ofs?: number): Out;
        /**
         * Returns Frobenius norm of a matrix.
         *
         * @param a - Matrix to calculate Frobenius norm of.
         * @return - The frobenius norm.
         */
        static frob(a: mat2): number;
        /**
         * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix.
         * @param L - The lower triangular matrix.
         * @param D - The diagonal matrix.
         * @param U - The upper triangular matrix.
         * @param a - The input matrix to factorize.
         */
        static LDU(L: mat2, D: mat2, U: mat2, a: mat2): void;
        /**
         * Adds two matrices.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static add<Out extends mat2>(out: Out, a: mat2, b: mat2): Out;
        /**
         * Subtracts matrix b from matrix a.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static subtract<Out extends mat2>(out: Out, a: mat2, b: mat2): Out;
        /**
         * Alias of {@link mat2.subtract}.
         */
        static sub<Out extends mat2>(out: Out, a: mat2, b: mat2): Out;
        /**
         * Returns whether the specified matrices are equal. (Compared using ===)
         *
         * @param a - The first matrix.
         * @param b - The second matrix.
         * @return True if the matrices are equal, false otherwise.
         */
        static exactEquals(a: mat2, b: mat2): boolean;
        /**
         * Returns whether the specified matrices are approximately equal.
         *
         * @param a - The first matrix.
         * @param b - The second matrix.
         * @return True if the matrices are equal, false otherwise.
         */
        static equals(a: mat2, b: mat2): boolean;
        /**
         * Multiply each element of a matrix by a scalar number.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to scale
         * @param b - The scale number.
         * @return out.
         */
        static multiplyScalar<Out extends mat2>(out: Out, a: mat2, b: number): Out;
        /**
         * Adds two matrices after multiplying each element of the second operand by a scalar number.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param scale - The scale number.
         * @return out.
         */
        static multiplyScalarAndAdd<Out extends mat2>(out: Out, a: mat2, b: mat2, scale: number): Out;
        /**
         * The element at column 0 row 0.
         */
        m00: number;
        /**
         * The element at column 0 row 1.
         */
        m01: number;
        /**
         * The element at column 1 row 0.
         */
        m02: number;
        /**
         * The element at column 1 row 1.
         */
        m03: number;
        /**
         * Creates a matrix, with elements specified separately.
         *
         * @param m00 - Value assigned to element at column 0 row 0.
         * @param m01 - Value assigned to element at column 0 row 1.
         * @param m02 - Value assigned to element at column 1 row 0.
         * @param m03 - Value assigned to element at column 1 row 1.
         */
        constructor(m00?: number, m01?: number, m02?: number, m03?: number);
    }
}
declare module "cocos/core/vmath/mat23" {
    import vec2 from "cocos/core/vmath/vec2";
    /**
     * Mathematical 2x3 matrix.
     *
     * A mat23 contains six elements defined as:
     * <pre>
     * [a, c, tx,
     *  b, d, ty]
     * </pre>
     * This is a short form for the 3x3 matrix:
     * <pre>
     * [a, c, tx,
     *  b, d, ty,
     *  0, 0, 1]
     * </pre>
     * The last row is ignored so the array is shorter and operations are faster.
     */
    class mat23 {
        /**
         * Creates a matrix, with elements specified separately.
         *
         * @param m00 -  Value assigned to element a.
         * @param m01 -  Value assigned to element b.
         * @param m02 -  Value assigned to element c.
         * @param m03 -  Value assigned to element d.
         * @param m04 -  Value assigned to element tx.
         * @param m05 -  Value assigned to element ty.
         * @return The newly created matrix.
         */
        static create(m00?: number, m01?: number, m02?: number, m03?: number, m04?: number, m05?: number): mat23;
        /**
         * Clone a matrix.
         *
         * @param a - Matrix to clone.
         * @return The newly created matrix.
         */
        static clone(a: mat23): mat23;
        /**
         * Copy content of a matrix into another.
         *
         * @param out - Matrix to modified.
         * @param a - The specified matrix.
         * @return out.
         */
        static copy<Out extends mat23>(out: Out, a: mat23): Out;
        /**
         * Sets a matrix as identity matrix.
         *
         * @param out - Matrix to modified.
         * @return out.
         */
        static identity<Out extends mat23>(out: Out): Out;
        /**
         * Sets the elements of a matrix to the given values.
         *
         * @param out - The matrix to modified.
         * @param a - Value assigned to element a.
         * @param b - Value assigned to element b.
         * @param c - Value assigned to element c.
         * @param d - Value assigned to element d.
         * @param tx - Value assigned to element tx.
         * @param ty - Value assigned to element ty.
         * @return out.
         */
        static set<Out extends mat23>(out: Out, a: number, b: number, c: number, d: number, tx: number, ty: number): Out;
        /**
         * Inverts a matrix.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to invert.
         * @return out.
         */
        static invert<Out extends mat23>(out: Out, a: mat23): Out | null;
        /**
         * Calculates the determinant of a matrix.
         *
         * @param a - Matrix to calculate.
         * @return Determinant of a.
         */
        static determinant(a: mat23): number;
        /**
         * Multiply two matrices explicitly.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static multiply<Out extends mat23>(out: Out, a: mat23, b: mat23): Out;
        /**
         * Alias of {@link mat23.multiply}.
         */
        static mul<Out extends mat23>(out: Out, a: mat23, b: mat23): Out;
        /**
         * Rotates a matrix by the given angle.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to rotate.
         * @param rad - The rotation angle.
         * @return out
         */
        static rotate<Out extends mat23>(out: Out, a: mat23, rad: number): Out;
        /**
         * Multiply a matrix with a scale matrix given by a scale vector.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to multiply.
         * @param v - The scale vector.
         * @return out
         */
        static scale<Out extends mat23>(out: Out, a: mat23, v: vec2): Out;
        /**
         * Multiply a matrix with a translation matrix given by a translation offset.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to multiply.
         * @param v - The translation offset.
         * @return out.
         */
        static translate<Out extends mat23>(out: Out, a: mat23, v: vec2): Out;
        /**
         * Creates a matrix from a given angle.
         * This is equivalent to (but much faster than):
         *
         *     mat23.identity(dest);
         *     mat23.rotate(dest, dest, rad);
         *
         * @param out - Matrix to store result.
         * @param rad - The rotation angle.
         * @return out.
         */
        static fromRotation<Out extends mat23>(out: Out, rad: number): Out;
        /**
         * Creates a matrix from a scale vector.
         * This is equivalent to (but much faster than):
         *
         *     mat23.identity(dest);
         *     mat23.scale(dest, dest, vec);
         *
         * @param out - Matrix to store result.
         * @param v - Scale vector.
         * @return out.
         */
        static fromScaling<Out extends mat23>(out: Out, v: mat23): Out;
        /**
         * Creates a matrix from a translation offset.
         * This is equivalent to (but much faster than):
         *
         *     mat23.identity(dest);
         *     mat23.translate(dest, dest, vec);
         *
         * @param out - Matrix to store result.
         * @param v - The translation offset.
         * @return out.
         */
        static fromTranslation<Out extends mat23>(out: Out, v: vec2): Out;
        /**
         * Creates a matrix from a rotation, translation offset and scale vector.
         * This is equivalent to (but faster than):
         *
         *     mat23.identity(dest);
         *     mat23.translate(dest, vec);
         *     let tmp = mat23.create();
         *     mat23.fromRotation(tmp, rot);
         *     mat23.multiply(dest, dest, tmp);
         *     mat23.fromScaling(tmp, scale);
         *     mat23.multiply(dest, dest, tmp);
         *
         * @param out - Matrix to store result.
         * @param r - Rotation radian.
         * @param t - Translation offset.
         * @param s - Scale vector.
         * @return out.
         */
        static fromRTS<Out extends mat23>(out: Out, r: number, t: vec2, s: vec2): Out;
        /**
         * Returns a string representation of a matrix.
         *
         * @param a - The matrix.
         * @return String representation of this matrix.
         */
        static str(a: mat23): string;
        /**
         * Store elements of a matrix into array.
         *
         * @param out - Array to store result.
         * @param m - The matrix.
         * @return out.
         */
        static array<Out extends IWritableArrayLike<number>>(out: Out, m: mat23): Out;
        /**
         * Store elements of a matrix into 16 floats array.
         *
         * @param out
         * @param m
         * @return
         */
        static array4x4<Out extends IWritableArrayLike<number>>(out: Out, m: mat23): Out;
        /**
         * Returns Frobenius norm of a matrix.
         *
         * @param a - Matrix to calculate Frobenius norm of.
         * @return - The frobenius norm.
         */
        static frob(a: mat23): number;
        /**
         * Adds two matrices.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static add<Out extends mat23>(out: Out, a: mat23, b: mat23): Out;
        /**
         * Subtracts matrix b from matrix a.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static subtract<Out extends mat23>(out: Out, a: mat23, b: mat23): Out;
        /**
         * Alias of {@link mat23.subtract}.
         */
        static sub<Out extends mat23>(out: Out, a: mat23, b: mat23): Out;
        /**
         * Multiply each element of a matrix by a scalar number.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to scale
         * @param b - The scale number.
         * @return out.
         */
        static multiplyScalar<Out extends mat23>(out: Out, a: mat23, b: number): Out;
        /**
         * Adds two matrices after multiplying each element of the second operand by a scalar number.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param scale - The scale number.
         * @return out.
         */
        static multiplyScalarAndAdd<Out extends mat23>(out: Out, a: mat23, b: mat23, scale: number): Out;
        /**
         * Returns whether the specified matrices are equal. (Compared using ===)
         *
         * @param a - The first matrix.
         * @param b - The second matrix.
         * @return True if the matrices are equal, false otherwise.
         */
        static exactEquals(a: mat23, b: mat23): boolean;
        /**
         * Returns whether the specified matrices are approximately equal.
         *
         * @param a - The first matrix.
         * @param b - The second matrix.
         * @return True if the matrices are equal, false otherwise.
         */
        static equals(a: mat23, b: mat23): boolean;
        /**
         * The element a.
         */
        m00: number;
        /**
         * The element b.
         */
        m01: number;
        /**
         * The element c.
         */
        m02: number;
        /**
         * The element d.
         */
        m03: number;
        /**
         * The element tx.
         */
        m04: number;
        /**
         * The element ty.
         */
        m05: number;
        /**
         * Creates a matrix, with elements specified separately.
         *
         * @param m00 -  Value assigned to element a.
         * @param m01 -  Value assigned to element b.
         * @param m02 -  Value assigned to element c.
         * @param m03 -  Value assigned to element d.
         * @param m04 -  Value assigned to element tx.
         * @param m05 -  Value assigned to element ty.
         */
        constructor(m00?: number, m01?: number, m02?: number, m03?: number, m04?: number, m05?: number);
    }
    export default mat23;
}
declare module "cocos/core/vmath/vec4" {
    import mat4 from "cocos/core/vmath/mat4";
    import quat from "cocos/core/vmath/quat";
    /**
     * Mathematical 4-dimensional vector.
     *
     * x, y, z, w is alias of the first, second, third, fourth component of vector, respectively.
     */
    export default class vec4 {
        static ZERO: vec4;
        static ONE: vec4;
        static NEG_ONE: vec4;
        /**
         * Create a vector, with components specified separately.
         *
         * @param x - Value assigned to x component.
         * @param y - Value assigned to y component.
         * @param z - Value assigned to z component.
         * @param w - Value assigned to w component.
         * @return The newly created vector.
         */
        static create(x?: number, y?: number, z?: number, w?: number): vec4;
        /**
         * Creates a zero vector.
         *
         * @return The newly created vector.
         */
        static zero(out: vec4): vec4;
        /**
         * Clone a vector.
         *
         * @param a - Vector to clone.
         * @return The newly created vector.
         */
        static clone(a: vec4): vec4;
        /**
         * Copy content of a vector into another.
         *
         * @param out - The vector to modified.
         * @param a - The specified vector.
         * @return out.
         */
        static copy<Out extends vec4>(out: Out, a: vec4): Out;
        /**
         * Sets the components of a vector to the given values.
         *
         * @param out - The vector to modified.
         * @param x - Value set to x component.
         * @param y - Value set to y component.
         * @param z - Value set to z component.
         * @param w - Value set to w component.
         * @return out.
         */
        static set<Out extends vec4>(out: Out, x: number, y: number, z: number, w: number): Out;
        /**
         * Add two vectors.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static add<Out extends vec4>(out: Out, a: vec4, b: vec4): Out;
        /**
         * Subtract two vectors.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static subtract<Out extends vec4>(out: Out, a: vec4, b: vec4): Out;
        /**
         * Alias of {@link vec4.subtract}.
         */
        static sub<Out extends vec4>(out: Out, a: vec4, b: vec4): Out;
        /**
         * Performs multiply on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static multiply<Out extends vec4>(out: Out, a: vec4, b: vec4): Out;
        /**
         * Alias of {@link vec4.multiply}.
         */
        static mul<Out extends vec4>(out: Out, a: vec4, b: vec4): Out;
        /**
         * Performs division on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static divide<Out extends vec4>(out: Out, a: vec4, b: vec4): Out;
        /**
         * Alias of {@link vec4.divide}.
         */
        static div<Out extends vec4>(out: Out, a: vec4, b: vec4): Out;
        /**
         * Performs Math.ceil on each component of a vector.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to perform operation.
         * @return out.
         */
        static ceil<Out extends vec4>(out: Out, a: vec4): Out;
        /**
         * Performs Math.floor on each component of a vector.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to perform operation.
         * @return out.
         */
        static floor<Out extends vec4>(out: Out, a: vec4): Out;
        /**
         * Performs Math.min on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static min<Out extends vec4>(out: Out, a: vec4, b: vec4): Out;
        /**
         * Performs Math.min on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static max<Out extends vec4>(out: Out, a: vec4, b: vec4): Out;
        /**
         * Performs Math.round on each component of a vector.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to perform operation.
         * @return out.
         */
        static round<Out extends vec4>(out: Out, a: vec4): Out;
        /**
         * Scales a vector with a number.
         *
         * @param out - Vector to store result.
         * @param a - Vector to scale.
         * @param b - The scale number.
         * @return out.
         */
        static scale<Out extends vec4>(out: Out, a: vec4, b: number): Out;
        /**
         * Add two vectors after scaling the second operand by a number.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param scale - The scale number before adding.
         * @return out.
         */
        static scaleAndAdd<Out extends vec4>(out: Out, a: vec4, b: vec4, scale: number): Out;
        /**
         * Calculates the euclidian distance between two vectors.
         *
         * @param a - The first operand.
         * @param b - The second operand.
         * @return Distance between a and b.
         */
        static distance(a: vec4, b: vec4): number;
        /**
         * Alias of {@link vec4.distance}.
         */
        static dist(a: vec4, b: vec4): number;
        /**
         * Calculates the squared euclidian distance between two vectors.
         *
         * @param a - The first operand.
         * @param b - The second operand.
         * @return Squared distance between a and b.
         */
        static squaredDistance(a: vec4, b: vec4): number;
        /**
         * Alias of {@link vec4.squaredDistance}.
         */
        static sqrDist(a: vec4, b: vec4): number;
        /**
         * Calculates the length of a vector.
         *
         * @param a - The vector.
         * @return Length of the vector.
         */
        static magnitude(a: vec4): number;
        /**
         * Alias of {@link vec4.magnitude}.
         */
        static mag(a: vec4): number;
        /**
         * Calculates the squared length of a vector.
         *
         * @param a - The vector.
         * @return Squared length of the vector.
         */
        static squaredMagnitude(a: vec4): number;
        /**
         * Alias of {@link vec4.squaredMagnitude}
         */
        static sqrMag(a: vec4): number;
        /**
         * Negates each component of a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to negate.
         * @return out.
         */
        static negate<Out extends vec4>(out: Out, a: vec4): Out;
        /**
         * Inverts the components of a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to invert.
         * @return out.
         */
        static inverse<Out extends vec4>(out: Out, a: vec4): Out;
        /**
         * Safely inverts the components of a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to invert.
         * @return out.
         */
        static inverseSafe<Out extends vec4>(out: Out, a: vec4): Out;
        /**
         * Normalizes a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to normalize.
         * @return out.
         */
        static normalize<Out extends vec4>(out: Out, a: vec4): Out;
        /**
         * Calculates the dot product of two vectors.
         *
         * @param a - The first operand.
         * @param b - The second operand.
         * @return Dot product of a and b.
         */
        static dot(a: vec4, b: vec4): number;
        /**
         * Performs a linear interpolation between two vectors.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param t - The interpolation coefficient.
         * @return out.
         */
        static lerp<Out extends vec4>(out: Out, a: vec4, b: vec4, t: number): Out;
        /**
         * Generates a random vector uniformly distributed on a sphere centered at the origin.
         *
         * @param out - Vector to store result.
         * @param [scale] Length of the resulting vector. If ommitted, a unit length vector will be returned.
         * @return out.
         */
        static random<Out extends vec4>(out: Out, scale: number): Out;
        /**
         * Transforms a vector with a 4x4 matrix.
         *
         * @param out - Vector to store result.
         * @param a - Vector to transform.
         * @param m - The matrix.
         * @return out.
         */
        static transformMat4<Out extends vec4>(out: Out, a: vec4, m: mat4): Out;
        /**
         * Transforms a vector with a quaternion.
         *
         * @param out - Vector to store result.
         * @param a - Vector to transform.
         * @param q - The quaternion.
         * @return out.
         */
        static transformQuat<Out extends vec4>(out: Out, a: vec4, q: quat): Out;
        /**
         * Returns string representation of a vector.
         *
         * @param a - The vector.
         * @return - String representation of this vector.
         */
        static str(a: vec4): string;
        /**
         * Store components of a vector into array.
         *
         * @param out - Array to store result.
         * @param v - The vector.
         * @return out.
         */
        static array<Out extends IWritableArrayLike<number>>(out: Out, v: vec4, ofs?: number): Out;
        /**
         * Returns whether the specified vectors are equal. (Compared using ===)
         *
         * @param a - The first vector.
         * @param b - The second vector.
         * @return True if the vectors are equal, false otherwise.
         */
        static exactEquals(a: vec4, b: vec4): boolean;
        /**
         * Returns whether the specified vectors are approximately equal.
         *
         * @param a The first vector.
         * @param b The second vector.
         * @return True if the vectors are approximately equal, false otherwise.
         */
        static equals(a: vec4, b: vec4): boolean;
        /**
         * The x component.
         */
        x: number;
        /**
         * The y component.
         */
        y: number;
        /**
         * The z component.
         */
        z: number;
        /**
         * The w component.
         */
        w: number;
        /**
         * Creates a vector, with components specified separately.
         *
         * @param x - Value assigned to x component.
         * @param y - Value assigned to y component.
         * @param z - Value assigned to z component.
         * @param w - Value assigned to w component.
         */
        constructor(x?: number, y?: number, z?: number, w?: number);
    }
}
declare module "cocos/core/vmath/quat" {
    import mat3 from "cocos/core/vmath/mat3";
    import vec3 from "cocos/core/vmath/vec3";
    /**
     * Mathematical quaternion.
     *
     * A quaternion is a hypercomplex number represented by w + xi + yj + zk, where
     * x, y, z and w are real numbers(called here its components), and i, j, and k are the fundamental quaternion units.
     */
    export default class quat {
        static IDENTITY: quat;
        /**
         * Creates a quaternion, with components specified separately.
         *
         * @param x - Value assigned to x component.
         * @param y - Value assigned to y component.
         * @param z - Value assigned to z component.
         * @param w - Value assigned to w component.
         * @return The newly created quaternion.
         */
        static create(x?: number, y?: number, z?: number, w?: number): quat;
        /**
         * Clone a quaternion.
         *
         * @param a - Quaternion to clone.
         * @return The newly created quaternion.
         */
        static clone(a: quat): quat;
        /**
         * Copy content of a quaternion into another.
         *
         * @param out - Quaternion to modified.
         * @param a - The specified quaternion.
         * @return out.
         */
        static copy<Out extends quat>(out: Out, a: quat): Out;
        /**
         * Sets the components of a quaternion to the given values.
         *
         * @param out - The quaternion to modified.
         * @param x - Value set to x component.
         * @param y - Value set to y component.
         * @param z - Value set to z component.
         * @param w - Value set to w component.
         * @return out.
         */
        static set<Out extends quat>(out: Out, x: number, y: number, z: number, w: number): Out;
        /**
         * Sets a quaternion as identity quaternion.
         *
         * @param out - Quaternion to set.
         * @return out.
         */
        static identity<Out extends quat>(out: Out): Out;
        /**
         * Sets a quaternion to represent the shortest rotation from one
         * vector to another.
         *
         * Both vectors are assumed to be unit length.
         *
         * @param out - Quaternion to set.
         * @param a - The initial vector.
         * @param b - The destination vector.
         * @return out.
         */
        static rotationTo<Out extends quat>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Gets the rotation axis and angle for a given
         *  quaternion. If a quaternion is created with
         *  fromAxisAngle, this method will return the same
         *  values as provided in the original parameter list
         *  OR functionally equivalent values.
         * Example: The quaternion formed by axis [0, 0, 1] and
         *  angle -90 is the same as the quaternion formed by
         *  [0, 0, 1] and 270. This method favors the latter.
         * @param  {vec3} out_axis - Vector to store the rotation axis.
         * @param  {quat} q - Quaternion to be decomposed.
         * @return - Angle, in radians, of the rotation.
         */
        static getAxisAngle<Out extends vec3>(outAxis: Out, q: quat): number;
        /**
         * Multiply two quaternions.
         *
         * @param out - Quaternion to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static multiply<Out extends quat>(out: Out, a: quat, b: quat): Out;
        /**
         * Alias of {@link quat.multiply}.
         */
        static mul<Out extends quat>(out: Out, a: quat, b: quat): Out;
        /**
         * Scales a quaternion with a number.
         *
         * @param out - Quaternion to store result.
         * @param a - Quaternion to scale.
         * @param b - The scale number.
         * @return out.
         */
        static scale<Out extends quat>(out: Out, a: quat, b: number): Out;
        /**
         * Add two quaternions after scaling the second operand by a number.
         *
         * @param out - Quaternion to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param scale - The scale number before adding.
         * @return out.
         */
        static scaleAndAdd<Out extends quat>(out: Out, a: quat, b: quat, scale: number): Out;
        /**
         * Rotates a quaternion by the given angle about the X axis.
         *
         * @param out - Quaternion to store result.
         * @param a - Quaternion to rotate.
         * @param rad - Angle (in radians) to rotate.
         * @return out.
         */
        static rotateX<Out extends quat>(out: Out, a: quat, rad: number): Out;
        /**
         * Rotates a quaternion by the given angle about the Y axis.
         *
         * @param out - Quaternion to store result.
         * @param a - Quaternion to rotate.
         * @param rad - Angle (in radians) to rotate.
         * @return out.
         */
        static rotateY<Out extends quat>(out: Out, a: quat, rad: number): Out;
        /**
         * Rotates a quaternion by the given angle about the Z axis.
         *
         * @param out - Quaternion to store result.
         * @param a - Quaternion to rotate.
         * @param rad - Angle (in radians) to rotate.
         * @return out.
         */
        static rotateZ<Out extends quat>(out: Out, a: quat, rad: number): Out;
        /**
         * Rotates a quaternion by the given angle about a world space axis.
         *
         * @param out - Quaternion to store result.
         * @param rot - Quaternion to rotate.
         * @param axis - The axis around which to rotate in world space.
         * @param rad - Angle (in radians) to rotate.
         * @return out.
         */
        static rotateAround<Out extends quat>(out: Out, rot: quat, axis: vec3, rad: number): Out;
        /**
         * Rotates a quaternion by the given angle about a local space axis.
         *
         * @param out - Quaternion to store result.
         * @param rot - Quaternion to rotate.
         * @param axis - The axis around which to rotate in local space.
         * @param rad - Angle (in radians) to rotate.
         * @return out.
         */
        static rotateAroundLocal<Out extends quat>(out: Out, rot: quat, axis: vec3, rad: number): Out;
        /**
         * Calculates the W component of a quaternion from the X, Y, and Z components.
         * Assumes that quaternion is 1 unit in length.
         * Any existing W component will be ignored.
         *
         * @param out - Quaternion to store result.
         * @param a - Quaternion to calculate W.
         * @return out.
         */
        static calculateW<Out extends quat>(out: Out, a: quat): Out;
        /**
         * Calculates the dot product of two quaternions.
         *
         * @param a - The first operand.
         * @param b - The second operand.
         * @return - The dot product of a and b.
         */
        static dot(a: quat, b: quat): number;
        /**
         * Performs a linear interpolation between two quaternions.
         *
         * @param out - Quaternion to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param t - The interpolation coefficient.
         * @return out.
         */
        static lerp<Out extends quat>(out: Out, a: quat, b: quat, t: number): Out;
        /**
         * Performs a spherical linear interpolation between two quaternions.
         *
         * @param out - Quaternion to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param t - The interpolation coefficient.
         * @return out.
         */
        static slerp<Out extends quat>(out: Out, a: quat, b: quat, t: number): Out;
        /**
         * Performs a spherical linear interpolation with two control points.
         *
         * @param out - Quaternion to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param c - The third operand.
         * @param d - The fourth operand.
         * @param t - The interpolation coefficient.
         * @return out
         */
        static sqlerp<Out extends quat>(out: Out, a: quat, b: quat, c: quat, d: quat, t: number): Out;
        /**
         * Calculates the inverse of a quaternion.
         *
         * @param out - Quaternion to store result.
         * @param a - Quaternion to calculate inverse of.
         * @return out.
         */
        static invert<Out extends quat>(out: Out, a: quat): Out;
        /**
         * Calculates the conjugate of a quaternion.
         * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
         *
         * @param out - Quaternion to store result.
         * @param a - Quaternion to calculate conjugate of.
         * @return out.
         */
        static conjugate<Out extends quat>(out: Out, a: quat): Out;
        /**
         * Calculates the length of a quaternion.
         *
         * @param a - The quaternion.
         * @return Length of the quaternion.
         */
        static magnitude(a: quat): number;
        /**
         * Alias of {@link quat.magnitude}.
         */
        static mag(a: quat): number;
        /**
         * Calculates the squared length of a quaternion.
         *
         * @param a - The quaternion.
         * @return Squared length of the quaternion.
         */
        static squaredMagnitude(a: quat): number;
        /**
         * Alias of {@link quat.squaredMagnitude}
         */
        static sqrMag(a: quat): number;
        /**
         * Normalizes a quaternion.
         *
         * @param out - Quaternion to store result.
         * @param a - Quaternion to normalize.
         * @return out.
         * @function
         */
        static normalize<Out extends quat>(out: Out, a: quat): Out;
        /**
         * Sets the specified quaternion with values corresponding to the given
         * axes. Each axis is a vec3 and is expected to be unit length and
         * perpendicular to all other specified axes.
         *
         * @param out - Quaternion to store result.
         * @param xAxis - Vector representing the local "right" direction.
         * @param yAxis - Vector representing the local "up" direction.
         * @param zAxis - Vector representing the viewing direction.
         * @return out.
         */
        static fromAxes<Out extends quat>(out: Out, xAxis: vec3, yAxis: vec3, zAxis: vec3): Out;
        /**
         * Calculates a quaternion from view direction and up direction
         *
         * @param out - Quaternion to store result.
         * @param view - View direction (must be normalized).
         * @param [up] - Up direction, default is (0,1,0) (must be normalized).
         *
         * @return out.
         */
        static fromViewUp<Out extends quat>(out: Out, view: vec3, up: vec3): Out;
        /**
         * Sets a quaternion from the given angle and rotation axis,
         * then returns it.
         *
         * @param out - Quaternion to store result.
         * @param axis - The axis around which to rotate.
         * @param rad - The angle in radians.
         * @return out.
         */
        static fromAxisAngle<Out extends quat>(out: Out, axis: vec3, rad: number): Out;
        /**
         * Creates a quaternion from the given 3x3 rotation matrix.
         *
         * NOTE: The resultant quaternion is not normalized, so you should be sure
         * to re-normalize the quaternion yourself where necessary.
         *
         * @param out - Quaternion to store result.
         * @param m - The rotation matrix.
         * @return out.
         * @function
         */
        static fromMat3<Out extends quat>(out: Out, m: mat3): Out;
        /**
         * Creates a quaternion from the given euler angle x, y, z.
         *
         * @param out - Quaternion to store result.
         * @param x - Angle to rotate around X axis in degrees.
         * @param y - Angle to rotate around Y axis in degrees.
         * @param z - Angle to rotate around Z axis in degrees.
         * @return out.
         * @function
         */
        static fromEuler<Out extends quat>(out: Out, x: number, y: number, z: number): Out;
        /**
         *  Returns the X orthonormal axis defining the quaternion.
         *
         * @param out - X axis.
         * @param q - The quaternion.
         * @function
         */
        static toAxisX(out: vec3, q: quat): void;
        /**
         *  Returns the Y orthonormal axis defining the quaternion.
         *
         * @param out - Y axis.
         * @param q - The quaternion.
         * @function
         */
        static toAxisY(out: vec3, q: quat): void;
        /**
         *  Returns the Z orthonormal axis defining the quaternion.
         *
         * @param out - Z axis.
         * @param q - The quaternion.
         * @function
         */
        static toAxisZ(out: vec3, q: quat): void;
        /**
         * Convert a quaternion back to euler angle (in degrees).
         *
         * @param out - Euler angle stored as a vec3
         * @param q - the quaternion to be converted
         * @return out.
         */
        static toEuler<Out extends vec3>(out: Out, q: quat): Out;
        /**
         * Returns string representation of a quaternion.
         *
         * @param a - The quaternion.
         * @return - String representation of this quaternion.
         */
        static str(a: quat): string;
        /**
         * Store components of a quaternion into array.
         *
         * @param out - Array to store result.
         * @param q - The quaternion.
         * @return out.
         */
        static array<Out extends IWritableArrayLike<number>>(out: Out, q: quat): Out;
        /**
         * Returns whether the specified quaternions are equal. (Compared using ===)
         *
         * @param a - The first quaternion.
         * @param b - The second quaternion.
         * @return True if the quaternions are equal, false otherwise.
         */
        static exactEquals(a: quat, b: quat): boolean;
        /**
         * Returns whether the specified quaternions are approximately equal.
         *
         * @param a The first quaternion.
         * @param b The second quaternion.
         * @return True if the quaternions are approximately equal, false otherwise.
         */
        static equals(a: quat, b: quat): boolean;
        /**
         * The x component.
         */
        x: number;
        /**
         * The y component.
         */
        y: number;
        /**
         * The z component.
         */
        z: number;
        /**
         * The w component.
         */
        w: number;
        /**
         * Creates a quaternion, with components specified separately.
         *
         * @param x - Value assigned to x component.
         * @param y - Value assigned to y component.
         * @param z - Value assigned to z component.
         * @param w - Value assigned to w component.
         */
        constructor(x?: number, y?: number, z?: number, w?: number);
    }
}
declare module "cocos/core/vmath/mat4" {
    import quat from "cocos/core/vmath/quat";
    import vec3 from "cocos/core/vmath/vec3";
    /**
     * Mathematical 4x4 matrix.
     *
     * NOTE: we use column-major matrix for all matrix calculation.
     *
     * This may lead to some confusion when referencing OpenGL documentation,
     * however, which represents out all matricies in column-major format.
     * This means that while in code a matrix may be typed out as:
     *
     * [1, 0, 0, 0,
     *  0, 1, 0, 0,
     *  0, 0, 1, 0,
     *  x, y, z, 0]
     *
     * The same matrix in the [OpenGL documentation](https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTranslate.xml)
     * is written as:
     *
     *  1 0 0 x
     *  0 1 0 y
     *  0 0 1 z
     *  0 0 0 0
     *
     * Please rest assured, however, that they are the same thing!
     * This is not unique to glMatrix, either, as OpenGL developers have long been confused by the
     * apparent lack of consistency between the memory layout and the documentation.
     */
    class mat4 {
        /**
         * Inverts a matrix.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to invert.
         * @return out.
         */
        static invert: (out: any, a: any) => any;
        /**
         * Creates a matrix, with elements specified separately.
         *
         * @param m00 - Value assigned to element at column 0 row 0.
         * @param m01 - Value assigned to element at column 0 row 1.
         * @param m02 - Value assigned to element at column 0 row 2.
         * @param m03 - Value assigned to element at column 0 row 3.
         * @param m04 - Value assigned to element at column 1 row 0.
         * @param m05 - Value assigned to element at column 1 row 1.
         * @param m06 - Value assigned to element at column 1 row 2.
         * @param m07 - Value assigned to element at column 1 row 3.
         * @param m08 - Value assigned to element at column 2 row 0.
         * @param m09 - Value assigned to element at column 2 row 1.
         * @param m10 - Value assigned to element at column 2 row 2.
         * @param m11 - Value assigned to element at column 2 row 3.
         * @param m12 - Value assigned to element at column 3 row 0.
         * @param m13 - Value assigned to element at column 3 row 1.
         * @param m14 - Value assigned to element at column 3 row 2.
         * @param m15 - Value assigned to element at column 3 row 3.
         * @return The newly created matrix.
         */
        static create(m00?: number, m01?: number, m02?: number, m03?: number, m04?: number, m05?: number, m06?: number, m07?: number, m08?: number, m09?: number, m10?: number, m11?: number, m12?: number, m13?: number, m14?: number, m15?: number): mat4;
        /**
         * Clone a matrix.
         *
         * @param a - Matrix to clone.
         * @return The newly created matrix.
         */
        static clone(a: any): mat4;
        /**
         * Copy content of a matrix into another.
         *
         * @param out - Matrix to modified.
         * @param a - The specified matrix.
         * @return out.
         */
        static copy(out: any, a: any): any;
        /**
         * Sets the elements of a matrix to the given values.
         *
         * @param out - The matrix to modified.
         * @param m00 - Value assigned to element at column 0 row 0.
         * @param m01 - Value assigned to element at column 0 row 1.
         * @param m02 - Value assigned to element at column 0 row 2.
         * @param m03 - Value assigned to element at column 0 row 3.
         * @param m10 - Value assigned to element at column 1 row 0.
         * @param m11 - Value assigned to element at column 1 row 1.
         * @param m12 - Value assigned to element at column 1 row 2.
         * @param m13 - Value assigned to element at column 1 row 3.
         * @param m20 - Value assigned to element at column 2 row 0.
         * @param m21 - Value assigned to element at column 2 row 1.
         * @param m22 - Value assigned to element at column 2 row 2.
         * @param m23 - Value assigned to element at column 2 row 3.
         * @param m30 - Value assigned to element at column 3 row 0.
         * @param m31 - Value assigned to element at column 3 row 1.
         * @param m32 - Value assigned to element at column 3 row 2.
         * @param m33 - Value assigned to element at column 3 row 3.
         * @return out.
         */
        static set(out: any, m00: any, m01: any, m02: any, m03: any, m10: any, m11: any, m12: any, m13: any, m20: any, m21: any, m22: any, m23: any, m30: any, m31: any, m32: any, m33: any): any;
        /**
         * Sets a matrix as identity matrix.
         *
         * @param out - Matrix to modified.
         * @return out.
         */
        static identity(out: any): any;
        /**
         * Transposes a matrix.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to transpose.
         * @return out.
         */
        static transpose(out: any, a: any): any;
        /**
         * Calculates the adjugate of a matrix.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to calculate.
         * @return out.
         */
        static adjoint(out: any, a: any): any;
        /**
         * Calculates the determinant of a matrix.
         *
         * @param a - Matrix to calculate.
         * @return Determinant of a.
         */
        static determinant(a: any): number;
        /**
         * Multiply two matrices explicitly.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static multiply(out: any, a: any, b: any): any;
        /**
         * Alias of {@link mat4.multiply}.
         */
        static mul(out: any, a: any, b: any): any;
        /**
         * Multiply a matrix with a translation matrix given by a translation offset.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to multiply.
         * @param v - The translation offset.
         * @return out.
         */
        static translate(out: any, a: any, v: any): any;
        /**
         * Multiply a matrix with a scale matrix given by a scale vector.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to multiply.
         * @param v - The scale vector.
         * @return out
         */
        static scale(out: any, a: any, v: any): any;
        /**
         * Multiply a matrix with a rotation matrix denotes by the rotation around arbitrary axis.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to multiply.
         * @param rad - The rotation angle.
         * @param axis - The rotation axis.
         * @return out.
         */
        static rotate(out: any, a: any, rad: any, axis: any): any;
        /**
         * Multiply a matrix with a rotation matrix denotes by the rotation around x-axis.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to multiply.
         * @param rad - The rotation angle.
         * @return out.
         */
        static rotateX(out: any, a: any, rad: any): any;
        /**
         * Multiply a matrix with a rotation matrix denotes by the rotation around y-axis.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to multiply.
         * @param rad - The rotation angle.
         * @return out.
         */
        static rotateY(out: any, a: any, rad: any): any;
        /**
         * Multiply a matrix with a rotation matrix denotes by the rotation around z-axis.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to multiply.
         * @param rad - The rotation angle.
         * @return out.
         */
        static rotateZ(out: any, a: any, rad: any): any;
        /**
         * Create a translation matrix from a translation offset.
         * This is equivalent to (but much faster than):
         *
         *     mat4.identity(dest);
         *     mat4.translate(dest, dest, vec);
         *
         * @param out - Matrix to store result.
         * @param v - The translation offset.
         * @return out.
         */
        static fromTranslation(out: any, v: any): any;
        /**
         * Creates a scale matrix from a scale vector.
         * This is equivalent to (but much faster than):
         *
         *     mat4.identity(dest);
         *     mat4.scale(dest, dest, vec);
         *
         * @param out - Matrix to store result.
         * @param v - The scale vector.
         * @return out.
         */
        static fromScaling(out: any, v: any): any;
        /**
         * Creates a rotation matrix from the rotation around arbitrary axis.
         * This is equivalent to (but much faster than):
         *
         *     mat4.identity(dest);
         *     mat4.rotate(dest, dest, rad, axis);
         *
         * @param out - Matrix to store result.
         * @param rad - The rotation angle.
         * @param axis - The rotation axis.
         * @return out.
         */
        static fromRotation(out: any, rad: any, axis: any): any;
        /**
         * Creates a rotation matrix from the rotation around x-axis.
         * This is equivalent to (but much faster than):
         *
         *     mat4.identity(dest);
         *     mat4.rotateX(dest, dest, rad);
         *
         * @param out - Matrix to store result.
         * @param rad - The rotation angle.
         * @return out.
         */
        static fromXRotation(out: any, rad: any): any;
        /**
         * Creates a rotation matrix from the rotation around y-axis.
         * This is equivalent to (but much faster than):
         *
         *     mat4.identity(dest);
         *     mat4.rotateY(dest, dest, rad);
         *
         * @param out - Matrix to store result.
         * @param rad - The rotation angle.
         * @return out.
         */
        static fromYRotation(out: any, rad: any): any;
        /**
         * Creates a rotation matrix from the rotation around z-axis.
         * This is equivalent to (but much faster than):
         *
         *     mat4.identity(dest);
         *     mat4.rotateZ(dest, dest, rad);
         *
         * @param out - Matrix to store result.
         * @param rad - The rotation angle.
         * @return out.
         */
        static fromZRotation(out: any, rad: any): any;
        /**
         * Creates a matrix from a quaternion rotation and a translation offset.
         * This is equivalent to (but much faster than):
         *
         *     mat4.identity(dest);
         *     mat4.translate(dest, vec);
         *     let quatMat = mat4.create();
         *     quat.toMat4(quat, quatMat);
         *     mat4.multiply(dest, quatMat);
         *
         * @param out - Matrix to store result.
         * @param q - Rotation quaternion.
         * @param v - Translation vector.
         * @return out.
         */
        static fromRT(out: any, q: any, v: any): any;
        /**
         * Returns the translation vector component of a transformation
         *  matrix. If a matrix is built with fromRT,
         *  the returned vector will be the same as the translation offset
         *  originally supplied.
         * @param  {vec3} out - Vector to store result.
         * @param  {mat4} mat - Matrix to be decomposed.
         * @return out.
         */
        static getTranslation(out: any, mat: any): any;
        /**
         * Returns the scale component of a transformation
         *  matrix. If a matrix is built with fromRTS
         *  with a normalized Quaternion parameter, the returned vector will be
         *  the same as the scale vector
         *  originally supplied.
         * @param  {vec3} out - Vector to store result.
         * @param  {mat4} mat - Matrix to be decomposed.
         * @return out.
         */
        static getScaling(out: any, mat: any): any;
        /**
         * Returns a quaternion representing the rotational component
         *  of a transformation matrix. If a matrix is built with
         *  fromRT, the returned quaternion will be the
         *  same as the quaternion originally supplied.
         * @param out - Quaternion to store result.
         * @param mat - Matrix to be decomposed.
         * @return out.
         */
        static getRotation(out: any, mat: any): any;
        /**
         * Decompose an affine matrix to a quaternion rotation, a translation offset and a scale vector.
         * Assumes the transformation is combined in the order of Scale -> Rotate -> Translate.
         * @param m - Matrix to decompose.
         * @param q - Resulting rotation quaternion.
         * @param v - Resulting translation offset.
         * @param s - Resulting scale vector.
         */
        static toRTS(m: mat4, q: quat, v: vec3, s: vec3): void;
        /**
         * Creates a matrix from a quaternion rotation, translation offset and scale vector.
         * This is equivalent to (but much faster than):
         *
         *     mat4.identity(dest);
         *     mat4.translate(dest, vec);
         *     let quatMat = mat4.create();
         *     quat.toMat4(quat, quatMat);
         *     mat4.multiply(dest, quatMat);
         *     mat4.scale(dest, scale)
         *
         * @param out mat4 - Matrix to store result.
         * @param q - Rotation quaternion.
         * @param v - Translation offset.
         * @param s - Scale vector.
         * @return out.
         */
        static fromRTS(out: any, q: any, v: any, s: any): any;
        /**
         * Creates a matrix from a quaternion rotation, translation offset and scale vector,
         * rotating and scaling around the given origin.
         * This is equivalent to (but much faster than):
         *
         *     mat4.identity(dest);
         *     mat4.translate(dest, vec);
         *     mat4.translate(dest, origin);
         *     let quatMat = mat4.create();
         *     quat.toMat4(quat, quatMat);
         *     mat4.multiply(dest, quatMat);
         *     mat4.scale(dest, scale)
         *     mat4.translate(dest, negativeOrigin);
         *
         * @param out mat4 - Matrix to store result.
         * @param q - Rotation quaternion.
         * @param v - Translation offset.
         * @param s - Scale vector.
         * @param o The origin vector around which to scale and rotate.
         * @return out.
         */
        static fromRTSOrigin(out: any, q: any, v: any, s: any, o: any): any;
        /**
         * Calculates a 4x4 matrix from the given quaternion.
         *
         * @param out mat4 - Matrix to store result.
         * @param q - Quaternion to create matrix from.
         *
         * @return out.
         */
        static fromQuat(out: any, q: any): any;
        /**
         * Generates a frustum matrix with the given bounds.
         *
         * @param out mat4 - Matrix to store result.
         * @param left - Left bound of the frustum.
         * @param right - Right bound of the frustum.
         * @param bottom - Bottom bound of the frustum.
         * @param top - Top bound of the frustum.
         * @param near - Near bound of the frustum.
         * @param far - Far bound of the frustum.
         * @return out.
         */
        static frustum(out: any, left: any, right: any, bottom: any, top: any, near: any, far: any): any;
        /**
         * Generates a perspective projection matrix with the given bounds.
         *
         * @param out - Matrix to store result.
         * @param fovy - Vertical field of view in radians.
         * @param aspect - Aspect ratio. typically viewport width/height.
         * @param near - Near bound of the frustum.
         * @param far - Far bound of the frustum.
         * @return out.
         */
        static perspective(out: any, fovy: any, aspect: any, near: any, far: any): any;
        /**
         * Generates a perspective projection matrix with the given field of view.
         * This is primarily useful for generating projection matrices to be used
         * with the still experiemental WebVR API.
         *
         * @param out - Matrix to store result.
         * @param fov - Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees.
         * @param near - Near bound of the frustum.
         * @param far - Far bound of the frustum.
         * @return out.
         */
        static perspectiveFromFieldOfView(out: any, fov: any, near: any, far: any): any;
        /**
         * Generates a orthogonal projection matrix with the given bounds.
         *
         * @param out - Matrix to store result.
         * @param left - Left bound of the frustum.
         * @param right - Right bound of the frustum.
         * @param bottom - Bottom bound of the frustum.
         * @param top - Top bound of the frustum.
         * @param near - Near bound of the frustum.
         * @param far - Far bound of the frustum.
         * @return out.
         */
        static ortho(out: any, left: any, right: any, bottom: any, top: any, near: any, far: any): any;
        /**
         * Generates a look-at matrix with the given eye position, focal point, and up axis.
         * `eye - center` mustn't be zero vector or parallel to `up`
         *
         * @param out - Matrix to store result.
         * @param eye - Position of the viewer.
         * @param center - Point the viewer is looking at.
         * @param up - Vector pointing up.
         * @return out
         */
        static lookAt(out: any, eye: any, center: any, up: any): any;
        /**
         * Returns a string representation of a matrix.
         *
         * @param a - The matrix.
         * @return String representation of this matrix.
         */
        static str(a: any): string;
        /**
         * Calculates normal matrix (transpose inverse).
         *
         * @param out - Matrix to store result.
         * @param a - A 4x4 matrix to derive the normal matrix from.
         *
         * @return out.
         */
        static normalMatrix(out: any, a: any): any;
        /**
         * Store elements of a matrix into array.
         *
         * @param out - Array to store result.
         * @param m - The matrix.
         * @return out.
         */
        static array(out: any, m: any, ofs?: number): any;
        /**
         * Returns Frobenius norm of a matrix.
         *
         * @param a - Matrix to calculate Frobenius norm of.
         * @return - The frobenius norm.
         */
        static frob(a: any): number;
        /**
         * Adds two matrices.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static add(out: any, a: any, b: any): any;
        /**
         * Subtracts matrix b from matrix a.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static subtract(out: any, a: any, b: any): any;
        /**
         * Alias of {@link mat4.subtract}.
         */
        static sub(out: any, a: any, b: any): any;
        /**
         * Multiply each element of a matrix by a scalar number.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to scale
         * @param b - The scale number.
         * @return out.
         */
        static multiplyScalar(out: any, a: any, b: any): any;
        /**
         * Adds two matrices after multiplying each element of the second operand by a scalar number.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param scale - The scale number.
         * @return out.
         */
        static multiplyScalarAndAdd(out: any, a: any, b: any, scale: any): any;
        /**
         * Returns whether the specified matrices are equal. (Compared using ===)
         *
         * @param a - The first matrix.
         * @param b - The second matrix.
         * @return True if the matrices are equal, false otherwise.
         */
        static exactEquals(a: any, b: any): boolean;
        /**
         * Returns whether the specified matrices are approximately equal.
         *
         * @param a - The first matrix.
         * @param b - The second matrix.
         * @return True if the matrices are equal, false otherwise.
         */
        static equals(a: any, b: any, epsilon?: number): boolean;
        m00: number;
        m01: number;
        m02: number;
        m03: number;
        m04: number;
        m05: number;
        m06: number;
        m07: number;
        m08: number;
        m09: number;
        m10: number;
        m11: number;
        m12: number;
        m13: number;
        m14: number;
        m15: number;
        /**
         * Creates a matrix, with elements specified separately.
         *
         * @param m00 - Value assigned to element at column 0 row 0.
         * @param m01 - Value assigned to element at column 0 row 1.
         * @param m02 - Value assigned to element at column 0 row 2.
         * @param m03 - Value assigned to element at column 0 row 3.
         * @param m04 - Value assigned to element at column 1 row 0.
         * @param m05 - Value assigned to element at column 1 row 1.
         * @param m06 - Value assigned to element at column 1 row 2.
         * @param m07 - Value assigned to element at column 1 row 3.
         * @param m08 - Value assigned to element at column 2 row 0.
         * @param m09 - Value assigned to element at column 2 row 1.
         * @param m10 - Value assigned to element at column 2 row 2.
         * @param m11 - Value assigned to element at column 2 row 3.
         * @param m12 - Value assigned to element at column 3 row 0.
         * @param m13 - Value assigned to element at column 3 row 1.
         * @param m14 - Value assigned to element at column 3 row 2.
         * @param m15 - Value assigned to element at column 3 row 3.
         */
        constructor(m00?: number, m01?: number, m02?: number, m03?: number, m04?: number, m05?: number, m06?: number, m07?: number, m08?: number, m09?: number, m10?: number, m11?: number, m12?: number, m13?: number, m14?: number, m15?: number);
    }
    export default mat4;
}
declare module "cocos/core/vmath/vec3" {
    import mat3 from "cocos/core/vmath/mat3";
    import mat4 from "cocos/core/vmath/mat4";
    import quat from "cocos/core/vmath/quat";
    /**
     * Mathematical 3-dimensional vector.
     *
     * x, y, z is alias of the first, second, third component of vector, respectively.
     */
    export default class vec3 {
        static UNIT_X: vec3;
        static UNIT_Y: vec3;
        static UNIT_Z: vec3;
        static ZERO: vec3;
        static ONE: vec3;
        static NEG_ONE: vec3;
        /**
         * Creates a vector, with components specified separately.
         *
         * @param x - Value assigned to x component.
         * @param y - Value assigned to y component.
         * @param z - Value assigned to z component.
         * @return The newly created vector.
         */
        static create(x?: number, y?: number, z?: number): vec3;
        /**
         * Creates a zero vector.
         *
         * @return The newly created vector.
         */
        static zero<Out extends vec3>(out: Out): Out;
        /**
         * Clone a vector.
         *
         * @param a - Vector to clone.
         * @return The newly created vector.
         */
        static clone(a: vec3): vec3;
        /**
         * Copy content of a vector into another.
         *
         * @param out - The vector to modified.
         * @param a - The specified vector.
         * @return out.
         */
        static copy<Out extends vec3>(out: Out, a: vec3): Out;
        /**
         * Sets the components of a vector to the given values.
         *
         * @param out - The vector to modified.
         * @param x - Value set to x component.
         * @param y - Value set to y component.
         * @param z - Value set to z component.
         * @return out.
         */
        static set<Out extends vec3>(out: Out, x: number, y: number, z: number): Out;
        /**
         * Add two vectors.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static add<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Subtract two vectors.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static subtract<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Alias of {@link vec3.subtract}.
         */
        static sub<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Performs multiply on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static multiply<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Alias of {@link vec3.multiply}.
         */
        static mul<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Performs division on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static divide<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Alias of {@link vec3.divide}.
         */
        static div<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Performs Math.ceil on each component of a vector.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to perform operation.
         * @return out.
         */
        static ceil<Out extends vec3>(out: Out, a: vec3): Out;
        /**
         * Performs Math.floor on each component of a vector.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to perform operation.
         * @return out.
         */
        static floor<Out extends vec3>(out: Out, a: vec3): Out;
        /**
         * Performs Math.min on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static min<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Performs Math.min on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static max<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Performs Math.round on each component of a vector.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to perform operation.
         * @return out.
         */
        static round<Out extends vec3>(out: Out, a: vec3): Out;
        /**
         * Scales a vector with a number.
         *
         * @param out - Vector to store result.
         * @param a - Vector to scale.
         * @param b - The scale number.
         * @return out.
         */
        static scale<Out extends vec3>(out: Out, a: vec3, b: number): Out;
        /**
         * Add two vectors after scaling the second operand by a number.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param scale - The scale number before adding.
         * @return out.
         */
        static scaleAndAdd<Out extends vec3>(out: Out, a: vec3, b: vec3, scale: number): Out;
        /**
         * Calculates the euclidian distance between two vectors.
         *
         * @param a - The first operand.
         * @param b - The second operand.
         * @return Distance between a and b.
         */
        static distance(a: vec3, b: vec3): number;
        /**
         * Alias of {@link vec3.distance}.
         */
        static dist(a: vec3, b: vec3): number;
        /**
         * Calculates the squared euclidian distance between two vectors.
         *
         * @param a - The first operand.
         * @param b - The second operand.
         * @return Squared distance between a and b.
         */
        static squaredDistance(a: vec3, b: vec3): number;
        /**
         * Alias of {@link vec3.squaredDistance}.
         */
        static sqrDist(a: vec3, b: vec3): number;
        /**
         * Calculates the length of a vector.
         *
         * @param a - The vector.
         * @return Length of the vector.
         */
        static magnitude(a: vec3): number;
        /**
         * Alias of {@link vec3.magnitude}.
         */
        static mag(a: vec3): number;
        /**
         * Calculates the squared length of a vector.
         *
         * @param a - The vector.
         * @return Squared length of the vector.
         */
        static squaredMagnitude(a: vec3): number;
        /**
         * Alias of {@link vec3.squaredMagnitude}
         */
        static sqrMag(a: vec3): number;
        /**
         * Negates each component of a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to negate.
         * @return out.
         */
        static negate<Out extends vec3>(out: Out, a: vec3): Out;
        /**
         * Inverts the components of a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to invert.
         * @return out.
         */
        static invert<Out extends vec3>(out: Out, a: vec3): Out;
        /**
         * Safely inverts the components of a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to invert.
         * @return out.
         */
        static invertSafe<Out extends vec3>(out: Out, a: vec3): Out;
        /**
         * Normalizes a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to normalize.
         * @return out.
         */
        static normalize<Out extends vec3>(out: Out, a: vec3): Out;
        /**
         * Calculates the dot product of two vectors.
         *
         * @param a - The first operand.
         * @param b - The second operand.
         * @return Dot product of a and b.
         */
        static dot(a: vec3, b: vec3): number;
        /**
         * Calculates the cross product of two vectors.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static cross<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * Performs a linear interpolation between two vectors.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param t - The interpolation coefficient.
         * @return out.
         */
        static lerp<Out extends vec3>(out: Out, a: vec3, b: vec3, t: number): Out;
        /**
         * Performs a hermite interpolation with two control points.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param c - The third operand.
         * @param d - The fourth operand.
         * @param t - The interpolation coefficient.
         * @return out.
         */
        static hermite<Out extends vec3>(out: Out, a: vec3, b: vec3, c: vec3, d: vec3, t: number): Out;
        /**
         * Performs a bezier interpolation with two control points.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param c - The third operand.
         * @param d - The fourth operand.
         * @param t - The interpolation coefficient.
         * @return out.
         */
        static bezier<Out extends vec3>(out: Out, a: vec3, b: vec3, c: vec3, d: vec3, t: number): Out;
        /**
         * Generates a random vector uniformly distributed on a sphere centered at the origin.
         *
         * @param out - Vector to store result.
         * @param [scale] Length of the resulting vector. If ommitted, a unit length vector will be returned.
         * @return out.
         */
        static random<Out extends vec3>(out: Out, scale: number): Out;
        /**
         * Transforms a point vector with a 4x4 matrix,
         * i.e. 4th vector component is implicitly '1'.
         *
         * @param out - Vector to store result.
         * @param a - Vector to transform.
         * @param {mat4} m - The matrix.
         * @return out.
         */
        static transformMat4<Out extends vec3>(out: Out, a: vec3, m: mat4): Out;
        /**
         * Transforms a normal vector with a 4x4 matrix,
         * i.e. 4th vector component is implicitly '0'.
         *
         * @param out - Vector to store result.
         * @param a - Vector to transform.
         * @param {mat4} m - The matrix.
         * @return out.
         */
        static transformMat4Normal<Out extends vec3>(out: Out, a: vec3, m: mat4): Out;
        /**
         * Transforms a vector with a 3x3 matrix.
         *
         * @param out - Vector to store result.
         * @param a - Vector to transform.
         * @param {mat3} m - The matrix.
         * @return out.
         */
        static transformMat3<Out extends vec3>(out: Out, a: vec3, m: mat3): Out;
        /**
         * Transforms a vector with a quaternion.
         *
         * @param out - Vector to store result.
         * @param a - Vector to transform.
         * @param {quat} q - The quaternion.
         * @return out.
         */
        static transformQuat<Out extends vec3>(out: Out, a: vec3, q: quat): Out;
        /**
         * Rotates a 3D vector around the x-axis.
         * @param out - Vector to store result.
         * @param a - The point to rotate.
         * @param b - The origin of the rotation.
         * @param c - The angle of rotation.
         * @return out.
         */
        static rotateX<Out extends vec3>(out: Out, a: vec3, b: vec3, c: number): Out;
        /**
         * Rotates a 3D vector around the y-axis.
         * @param out - Vector to store result.
         * @param a - The point to rotate.
         * @param b - The origin of the rotation.
         * @param c - The angle of rotation.
         * @return out.
         */
        static rotateY<Out extends vec3>(out: Out, a: vec3, b: vec3, c: number): Out;
        /**
         * Rotates a 3D vector around the z-axis.
         * @param out - Vector to store result.
         * @param a - The point to rotate.
         * @param b - The origin of the rotation.
         * @param c - The angle of rotation.
         * @return out.
         */
        static rotateZ<Out extends vec3>(out: Out, a: vec3, b: vec3, c: number): Out;
        /**
         * Returns string representation of a vector.
         *
         * @param a - The vector.
         * @return - String representation of this vector.
         */
        static str(a: vec3): string;
        /**
         * Store components of a vector into array.
         *
         * @param out - Array to store result.
         * @param v - The vector.
         * @return out.
         */
        static array<Out extends IWritableArrayLike<number>>(out: Out, v: vec3, ofs?: number): Out;
        /**
         * Returns whether the specified vectors are equal. (Compared using ===)
         *
         * @param a - The first vector.
         * @param b - The second vector.
         * @return True if the vectors are equal, false otherwise.
         */
        static exactEquals(a: vec3, b: vec3): boolean;
        /**
         * Returns whether the specified vectors are approximately equal.
         *
         * @param a The first vector.
         * @param b The second vector.
         * @return True if the vectors are approximately equal, false otherwise.
         */
        static equals(a: vec3, b: vec3): boolean;
        /**
         * Gets the angle between two vectors.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return - The angle in radians.
         */
        static angle(a: vec3, b: vec3): number;
        /**
         * Projects a vector onto a plane represented by its normal.
         * @param out The result vector.
         * @param a The vector.
         * @param n The plane's normal.
         */
        static projectOnPlane<Out extends vec3>(out: Out, a: vec3, n: vec3): Out;
        /**
         * Projects a vector onto another vector.
         * @param out The result vector.
         * @param a The vector to project.
         * @param b The vector onto which the projection performs.
         */
        static project<Out extends vec3>(out: Out, a: vec3, b: vec3): Out;
        /**
         * The x component.
         */
        x: number;
        /**
         * The y component.
         */
        y: number;
        /**
         * The z component.
         */
        z: number;
        /**
         * Creates a vector, with components specified separately.
         *
         * @param x - Value assigned to x component.
         * @param y - Value assigned to y component.
         * @param z - Value assigned to z component.
         */
        constructor(x?: number, y?: number, z?: number);
    }
}
declare module "cocos/core/vmath/mat3" {
    /**
     * Mathematical 3x3 matrix.
     *
     * NOTE: we use column-major matrix for all matrix calculation.
     *
     * This may lead to some confusion when referencing OpenGL documentation,
     * however, which represents out all matricies in column-major format.
     * This means that while in code a matrix may be typed out as:
     *
     * [1, 0, 0, 0,
     *  0, 1, 0, 0,
     *  0, 0, 1, 0,
     *  x, y, z, 0]
     *
     * The same matrix in the
     * [OpenGL documentation](https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTranslate.xml)
     * is written as:
     *
     *  1 0 0 x
     *  0 1 0 y
     *  0 0 1 z
     *  0 0 0 0
     *
     * Please rest assured, however, that they are the same thing!
     * This is not unique to glMatrix, either, as OpenGL developers have long been confused by the
     * apparent lack of consistency between the memory layout and the documentation.
     */
    class mat3 {
        /**
         * Creates a matrix, with elements specified separately.
         *
         * @param m00 - Value assigned to element at column 0 row 0.
         * @param m01 - Value assigned to element at column 0 row 1.
         * @param m02 - Value assigned to element at column 0 row 2.
         * @param m03 - Value assigned to element at column 1 row 0.
         * @param m04 - Value assigned to element at column 1 row 1.
         * @param m05 - Value assigned to element at column 1 row 2.
         * @param m06 - Value assigned to element at column 2 row 0.
         * @param m07 - Value assigned to element at column 2 row 1.
         * @param m08 - Value assigned to element at column 2 row 2.
         * @return The newly created matrix.
         */
        static create(m00?: number, m01?: number, m02?: number, m03?: number, m04?: number, m05?: number, m06?: number, m07?: number, m08?: number): mat3;
        /**
         * Clone a matrix.
         *
         * @param a - Matrix to clone.
         * @return The newly created matrix.
         */
        static clone(a: any): mat3;
        /**
         * Copy content of a matrix into another.
         *
         * @param out - Matrix to modified.
         * @param a - The specified matrix.
         * @return out.
         */
        static copy(out: any, a: any): any;
        /**
         * Sets the elements of a matrix to the given values.
         *
         * @param out - The matrix to modified.
         * @param m00 - Value assigned to element at column 0 row 0.
         * @param m01 - Value assigned to element at column 0 row 1.
         * @param m02 - Value assigned to element at column 0 row 2.
         * @param m10 - Value assigned to element at column 1 row 0.
         * @param m11 - Value assigned to element at column 1 row 1.
         * @param m12 - Value assigned to element at column 1 row 2.
         * @param m20 - Value assigned to element at column 2 row 0.
         * @param m21 - Value assigned to element at column 2 row 1.
         * @param m22 - Value assigned to element at column 2 row 2.
         * @return out.
         */
        static set(out: any, m00: any, m01: any, m02: any, m10: any, m11: any, m12: any, m20: any, m21: any, m22: any): any;
        /**
         * return an identity matrix.
         *
         * @return out.
         */
        static identity(out: any): any;
        /**
         * Transposes a matrix.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to transpose.
         * @return out.
         */
        static transpose(out: any, a: any): any;
        /**
         * Inverts a matrix.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to invert.
         * @return out.
         */
        static invert(out: any, a: any): any;
        /**
         * Calculates the adjugate of a matrix.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to calculate.
         * @return out.
         */
        static adjoint(out: any, a: any): any;
        /**
         * Calculates the determinant of a matrix.
         *
         * @param a - Matrix to calculate.
         * @return Determinant of a.
         */
        static determinant(a: any): number;
        /**
         * Multiply two matrices explicitly.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static multiply(out: any, a: any, b: any): any;
        /**
         * Alias of {@link mat3.multiply}.
         */
        static mul(out: any, a: any, b: any): any;
        /**
         * Multiply a matrix with a translation matrix given by a translation offset.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to multiply.
         * @param v - The translation offset.
         * @return out.
         */
        static translate(out: any, a: any, v: any): any;
        /**
         * Rotates a matrix by the given angle.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to rotate.
         * @param rad - The rotation angle.
         * @return out
         */
        static rotate(out: any, a: any, rad: any): any;
        /**
         * Multiply a matrix with a scale matrix given by a scale vector.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to multiply.
         * @param v - The scale vector.
         * @return out
         */
        static scale(out: any, a: any, v: any): any;
        /**
         * Copies the upper-left 3x3 values of a 4x4 matrix into a 3x3 matrix.
         *
         * @param out - Matrix to store result.
         * @param a - The 4x4 matrix.
         * @return out.
         */
        static fromMat4(out: any, a: any): any;
        /**
         * Creates a matrix from a translation offset.
         * This is equivalent to (but much faster than):
         *
         *     mat3.identity(dest);
         *     mat3.translate(dest, dest, vec);
         *
         * @param out - Matrix to store result.
         * @param v - The translation offset.
         * @return out.
         */
        static fromTranslation(out: any, v: any): any;
        /**
         * Creates a matrix from a given angle.
         * This is equivalent to (but much faster than):
         *
         *     mat3.identity(dest);
         *     mat3.rotate(dest, dest, rad);
         *
         * @param out - Matrix to store result.
         * @param rad - The rotation angle.
         * @return out.
         */
        static fromRotation(out: any, rad: any): any;
        /**
         * Creates a matrix from a scale vector.
         * This is equivalent to (but much faster than):
         *
         *     mat3.identity(dest);
         *     mat3.scale(dest, dest, vec);
         *
         * @param out - Matrix to store result.
         * @param v - Scale vector.
         * @return out.
         */
        static fromScaling(out: any, v: any): any;
        /**
         * Copies the values from a 2x3 matrix into a 3x3 matrix.
         *
         * @param out - Matrix to store result.
         * @param a - The 2x3 matrix.
         * @return out.
         */
        static fromMat2d(out: any, a: any): any;
        /**
         * Calculates a 3x3 matrix from the given quaternion.
         *
         * @param out - Matrix to store result.
         * @param q - The quaternion.
         *
         * @return out.
         */
        static fromQuat(out: any, q: any): any;
        /**
         * Calculates a 3x3 matrix from view direction and up direction.
         *
         * @param out - Matrix to store result.
         * @param view - View direction (must be normalized).
         * @param [up] - Up direction, default is (0,1,0) (must be normalized).
         *
         * @return out
         */
        static fromViewUp(_out: any, _view: any, _up: any): any;
        /**
         * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix.
         *
         * @param out - Matrix to store result.
         * @param a - A 4x4 matrix to derive the normal matrix from.
         *
         * @return out.
         */
        static normalFromMat4(out: any, a: any): any;
        /**
         * Returns a string representation of a matrix.
         *
         * @param a - The matrix.
         * @return String representation of this matrix.
         */
        static str(a: any): string;
        /**
         * Store elements of a matrix into array.
         *
         * @param out - Array to store result.
         * @param m - The matrix.
         * @return out.
         */
        static array(out: any, m: any, ofs?: number): any;
        /**
         * Returns Frobenius norm of a matrix.
         *
         * @param a - Matrix to calculate Frobenius norm of.
         * @return - The frobenius norm.
         */
        static frob(a: any): number;
        /**
         * Adds two matrices.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static add(out: any, a: any, b: any): any;
        /**
         * Subtracts matrix b from matrix a.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static subtract(out: any, a: any, b: any): any;
        /**
         * Alias of {@link mat3.subtract}.
         */
        static sub(out: any, a: any, b: any): any;
        /**
         * Multiply each element of a matrix by a scalar number.
         *
         * @param out - Matrix to store result.
         * @param a - Matrix to scale
         * @param b - The scale number.
         * @return out.
         */
        static multiplyScalar(out: any, a: any, b: any): any;
        /**
         * Adds two matrices after multiplying each element of the second operand by a scalar number.
         *
         * @param out - Matrix to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param scale - The scale number.
         * @return out.
         */
        static multiplyScalarAndAdd(out: any, a: any, b: any, scale: any): any;
        /**
         * Returns whether the specified matrices are equal. (Compared using ===)
         *
         * @param a - The first matrix.
         * @param b - The second matrix.
         * @return True if the matrices are equal, false otherwise.
         */
        static exactEquals(a: any, b: any): boolean;
        /**
         * Returns whether the specified matrices are approximately equal.
         *
         * @param a - The first matrix.
         * @param b - The second matrix.
         * @return True if the matrices are equal, false otherwise.
         */
        static equals(a: any, b: any): boolean;
        m00: number;
        m01: number;
        m02: number;
        m03: number;
        m04: number;
        m05: number;
        m06: number;
        m07: number;
        m08: number;
        /**
         * Creates a matrix, with elements specified separately.
         *
         * @param m00 - Value assigned to element at column 0 row 0.
         * @param m01 - Value assigned to element at column 0 row 1.
         * @param m02 - Value assigned to element at column 0 row 2.
         * @param m03 - Value assigned to element at column 1 row 0.
         * @param m04 - Value assigned to element at column 1 row 1.
         * @param m05 - Value assigned to element at column 1 row 2.
         * @param m06 - Value assigned to element at column 2 row 0.
         * @param m07 - Value assigned to element at column 2 row 1.
         * @param m08 - Value assigned to element at column 2 row 2.
         */
        constructor(m00?: number, m01?: number, m02?: number, m03?: number, m04?: number, m05?: number, m06?: number, m07?: number, m08?: number);
    }
    export default mat3;
}
declare module "cocos/core/vmath/vec2" {
    import mat2 from "cocos/core/vmath/mat2";
    import mat23 from "cocos/core/vmath/mat23";
    import mat3 from "cocos/core/vmath/mat3";
    import mat4 from "cocos/core/vmath/mat4";
    import vec3 from "cocos/core/vmath/vec3";
    /**
     * Mathematical 2-dimensional vector.
     *
     * x, y is alias of the first, second component of vector, respectively.
     */
    export default class vec2 {
        static ZERO: vec2;
        static ONE: vec2;
        static NEG_ONE: vec2;
        /**
         * Creates a vector, with components specified separately.
         *
         * @param x - Value assigned to x component.
         * @param y - Value assigned to y component.
         * @return The newly created vector.
         */
        static create(x?: number, y?: number): vec2;
        /**
         * Creates a zero vector.
         *
         * @return The newly created vector.
         */
        static zero<Out extends vec2>(out: Out): Out;
        /**
         * Clone a vector.
         *
         * @param a - Vector to clone.
         * @return The newly created vector.
         */
        static clone(a: vec2): vec2;
        /**
         * Copy content of a vector into another.
         *
         * @param out - The vector to modified.
         * @param a - The specified vector.
         * @return out.
         */
        static copy<Out extends vec2>(out: Out, a: vec2): Out;
        /**
         * Sets the components of a vector to the given values.
         *
         * @param out - The vector to modified.
         * @param x - Value set to x component.
         * @param y - Value set to y component.
         * @return out.
         */
        static set<Out extends vec2>(out: Out, x: number, y: number): Out;
        /**
         * Add two vectors.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static add<Out extends vec2>(out: Out, a: vec2, b: vec2): Out;
        /**
         * Subtract two vectors.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static subtract<Out extends vec2>(out: Out, a: vec2, b: vec2): Out;
        /**
         * Alias of {@link vec2.subtract}.
         */
        static sub<Out extends vec2>(out: Out, a: vec2, b: vec2): Out;
        /**
         * Performs multiply on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static multiply<Out extends vec2>(out: Out, a: vec2, b: vec2): Out;
        /**
         * Alias of {@link vec2.multiply}.
         */
        static mul<Out extends vec2>(out: Out, a: vec2, b: vec2): Out;
        /**
         * Performs division on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static divide<Out extends vec2>(out: Out, a: vec2, b: vec2): Out;
        /**
         * Alias of {@link vec2.divide}.
         */
        static div<Out extends vec2>(out: Out, a: vec2, b: vec2): Out;
        /**
         * Performs Math.ceil on each component of a vector.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to perform operation.
         * @return out.
         */
        static ceil<Out extends vec2>(out: Out, a: vec2): Out;
        /**
         * Performs Math.floor on each component of a vector.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to perform operation.
         * @return out.
         */
        static floor<Out extends vec2>(out: Out, a: vec2): Out;
        /**
         * Performs Math.min on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static min<Out extends vec2>(out: Out, a: vec2, b: vec2): Out;
        /**
         * Performs Math.min on each component of two vectors respectively.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static max<Out extends vec2>(out: Out, a: vec2, b: vec2): Out;
        /**
         * Performs Math.round on each component of a vector.
         *
         * It doesn't matter that any amount of these parameters refer to same vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to perform operation.
         * @return out.
         */
        static round<Out extends vec2>(out: Out, a: vec2): Out;
        /**
         * Scales a vector with a number.
         *
         * @param out - Vector to store result.
         * @param a - Vector to scale.
         * @param b - The scale number.
         * @return out.
         */
        static scale<Out extends vec2>(out: Out, a: vec2, b: number): Out;
        /**
         * Add two vectors after scaling the second operand by a number.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param scale - The scale number before adding.
         * @return out.
         */
        static scaleAndAdd<Out extends vec2>(out: Out, a: vec2, b: vec2, scale: number): Out;
        /**
         * Calculates the euclidian distance between two vectors.
         *
         * @param a - The first operand.
         * @param b - The second operand.
         * @return Distance between a and b.
         */
        static distance(a: vec2, b: vec2): number;
        /**
         * Alias of {@link vec2.distance}.
         */
        static dist(a: vec2, b: vec2): number;
        /**
         * Calculates the squared euclidian distance between two vectors.
         *
         * @param a - The first operand.
         * @param b - The second operand.
         * @return Squared distance between a and b.
         */
        static squaredDistance(a: vec2, b: vec2): number;
        /**
         * Alias of {@link vec2.squaredDistance}.
         */
        static sqrDist(a: vec2, b: vec2): number;
        /**
         * Calculates the length of a vector.
         *
         * @param a - The vector.
         * @return Length of the vector.
         */
        static magnitude(a: vec2): number;
        /**
         * Alias of {@link vec2.magnitude}.
         */
        static mag(a: vec2): number;
        /**
         * Calculates the squared length of a vector.
         *
         * @param a - The vector.
         * @return Squared length of the vector.
         */
        static squaredMagnitude(a: vec2): number;
        /**
         * Alias of {@link vec2.squaredMagnitude}
         */
        static sqrMag(a: vec2): number;
        /**
         * Negates each component of a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to negate.
         * @return out.
         */
        static negate<Out extends vec2>(out: Out, a: vec2): Out;
        /**
         * Invert the components of a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to invert.
         * @return out.
         */
        static inverse<Out extends vec2>(out: Out, a: vec2): Out;
        /**
         * Safely invert the components of a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to invert.
         * @return out.
         */
        static inverseSafe<Out extends vec2>(out: Out, a: vec2): Out;
        /**
         * Normalizes a vector.
         *
         * @param out - Vector to store result.
         * @param a - Vector to normalize.
         * @return out.
         */
        static normalize<Out extends vec2>(out: Out, a: vec2): Out;
        /**
         * Calculates the dot product of two vectors.
         *
         * @param a - The first operand.
         * @param b - The second operand.
         * @return Dot product of a and b.
         */
        static dot(a: vec2, b: vec2): number;
        /**
         * Calculate the cross product of two vectors.
         * Note that the cross product must by definition produce a 3D vector.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static cross<Out extends vec3>(out: Out, a: vec2, b: vec2): Out;
        /**
         * Performs a linear interpolation between two vectors.
         *
         * @param out - Vector to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param t - The interpolation coefficient.
         * @return out.
         */
        static lerp<Out extends vec2>(out: Out, a: vec2, b: vec2, t: number): Out;
        /**
         * Generates a random vector uniformly distributed on a circle centered at the origin.
         *
         * @param out - Vector to store result.
         * @param [scale] Length of the resulting vector. If ommitted, a unit length vector will be returned.
         * @return out.
         */
        static random<Out extends vec2>(out: Out, scale: number): Out;
        /**
         * Transforms a vector with a 2x2 matrix.
         *
         * @param out - Vector to store result.
         * @param a - Vector to transform.
         * @param m - The matrix.
         * @return out.
         */
        static transformMat2<Out extends vec2>(out: Out, a: vec2, m: mat2): Out;
        /**
         * Transforms a vector with a 2x3 matrix.
         *
         * @param out - Vector to store result.
         * @param a - Vector to transform.
         * @param m - The matrix.
         * @return out.
         */
        static transformMat23<Out extends vec2>(out: Out, a: vec2, m: mat23): Out;
        /**
         * Transforms a vector with a 3x3 matrix.
         *
         * @param out - Vector to store result.
         * @param a - Vector to transform.
         * @param m - The matrix.
         * @return out.
         */
        static transformMat3<Out extends vec2>(out: Out, a: vec2, m: mat3): Out;
        /**
         * Transforms a vector with a 4x4 matrix.
         * 3rd vector component is implicitly '0'.
         * 4th vector component is implicitly '1'.
         *
         * @param out - Vector to store result.
         * @param a - Vector to transform.
         * @param m - The matrix.
         * @return out.
         */
        static transformMat4<Out extends vec2>(out: Out, a: vec2, m: mat4): Out;
        /**
         * Returns string representation of a vector.
         *
         * @param a - The vector.
         * @return - String representation of this vector.
         */
        static str(a: vec2): string;
        /**
         * Store components of a vector into array.
         *
         * @param out - Array to store result.
         * @param v - The vector.
         * @return out.
         */
        static array<Out extends IWritableArrayLike<number>>(out: Out, v: vec2, ofs?: number): Out;
        /**
         * Returns whether the specified vectors are equal. (Compared using ===)
         *
         * @param a - The first vector.
         * @param b - The second vector.
         * @return True if the vectors are equal, false otherwise.
         */
        static exactEquals(a: vec2, b: vec2): boolean;
        /**
         * Returns whether the specified vectors are approximately equal.
         *
         * @param a The first vector.
         * @param b The second vector.
         * @return True if the vectors are approximately equal, false otherwise.
         */
        static equals(a: vec2, b: vec2): boolean;
        /**
         * Returns the angle between the two vectors.
         *
         * @param a The first vector.
         * @param b The second vector.
         * @return The angle in radians.
         */
        static angle(a: vec2, b: vec2): number;
        /**
         * The x component.
         */
        x: number;
        /**
         * The y component.
         */
        y: number;
        /**
         * Creates a vector, with components specified separately.
         *
         * @param x - Value assigned to x component.
         * @param y - Value assigned to y component.
         */
        constructor(x?: number, y?: number);
    }
}
declare module "cocos/core/vmath/color3" {
    /**
     * Represents a color with red(r), green(g), blue(b) component of that color.
     */
    export default class color3 {
        /**
         * Creates a color, with components specified separately, or a black color if not specified
         *
         * @param r - Value assigned to r component.
         * @param g - Value assigned to g component.
         * @param b - Value assigned to b component.
         * @return The newly created color.
         */
        static create(r?: number, g?: number, b?: number): color3;
        /**
         * Clone a color.
         *
         * @param a - Color to clone.
         * @return The newly created color.
         */
        static clone(a: color3): color3;
        /**
         * Copy content of a color into another.
         *
         * @param out - The color to modified.
         * @param a - The specified color.
         * @return out.
         */
        static copy<Out extends color3>(out: Out, a: color3): Out;
        /**
         * Set the components of a color to the given values.
         *
         * @param out - The color to modified.
         * @param r - Value assigned to r component.
         * @param g - Value assigned to g component.
         * @param b - Value assigned to b component.
         * @return out.
         */
        static set<Out extends color3>(out: Out, r: number, g: number, b: number): Out;
        /**
         * Converts the hexadecimal formal color into rgb formal.
         *
         * @param out - Color to store result.
         * @param hex - The color's hexadecimal formal.
         * @return out.
         * @function
         */
        static fromHex<Out extends color3>(out: Out, hex: number): Out;
        /**
         * Add components of two colors, respectively.
         *
         * @param out - Color to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static add<Out extends color3>(out: Out, a: color3, b: color3): Out;
        /**
         * Subtract components of color b from components of color a, respectively.
         *
         * @param out - Color to store result.
         * @param a - The a.
         * @param b - The b.
         * @return out.
         */
        static subtract<Out extends color3>(out: Out, a: color3, b: color3): Out;
        /**
         * Alias of {@link color3.subtract}.
         */
        static sub<Out extends color3>(out: Out, a: color3, b: color3): Out;
        /**
         * Multiply components of two colors, respectively.
         *
         * @param out - Color to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static multiply<Out extends color3>(out: Out, a: color3, b: color3): Out;
        /**
         * Alias of {@link color3.multiply}.
         */
        static mul<Out extends color3>(out: Out, a: color3, b: color3): Out;
        /**
         * Divide components of color a by components of color b, respectively.
         *
         * @param out - Color to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static divide<Out extends color3>(out: Out, a: color3, b: color3): Out;
        /**
         * Alias of {@link color3.divide}.
         */
        static div<Out extends color3>(out: Out, a: color3, b: color3): Out;
        /**
         * Scales a color by a number.
         *
         * @param out - Color to store result.
         * @param a - Color to scale.
         * @param b - The scale number.
         * @return out.
         */
        static scale<Out extends color3>(out: Out, a: color3, b: number): Out;
        /**
         * Performs a linear interpolation between two colors.
         *
         * @param out - Color to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param t - The interpolation coefficient.
         * @return out.
         */
        static lerp<Out extends color3>(out: Out, a: color3, b: color3, t: number): Out;
        /**
         * Returns string representation of a color.
         *
         * @param a - The color.
         * @return - String representation of this color.
         */
        static str(a: color3): string;
        /**
         * Store components of a color into array.
         *
         * @param out - Array to store result.
         * @param a - The color.
         * @return out.
         */
        static array<Out extends IWritableArrayLike<number>>(out: Out, a: color3): Out;
        /**
         * Returns whether the specified colors are equal. (Compared using ===)
         *
         * @param a - The first color.
         * @param b - The second color.
         * @return True if the colors are equal, false otherwise.
         */
        static exactEquals(a: color3, b: color3): boolean;
        /**
         * Returns whether the specified colors are approximately equal.
         *
         * @param a - The first color.
         * @param b - The second color.
         * @return True if the colors are approximately equal, false otherwise.
         */
        static equals(a: color3, b: color3): boolean;
        /**
         * Converts a color's rgb formal into the hexadecimal one.
         *
         * @param a - The color.
         * @return - The color's hexadecimal formal.
         */
        static hex(a: color3): number;
        /**
         * The r component.
         */
        r: number;
        /**
         * The g component.
         */
        g: number;
        /**
         * The b component.
         */
        b: number;
        /**
         * Creates a color, with components specified separately.
         *
         * @param r - Value assigned to r component.
         * @param g - Value assigned to g component.
         * @param b - Value assigned to b component.
         */
        constructor(r?: number, g?: number, b?: number);
    }
}
declare module "cocos/core/vmath/color4" {
    /**
     * Represents a color with red(r), green(g), blue(b) component of that color and
     * and an extra alpha(a) component indicating how opaque this color is.
     */
    class color4 {
        /**
         * Creates a white color, or components specified separately.
         *
         * @param r - Value assigned to r component.
         * @param g - Value assigned to g component.
         * @param b - Value assigned to b component.
         * @param a - Value assigned to a component.
         * @return The newly created color.
         */
        static create(r?: number, g?: number, b?: number, a?: number): color4;
        /**
         * Clone a color.
         *
         * @param a - Color to clone.
         * @return The newly created color.
         */
        static clone(a: color4): color4;
        /**
         * Copy content of a color into another.
         *
         * @param out - The color to modified.
         * @param a - The specified color.
         * @return out.
         */
        static copy(out: color4, a: color4): color4;
        /**
         * Set the components of a color to the given values.
         *
         * @param out - The color to modified.
         * @param r - Value assigned to r component.
         * @param g - Value assigned to g component.
         * @param b - Value assigned to b component.
         * @param a - Value assigned to a component.
         * @return out.
         */
        static set(out: color4, r: number, g: number, b: number, a: number): color4;
        /**
         * Converts the hexadecimal formal color into rgb formal.
         *
         * @param out - Color to store result.
         * @param hex - The color's hexadecimal formal.
         * @return out.
         * @function
         */
        static fromHex(out: color4, hex: number): color4;
        /**
         * Add components of two colors, respectively.
         *
         * @param out - Color to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static add(out: color4, a: color4, b: color4): color4;
        /**
         * Subtract components of color b from components of color a, respectively.
         *
         * @param out - Color to store result.
         * @param a - The a.
         * @param b - The b.
         * @return out.
         */
        static subtract(out: color4, a: color4, b: color4): color4;
        /**
         * Alias of {@link color4.subtract}.
         */
        static sub(out: color4, a: color4, b: color4): color4;
        /**
         * Multiply components of two colors, respectively.
         *
         * @param out - Color to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static multiply(out: color4, a: color4, b: color4): color4;
        /**
         * Alias of {@link color4.multiply}.
         */
        static mul(out: color4, a: color4, b: color4): color4;
        /**
         * Divide components of color a by components of color b, respectively.
         *
         * @param out - Color to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @return out.
         */
        static divide(out: color4, a: color4, b: color4): color4;
        /**
         * Alias of {@link color4.divide}.
         */
        static div(out: color4, a: color4, b: color4): color4;
        /**
         * Scales a color by a number.
         *
         * @param out - Color to store result.
         * @param a - Color to scale.
         * @param b - The scale number.
         * @return out.
         */
        static scale(out: color4, a: color4, b: number): color4;
        /**
         * Performs a linear interpolation between two colors.
         *
         * @param out - Color to store result.
         * @param a - The first operand.
         * @param b - The second operand.
         * @param t - The interpolation coefficient.
         * @return out.
         */
        static lerp(out: color4, a: color4, b: color4, t: number): color4;
        /**
         * Returns string representation of a color.
         *
         * @param a - The color.
         * @return - String representation of this color.
         */
        static str(a: color4): string;
        /**
         * Store components of a color into array.
         *
         * @param out - Array to store result.
         * @param a - The color.
         * @return out.
         */
        static array<Out extends IWritableArrayLike<number>>(out: Out, a: color4, ofs?: number): Out;
        /**
         * Returns whether the specified colors are equal. (Compared using ===)
         *
         * @param a - The first color.
         * @param b - The second color.
         * @return True if the colors are equal, false otherwise.
         */
        static exactEquals(a: color4, b: color4): boolean;
        /**
         * Returns whether the specified colors are approximately equal.
         *
         * @param a - The first color.
         * @param b - The second color.
         * @return True if the colors are equal, false otherwise.
         */
        static equals(a: color4, b: color4): boolean;
        /**
         * Converts a color's rgb formal into the hexadecimal one.
         */
        static hex(a: color4): number;
        r: number;
        g: number;
        b: number;
        a: number;
        /**
         * Creates a color, with components specified separately.
         */
        constructor(r?: number, g?: number, b?: number, a?: number);
    }
    export default color4;
}
declare module "cocos/core/vmath/index" {
    export * from "cocos/core/vmath/utils";
    import * as bits from "cocos/core/vmath/bits";
    /**
     * Export module bits.
     */
    export { bits };
    export { default as vec2 } from "cocos/core/vmath/vec2";
    export { default as vec3 } from "cocos/core/vmath/vec3";
    export { default as vec4 } from "cocos/core/vmath/vec4";
    export { default as quat } from "cocos/core/vmath/quat";
    export { default as mat2 } from "cocos/core/vmath/mat2";
    export { default as mat23 } from "cocos/core/vmath/mat23";
    export { default as mat3 } from "cocos/core/vmath/mat3";
    export { default as mat4 } from "cocos/core/vmath/mat4";
    export { default as color3 } from "cocos/core/vmath/color3";
    export { default as color4 } from "cocos/core/vmath/color4";
}
declare module "cocos/core/utils/mutable-forward-iterator" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    /**
     * @class js.array.MutableForwardIterator
     * @example
     * var array = [0, 1, 2, 3, 4];
     * var iterator = new cc.js.array.MutableForwardIterator(array);
     * for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
     *     var item = array[iterator.i];
     *     ...
     * }
     */
    export default class MutableForwardIterator<T> {
        array: T[];
        i: number;
        constructor(array: T[]);
        length: number;
        remove(value: T): void;
        removeAt(i: number): void;
        fastRemove(value: T): void;
        fastRemoveAt(i: number): void;
        push(item: T): void;
    }
}
declare module "cocos/core/utils/array" {
    /****************************************************************************
     Copyright (c) 2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export { default as MutableForwardIterator } from "cocos/core/utils/mutable-forward-iterator";
    /**
     * Removes the array item at the specified index.
     */
    export function removeAt<T>(array: T[], index: number): void;
    /**
     * Removes the array item at the specified index.
     * It's faster but the order of the array will be changed.
     */
    export function fastRemoveAt<T>(array: T[], index: number): void;
    /**
     * Removes the first occurrence of a specific object from the array.
     */
    export function remove<T>(array: T[], value: T): boolean;
    /**
     * Removes the first occurrence of a specific object from the array.
     * It's faster but the order of the array will be changed.
     */
    export function fastRemove<T>(array: T[], value: T): void;
    export function removeIf<T>(array: T[], predicate: (value: T) => boolean): T | undefined;
    /**
     * Verify array's Type.
     */
    export function verifyType<T>(array: T[], type: Function): boolean;
    /**
     * Removes from array all values in minusArr. For each Value in minusArr, the first matching instance in array will be removed.
     * @param array Source Array
     * @param minusArr minus Array
     */
    export function removeArray<T>(array: T[], minusArr: T[]): void;
    /**
     * Inserts some objects at index.
     */
    export function appendObjectsAt<T>(array: T[], addObjs: T[], index: number): T[];
    /**
     * Exact same function as Array.prototype.indexOf.<br>
     * HACK: ugliy hack for Baidu mobile browser compatibility,
     * stupid Baidu guys modify Array.prototype.indexOf for all pages loaded,
     * their version changes strict comparison to non-strict comparison,
     * it also ignores the second parameter of the original API, and this will cause event handler enter infinite loop.<br>
     * Baidu developers, if you ever see this documentation,
     * here is the standard: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf, Seriously!
     *
     * @method indexOf
     * @param searchElement - Element to locate in the array.
     * @param [fromIndex=0] - The index to start the search at
     * @return the first index at which a given element can be found in the array, or -1 if it is not present.
     */
    export function indexOf<T>(array: T[], searchElement: T, fromIndex?: number): number;
    /**
     * Determines whether the array contains a specific value.
     */
    export function contains<T>(array: T[], value: T): boolean;
    /**
     * Copy an array's item to a new array (its performance is better than Array.slice)
     */
    export function copy<T>(array: T[]): any[];
}
declare module "cocos/core/utils/id-generator" {
    /**
     * ID generator for runtime.
     */
    export default class IDGenerator {
        static global: IDGenerator;
        id: number;
        prefix: string;
        /**
         * @param [category] You can specify a unique category to avoid id collision with other instance of IdGenerator.
         */
        constructor(category?: string);
        getNewId(): string;
    }
}
declare module "cocos/core/utils/js-typed" {
    type Getter = () => any;
    type Setter = (value: any) => void;
    /**
     * Check the object whether is number or not
     * If a number is created by using 'new Number(10086)', the typeof it will be "object"...
     * Then you can use this function if you care about this case.
     */
    export function isNumber(object: any): boolean;
    /**
     * Check the object whether is string or not.
     * If a string is created by using 'new String("blabla")', the typeof it will be "object"...
     * Then you can use this function if you care about this case.
     */
    export function isString(object: any): boolean;
    /**
     * Define value, just help to call Object.defineProperty.<br>
     * The configurable will be true.
     * @param [writable=false]
     * @param [enumerable=false]
     */
    export const value: (object: Object, propertyName: string, value_: any, writable?: boolean | undefined, enumerable?: boolean | undefined) => void;
    /**
     * Define get set accessor, just help to call Object.defineProperty(...).
     * @param [setter=null]
     * @param [enumerable=false]
     * @param [configurable=false]
     */
    export const getset: (object: Object, propertyName: string, getter: Getter, setter?: Setter | undefined, enumerable?: boolean | undefined, configurable?: boolean | undefined) => void;
    /**
     * Define get accessor, just help to call Object.defineProperty(...).
     * @param [enumerable=false]
     * @param [configurable=false]
     */
    export const get: (object: Object, propertyName: string, getter: Getter, enumerable?: boolean | undefined, configurable?: boolean | undefined) => void;
    /**
     * Define set accessor, just help to call Object.defineProperty(...).
     * @param [enumerable=false]
     * @param [configurable=false]
     */
    export const set: (object: Object, propertyName: string, setter: Setter, enumerable?: boolean | undefined, configurable?: boolean | undefined) => void;
    /**
     * !#en
     * A simple wrapper of `Object.create(null)` which ensures the return object have no prototype (and thus no inherited members).
     * So we can skip `hasOwnProperty` calls on property lookups.
     * It is a worthwhile optimization than the `{}` literal when `hasOwnProperty` calls are necessary.
     * !#zh
     * 该方法是对 `Object.create(null)` 的简单封装。
     * `Object.create(null)` 用于创建无 prototype （也就无继承）的空对象。
     * 这样我们在该对象上查找属性时，就不用进行 `hasOwnProperty` 判断。
     * 在需要频繁判断 `hasOwnProperty` 时，使用这个方法性能会比 `{}` 更高。
     *
     * @param [forceDictMode=false] Apply the delete operator to newly created map object.
     * This causes V8 to put the object in "dictionary mode" and disables creation of hidden classes
     * which are very expensive for objects that are constantly changing shape.
     */
    export function createMap(forceDictMode?: boolean): any;
    /**
     * Get class name of the object, if object is just a {} (and which class named 'Object'), it will return "".
     * (modified from <a href="http://stackoverflow.com/questions/1249531/how-to-get-a-javascript-objects-class">the code from this stackoverflow post</a>)
     * @param objOrCtor instance or constructor
     */
    export function getClassName(objOrCtor: Object | Function): string;
    /**
     * Defines a polyfill field for obsoleted codes.
     * @param object - YourObject or YourClass.prototype
     * @param obsoleted - "OldParam" or "YourClass.OldParam"
     * @param newExpr - "NewParam" or "YourClass.NewParam"
     * @param  [writable=false]
     */
    export function obsolete(object: any, obsoleted: string, newExpr: string, writable?: boolean): void;
    /**
     * Defines all polyfill fields for obsoleted codes corresponding to the enumerable properties of props.
     * @method obsoletes
     * @param {any} obj - YourObject or YourClass.prototype
     * @param {any} objName - "YourObject" or "YourClass"
     * @param {Object} props
     * @param {Boolean} [writable=false]
     */
    export function obsoletes(obj: any, objName: any, props: any, writable: any): void;
    /**
     * A string tool to construct a string with format string.
     * @param msg - A JavaScript string containing zero or more substitution strings (%s).
     * @param subst - JavaScript objects with which to replace substitution strings within msg.
     * This gives you additional control over the format of the output.
     * @example
     * cc.js.formatStr("a: %s, b: %s", a, b);
     * cc.js.formatStr(a, b, c);
     */
    export function formatStr(msg: string | any, ...subst: any[]): any;
    export function shiftArguments(): any[];
    /**
     * Get property descriptor in object and all its ancestors.
     */
    export function getPropertyDescriptor(object: any, propertyName: string): PropertyDescriptor | null;
    /**
     * Copy all properties not defined in object from arguments[1...n].
     * @param object Object to extend its properties.
     * @param sources Source object to copy properties from.
     * @return The result object.
     */
    export function addon(object?: any, ...sources: any[]): any;
    /**
     * Copy all properties from arguments[1...n] to object.
     * @return The result object.
     */
    export function mixin(object?: any, ...sources: any[]): any;
    /**
     * Derive the class from the supplied base class.
     * Both classes are just native javascript constructors, not created by cc.Class, so
     * usually you will want to inherit using {{#crossLink "cc/Class:method"}}cc.Class {{/crossLink}} instead.
     * @param base The baseclass to inherit.
     * @return The result class.
     */
    export function extend(cls: Function, base: Function): Function | undefined;
    /**
     * Get super class.
     * @param constructor The constructor of subclass.
     */
    export function getSuper(constructor: Function): any;
    /**
     * Checks whether subclass is child of superclass or equals to superclass.
     */
    export function isChildClassOf(subclass: Function, superclass: Function): boolean;
    /**
     * Removes all enumerable properties from object.
     */
    export function clear(object: {}): void;
    export const _idToClass: {};
    export const _nameToClass: {};
    /**
     * Register the class by specified id, if its classname is not defined, the class name will also be set.
     * @method _setClassId
     * @param {String} classId
     * @param {Function} constructor
     * @private
     */
    export function _setClassId(id: any, constructor: any): void;
    /**
     * Register the class by specified name manually
     * @method setClassName
     * @param {String} className
     * @param {Function} constructor
     */
    export function setClassName(className: any, constructor: any): void;
    /**
     * Unregister a class from fireball.
     *
     * If you dont need a registered class anymore, you should unregister the class so that Fireball will not keep its reference anymore.
     * Please note that its still your responsibility to free other references to the class.
     *
     * @method unregisterClass
     * @param {Function} ...constructor - the class you will want to unregister, any number of classes can be added
     */
    export function unregisterClass(...constructors: Function[]): void;
    /**
     * Get the registered class by id
     * @method _getClassById
     * @param {String} classId
     * @return {Function} constructor
     * @private
     */
    export function _getClassById(classId: any): any;
    /**
     * Get the registered class by name
     * @method getClassByName
     * @param {String} classname
     * @return {Function} constructor
     */
    export function getClassByName(classname: any): any;
    /**
     * Get class id of the object
     * @method _getClassId
     * @param {Object|Function} obj - instance or constructor
     * @param {Boolean} [allowTempId=true] - can return temp id in editor
     * @return {String}
     * @private
     */
    export function _getClassId(obj: any, allowTempId: any): any;
}
declare module "cocos/core/utils/pool" {
    /****************************************************************************
     Copyright (c) 2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    type CleanUpFunction<T> = (value: T) => boolean | void;
    /**
     * !#en
     * A fixed-length object pool designed for general type.<br>
     * The implementation of this object pool is very simple,
     * it can helps you to improve your game performance for objects which need frequent release and recreate operations<br/>
     * !#zh
     * 长度固定的对象缓存池，可以用来缓存各种对象类型。<br/>
     * 这个对象池的实现非常精简，它可以帮助您提高游戏性能，适用于优化对象的反复创建和销毁。
     * @class js.Pool
     * @example
     *
     * Example 1:
     *
     * function Details () {
     *     this.uuidList = [];
     * };
     * Details.prototype.reset = function () {
     *     this.uuidList.length = 0;
     * };
     * Details.pool = new js.Pool(function (obj) {
     *     obj.reset();
     * }, 5);
     * Details.pool.get = function () {
     *     return this._get() || new Details();
     * };
     *
     * var detail = Details.pool.get();
     * ...
     * Details.pool.put(detail);
     *
     * Example 2:
     *
     * function Details (buffer) {
     *    this.uuidList = buffer;
     * };
     * ...
     * Details.pool.get = function (buffer) {
     *     var cached = this._get();
     *     if (cached) {
     *         cached.uuidList = buffer;
     *         return cached;
     *     }
     *     else {
     *         return new Details(buffer);
     *     }
     * };
     *
     * var detail = Details.pool.get( [] );
     * ...
     */
    export default class Pool<T> {
        /**
         * !#en
         * The current number of available objects, the default is 0, it will gradually increase with the recycle of the object,
         * the maximum will not exceed the size specified when the constructor is called.
         * !#zh
         * 当前可用对象数量，一开始默认是 0，随着对象的回收会逐渐增大，最大不会超过调用构造函数时指定的 size。
         * @default 0
         */
        count: number;
        /**
         * !#en
         * Get and initialize an object from pool. This method defaults to null and requires the user to implement it.
         * !#zh
         * 获取并初始化对象池中的对象。这个方法默认为空，需要用户自己实现。
         * @param args - parameters to used to initialize the object
         */
        get(): T | null;
        private _pool;
        private _cleanup;
        /**
         * !#en
         * Constructor for creating an object pool for the specific object type.
         * You can pass a callback argument for process the cleanup logic when the object is recycled.
         * !#zh
         * 使用构造函数来创建一个指定对象类型的对象池，您可以传递一个回调函数，用于处理对象回收时的清理逻辑。
         * @method constructor
         * @param {Function} [cleanupFunc] - the callback method used to process the cleanup logic when the object is recycled.
         * @param {Object} cleanupFunc.obj
         * @param {Number} size - initializes the length of the array
         */
        constructor(cleanup: CleanUpFunction<T>, size: number);
        /**
         * !#en
         * Constructor for creating an object pool for the specific object type.
         * You can pass a callback argument for process the cleanup logic when the object is recycled.
         * !#zh
         * 使用构造函数来创建一个指定对象类型的对象池，您可以传递一个回调函数，用于处理对象回收时的清理逻辑。
         * @method constructor
         * @param {Function} [cleanupFunc] - the callback method used to process the cleanup logic when the object is recycled.
         * @param {Object} cleanupFunc.obj
         * @param {Number} size - initializes the length of the array
         */
        constructor(size: number);
        /**
         * !#en
         * Get an object from pool, if no available object in the pool, null will be returned.
         * !#zh
         * 获取对象池中的对象，如果对象池没有可用对象，则返回空。
         */
        _get(): T | null;
        /**
         * !#en Put an object into the pool.
         * !#zh 向对象池返还一个不再需要的对象。
         */
        put(obj: T): void;
        /**
         * !#en Resize the pool.
         * !#zh 设置对象池容量。
         */
        resize(length: number): void;
    }
}
declare module "cocos/core/utils/js" {
    /****************************************************************************
     Copyright (c) 2008-2010 Ricardo Quesada
     Copyright (c) 2011-2012 cocos2d-x.org
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import * as jsarray from "cocos/core/utils/array";
    export * from "cocos/core/utils/js-typed";
    export { default as IDGenerator } from "cocos/core/utils/id-generator";
    export { default as Pool } from "cocos/core/utils/pool";
    export const array: typeof jsarray;
}
declare module "cocos/core/value-types/enum" {
    /**
     * @en
     * Define an enum type. <br/>
     * If a enum item has a value of -1, it will be given an Integer number according to it's order in the list.<br/>
     * Otherwise it will use the value specified by user who writes the enum definition.
     *
     * @zh
     * 定义一个枚举类型。<br/>
     * 用户可以把枚举值设为任意的整数，如果设为 -1，系统将会分配为上一个枚举值 + 1。
     *
     * @param obj - a JavaScript literal object containing enum names and values, or a TypeScript enum type
     * @return the defined enum type
     * @example {@link cocos2d/core/platform/CCEnum/Enum.js}
     * @typescript Enum<T>(obj: T): T
     */
    export default function Enum<T>(obj: T): T;
    /**
     * @en
     * Define an enum type. <br/>
     * If a enum item has a value of -1, it will be given an Integer number according to it's order in the list.<br/>
     * Otherwise it will use the value specified by user who writes the enum definition.
     *
     * @zh
     * 定义一个枚举类型。<br/>
     * 用户可以把枚举值设为任意的整数，如果设为 -1，系统将会分配为上一个枚举值 + 1。
     *
     * @param obj - a JavaScript literal object containing enum names and values, or a TypeScript enum type
     * @return the defined enum type
     * @example {@link cocos2d/core/platform/CCEnum/Enum.js}
     * @typescript Enum<T>(obj: T): T
     */
    export default namespace Enum {
        var isEnum: (enumType: any) => any;
        var getList: (enumDef: any) => any;
    }
    /**
     * @param enumx
     */
    export function ccenum(enumx: any): void;
}
declare module "cocos/core/value-types/value-type" {
    /**
     * !#en The base class of all value types.
     * !#zh 所有值类型的基类。
     * @class ValueType
     *
     */
    export class ValueType {
        /**
         * !#en This method returns an exact copy of current value.
         * !#zh 克隆当前值，该方法返回一个新对象，新对象的值和原对象相等。
         *
         */
        clone(): ValueType;
        /**
         * !#en Compares this object with the other one.
         * !#zh 当前对象是否等于指定对象。
         * @param other
         */
        equals(other: this): boolean;
        /**
         * !#en
         * Linearly interpolates between this value to to value by ratio which is in the range [0, 1].
         * When ratio = 0 returns this. When ratio = 1 return to. When ratio = 0.5 returns the average of this and to.
         * !#zh
         * 线性插值。<br/>
         * 当 ratio = 0 时返回自身，ratio = 1 时返回目标，ratio = 0.5 返回自身和目标的平均值。。
         * @param to - the to value
         * @param ratio - the interpolation coefficient
         * @returns
         */
        lerp(to: this, ratio: number, out?: this): ValueType;
        /**
         * !#en
         * Copys all the properties from another given object to this value.
         * !#zh
         * 从其它对象把所有属性复制到当前对象。
         * @param source - the source to copy
         */
        set(source: this): void;
        /**
         * !#en TODO
         * !#zh 转换为方便阅读的字符串。
         */
        toString(): string;
    }
}
declare module "cocos/core/utils/misc" {
    export const BUILTIN_CLASSID_RE: RegExp;
    export const BASE64_VALUES: any[];
    /**
     * misc utilities
     * @class misc
     * @static
     */
    /**
     * @method propertyDefine
     * @param {Function} ctor
     * @param {Array} sameNameGetSets
     * @param {Object} diffNameGetSets
     */
    export function propertyDefine(ctor: any, sameNameGetSets: any, diffNameGetSets: any): void;
    /**
     * @method nextPOT
     * @param {Number} x
     * @return {Number}
     */
    export function nextPOT(x: any): any;
    export function pushToMap(map: any, key: any, value: any, pushFront: any): void;
    /**
     * @zh
     * 限定浮点数的最大最小值。
     * 数值大于 max_inclusive 则返回 max_inclusive。
     * 数值小于 min_inclusive 则返回 min_inclusive。
     * 否则返回自身。
     *
     * @param value
     * @param min_inclusive
     * @param max_inclusive
     * @return
     * @example
     * var v1 = cc.misc.clampf(20, 0, 20); // 20;
     * var v2 = cc.misc.clampf(-1, 0, 20); //  0;
     * var v3 = cc.misc.clampf(10, 0, 20); // 10;
     */
    export function clampf(value: number, min_inclusive: number, max_inclusive: number): number;
    /**
     * @zh
     * 限定浮点数的取值范围为 0 ~ 1 之间。
     *
     * @param value
     * @return
     * @example
     * var v1 = cc.misc.clamp01(20);  // 1;
     * var v2 = cc.misc.clamp01(-1);  // 0;
     * var v3 = cc.misc.clamp01(0.5); // 0.5;
     */
    export function clamp01(value: number): number;
    /**
     * @zh
     * 两个数字之间的线性插值，比率决定了它对两端的偏向程度。
     *
     * @param a number A
     * @param b number B
     * @param r ratio between 0 and 1
     * @return
     * @example {@link utils/api/engine/docs/cocos2d/core/platform/CCMacro/lerp.js}
     */
    export function lerp(a: number, b: number, r: number): number;
    /**
     * @zh
     * 角度转弧度
     *
     * @param angle
     * @return
     */
    export function degreesToRadians(angle: number): number;
    /**
     * @zh
     * 弧度转角度
     *
     * @param angle
     * @return
     */
    export function radiansToDegrees(angle: number): number;
    export function contains(refNode: any, otherNode: any): any;
    export function isDomNode(obj: any): boolean;
    export function callInNextTick(callback: any, p1?: any, p2?: any): void;
    export function tryCatchFunctor_EDITOR(funcName: any, forwardArgs: any, afterCall: any, bindArg: any): any;
    export function isPlainEmptyObj_DEV(obj: any): boolean;
    export function cloneable_DEV(obj: any): any;
}
declare module "cocos/core/data/utils/attibute-defines" {
    export interface IExposedAttributes {
        /**
         * 指定属性的类型。
         */
        type?: any;
        /**
         * ???
         */
        url?: string;
        /**
         * 控制是否在编辑器中显示该属性。
         */
        visible?: boolean | (() => boolean);
        /**
         * 该属性在编辑器中的显示名称。
         */
        displayName?: string;
        /**
         * ???
         */
        displayOrder?: number;
        /**
         * 该属性在编辑器中的工具提示内容。
         */
        tooltip?: string;
        /**
         * ???
         */
        multiline?: boolean;
        /**
         * 指定该属性是否为可读的。
         */
        readonly?: boolean;
        /**
         * 当该属性为数值类型时，指定了该属性允许的最小值。
         */
        min?: number;
        /**
         * 当该属性为数值类型时，指定了该属性允许的最大值。
         */
        max?: number;
        /**
         * 当该属性为数值类型时并在编辑器中提供了滑动条时，指定了滑动条的步长。
         */
        step?: number;
        /**
         * 当该属性为数值类型时，指定了该属性允许的范围。
         */
        range?: number[];
        /**
         * 当该属性为数值类型时，是否在编辑器中提供滑动条来调节值。
         */
        slide?: boolean;
        /**
         * 该属性是否参与序列化和反序列化。
         */
        serializable?: boolean;
        /**
         * 该属性的曾用名。
         */
        formerlySerializedAs?: string;
        /**
         * 该属性是否仅仅在编辑器环境中生效。
         */
        editorOnly?: boolean;
        /**
         * 是否覆盖基类中的同名属性。
         */
        override?: boolean;
        /**
         * ???
         */
        animatable?: boolean;
        /**
         * ???
         */
        unit?: string;
        /**
         * 转换为弧度
         */
        radian?: boolean;
    }
    export interface IAcceptableAttributes extends IExposedAttributes {
        _short?: boolean;
    }
}
declare module "cocos/core/data/utils/attribute" {
    export const DELIMETER = "$_$";
    export function createAttrsSingle(owner: Object, ownerConstructor: Function, superAttrs?: any): any;
    /**
     * @param subclass Should not have '__attrs__'.
     */
    export function createAttrs(subclass: any): any;
    /**
     * Tag the class with any meta attributes, then return all current attributes assigned to it.
     * This function holds only the attributes, not their implementations.
     * @param constructor The class or instance. If instance, the attribute will be dynamic and only available for the specified instance.
     * @param propertyName The name of property or function, used to retrieve the attributes.
     * @param [newAttributes] The attribute table to mark, new attributes will merged with existed attributes.
     * Attribute whose key starts with '_' will be ignored.
     * @private
     */
    export function attr(constructor: any, propertyName: string): {
        [propertyName: string]: any;
    };
    export function attr(constructor: any, propertyName: string, newAttributes: Object): void;
    /**
     * Returns a readonly meta object.
     */
    export function getClassAttrs(constructor: any): any;
    /**
     * Returns a writable meta object, used to set multi attributes.
     */
    export function getClassAttrsProto(constructor: Function): any;
    export function setClassAttr(ctor: any, propName: any, key: any, value: any): void;
    /**
     * Specify that the input value must be integer in Inspector.
     * Also used to indicates that the elements in array should be type integer.
     * @example
     * // in cc.Class
     * member: {
     *     default: [],
     *     type: cc.Integer
     * }
     * // ES6 ccclass
     * @cc._decorator.property({
     *     type: cc.Integer
     * })
     * member = [];
     */
    export const CCInteger = "Integer";
    /**
     * Indicates that the elements in array should be type double.
     * @example
     * // in cc.Class
     * member: {
     *     default: [],
     *     type: cc.Float
     * }
     * // ES6 ccclass
     * @cc._decorator.property({
     *     type: cc.Float
     * })
     * member = [];
     */
    export const CCFloat = "Float";
    /**
     * Indicates that the elements in array should be type boolean.
     * @example
     * // in cc.Class
     * member: {
     *     default: [],
     *     type: cc.Boolean
     * }
     * // ES6 ccclass
     * @cc._decorator.property({
     *     type: cc.Boolean
     * })
     * member = [];
     */
    export const CCBoolean = "Boolean";
    /**
     * Indicates that the elements in array should be type string.
     * @example
     * // in cc.Class
     * member: {
     *     default: [],
     *     type: cc.String
     * }
     * // ES6 ccclass
     * @cc._decorator.property({
     *     type: cc.String
     * })
     * member = [];
     */
    export const CCString = "String";
    export function getTypeChecker(type: string, attributeName: string): (constructor: Function, mainPropertyName: string) => void;
    export function ObjectType(typeCtor: any): {
        type: string;
        ctor: any;
        _onAfterProp: ((classCtor: any, mainPropName: any) => void) | undefined;
    };
}
declare module "cocos/core/data/class" {
    import * as Attr from "cocos/core/data/utils/attribute";
    function getDefault(defaultVal: any): any;
    function getNewValueTypeCodeJit(value: any): string;
    function escapeForJS(s: any): string;
    /**
     * @module cc
     */
    /**
     * !#en Defines a CCClass using the given specification, please see [Class](/docs/editors_and_tools/creator-chapters/scripting/class.html) for details.
     * !#zh 定义一个 CCClass，传入参数必须是一个包含类型参数的字面量对象，具体用法请查阅[类型定义](/docs/creator/scripting/class.html)。
     *
     * @method Class
     *
     * @param {Object} [options]
     * @param {String} [options.name] - The class name used for serialization.
     * @param {Function} [options.extends] - The base class.
     * @param {Function} [options.ctor] - The constructor.
     * @param {Function} [options.__ctor__] - The same as ctor, but less encapsulated.
     * @param {Object} [options.properties] - The property definitions.
     * @param {Object} [options.statics] - The static members.
     * @param {Function[]} [options.mixins]
     *
     * @param {Object} [options.editor] - attributes for Component listed below.
     * @param {Boolean} [options.editor.executeInEditMode=false] - Allows the current component to run in edit mode. By default, all components are executed only at runtime, meaning that they will not have their callback functions executed while the Editor is in edit mode.
     * @param {Function} [options.editor.requireComponent] - Automatically add required component as a dependency.
     * @param {String} [options.editor.menu] - The menu path to register a component to the editors "Component" menu. Eg. "Rendering/Camera".
     * @param {Number} [options.editor.executionOrder=0] - The execution order of lifecycle methods for Component. Those less than 0 will execute before while those greater than 0 will execute after. The order will only affect onLoad, onEnable, start, update and lateUpdate while onDisable and onDestroy will not be affected.
     * @param {Boolean} [options.editor.disallowMultiple] - If specified to a type, prevents Component of the same type (or subtype) to be added more than once to a Node.
     * @param {Boolean} [options.editor.playOnFocus=false] - This property is only available when executeInEditMode is set. If specified, the editor's scene view will keep updating this node in 60 fps when it is selected, otherwise, it will update only if necessary.
     * @param {String} [options.editor.inspector] - Customize the page url used by the current component to render in the Properties.
     * @param {String} [options.editor.icon] - Customize the icon that the current component displays in the editor.
     * @param {String} [options.editor.help] - The custom documentation URL
     *
     * @param {Function} [options.update] - lifecycle method for Component, see {{#crossLink "Component/update:method"}}{{/crossLink}}
     * @param {Function} [options.lateUpdate] - lifecycle method for Component, see {{#crossLink "Component/lateUpdate:method"}}{{/crossLink}}
     * @param {Function} [options.onLoad] - lifecycle method for Component, see {{#crossLink "Component/onLoad:method"}}{{/crossLink}}
     * @param {Function} [options.start] - lifecycle method for Component, see {{#crossLink "Component/start:method"}}{{/crossLink}}
     * @param {Function} [options.onEnable] - lifecycle method for Component, see {{#crossLink "Component/onEnable:method"}}{{/crossLink}}
     * @param {Function} [options.onDisable] - lifecycle method for Component, see {{#crossLink "Component/onDisable:method"}}{{/crossLink}}
     * @param {Function} [options.onDestroy] - lifecycle method for Component, see {{#crossLink "Component/onDestroy:method"}}{{/crossLink}}
     * @param {Function} [options.onFocusInEditor] - lifecycle method for Component, see {{#crossLink "Component/onFocusInEditor:method"}}{{/crossLink}}
     * @param {Function} [options.onLostFocusInEditor] - lifecycle method for Component, see {{#crossLink "Component/onLostFocusInEditor:method"}}{{/crossLink}}
     * @param {Function} [options.resetInEditor] - lifecycle method for Component, see {{#crossLink "Component/resetInEditor:method"}}{{/crossLink}}
     * @param {Function} [options.onRestore] - for Component only, see {{#crossLink "Component/onRestore:method"}}{{/crossLink}}
     * @param {Function} [options._getLocalBounds] - for Component only, see {{#crossLink "Component/_getLocalBounds:method"}}{{/crossLink}}
     *
     * @return {Function} - the created class
     *
     * @example
    
     // define base class
     var Node = cc.Class();
    
     // define sub class
     var Sprite = cc.Class({
         name: 'Sprite',
         extends: Node,
    
         ctor: function () {
             this.url = "";
             this.id = 0;
         },
    
         statics: {
             // define static members
             count: 0,
             getBounds: function (spriteList) {
                 // compute bounds...
             }
         },
    
         properties {
             width: {
                 default: 128,
                 type: 'Integer',
                 tooltip: 'The width of sprite'
             },
             height: 128,
             size: {
                 get: function () {
                     return cc.v2(this.width, this.height);
                 }
             }
         },
    
         load: function () {
             // load this.url...
         };
     });
    
     // instantiate
    
     var obj = new Sprite();
     obj.url = 'sprite.png';
     obj.load();
     */
    function CCClass(options: any): any;
    namespace CCClass {
        var _isCCClass: (constructor: any) => any;
        var fastDefine: (className: any, constructor: any, serializableFields: any) => void;
        var Attr: typeof Attr;
        var attr: typeof Attr.attr;
        var getInheritanceChain: typeof getInheritanceChain;
        var isArray: (defaultVal: any) => boolean;
        var getDefault: typeof getDefault;
        var escapeForJS: typeof escapeForJS;
        var IDENTIFIER_RE: RegExp;
        var getNewValueTypeCode: false | typeof getNewValueTypeCodeJit;
    }
    /**
     * Return all super classes.
     * @param constructor The Constructor.
     */
    function getInheritanceChain(constructor: any): any[];
    export default CCClass;
}
declare module "cocos/core/value-types/vec3" {
    import Mat4 from "cocos/core/value-types/mat4";
    import { ValueType } from "cocos/core/value-types/value-type";
    /**
     * !#en Representation of 3D vectors and points.
     * !#zh 表示 3D 向量和坐标
     */
    export default class Vec3 extends ValueType {
        x: number;
        y: number;
        z: number;
        /**
         * !#en
         * Constructor
         * see {{#crossLink "cc/vec3:method"}}cc.v3{{/crossLink}}
         * !#zh
         * 构造函数，可查看 {{#crossLink "cc/vec3:method"}}cc.v3{{/crossLink}}
         * @param v
         */
        constructor(v: Vec3);
        /**
         * !#en
         * Constructor
         * see {{#crossLink "cc/vec3:method"}}cc.v3{{/crossLink}}
         * !#zh
         * 构造函数，可查看 {{#crossLink "cc/vec3:method"}}cc.v3{{/crossLink}}
         * @param [x=0]
         * @param [y=0]
         * @param [z=0]
         */
        constructor(x?: number, y?: number, z?: number);
        /**
         * !#en clone a Vec3 value
         * !#zh 克隆一个 Vec3 值
         */
        clone(): Vec3;
        /**
         * !#en Set the current vector value with the given vector.
         * !#zh 用另一个向量设置当前的向量对象值。
         *
         * @param newValue - !#en new value to set. !#zh 要设置的新值
         * @return returns this
         * @chainable
         */
        set(newValue: Vec3): this;
        /**
         * !#en Check whether the vector equals another one
         * !#zh 当前的向量是否与指定的向量相等。
         *
         * @param other
         * @return
         */
        equals(other: Vec3): boolean;
        /**
         * !#en Check whether two vector equal with some degree of variance.
         * !#zh
         * 近似判断两个点是否相等。<br/>
         * 判断 2 个向量是否在指定数值的范围之内，如果在则返回 true，反之则返回 false。
         *
         * @param other
         * @param variance
         * @return
         */
        fuzzyEquals(other: Vec3, variance: number): boolean;
        /**
         * !#en Transform to string with vector informations
         * !#zh 转换为方便阅读的字符串。
         *
         * @return
         */
        toString(): string;
        /**
         * !#en Calculate linear interpolation result between this vector and another one with given ratio
         * !#zh 线性插值。
         *
         * @param to
         * @param ratio - the interpolation coefficient
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return
         */
        lerp(to: Vec3, ratio: number, out?: Vec3): Vec3;
        /**
         * !#en Clamp the vector between from float and to float.
         * !#zh
         * 返回指定限制区域后的向量。<br/>
         * 向量大于 max_inclusive 则返回 max_inclusive。<br/>
         * 向量小于 min_inclusive 则返回 min_inclusive。<br/>
         * 否则返回自身。
         *
         * @param min_inclusive
         * @param max_inclusive
         * @return
         */
        clampf(min_inclusive: Vec3, max_inclusive: Vec3): this;
        /**
         * !#en Adds this vector. If you want to save result to another vector, use add() instead.
         * !#zh 向量加法。如果你想保存结果到另一个向量，使用 add() 代替。
         *
         * @param vector
         * @return returns this
         * @chainable
         */
        addSelf(vector: Vec3): this;
        /**
         * !#en Adds two vectors, and returns the new result.
         * !#zh 向量加法，并返回新结果。
         *
         * @param vector
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        add(vector: Vec3, out?: Vec3): Vec3;
        /**
         * !#en Subtracts one vector from this. If you want to save result to another vector, use sub() instead.
         * !#zh 向量减法。如果你想保存结果到另一个向量，可使用 sub() 代替。
         *
         * @param vector
         * @return returns this
         * @chainable
         */
        subSelf(vector: Vec3): this;
        /**
         * !#en Subtracts one vector from this, and returns the new result.
         * !#zh 向量减法，并返回新结果。
         *
         * @param vector
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        sub(vector: Vec3, out?: Vec3): Vec3;
        /**
         * !#en Multiplies this by a number. If you want to save result to another vector, use mul() instead.
         * !#zh 缩放当前向量。如果你想结果保存到另一个向量，可使用 mul() 代替。
         *
         * @param num
         * @return returns this
         * @chainable
         */
        mulSelf(num: number): this;
        /**
         * !#en Multiplies by a number, and returns the new result.
         * !#zh 缩放向量，并返回新结果。
         *
         * @param num
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        mul(num: number, out?: Vec3): Vec3;
        /**
         * !#en Multiplies two vectors.
         * !#zh 分量相乘。
         *
         * @param vector
         * @return returns this
         * @chainable
         */
        scaleSelf(vector: Vec3): this;
        /**
         * !#en Multiplies two vectors, and returns the new result.
         * !#zh 分量相乘，并返回新的结果。
         *
         * @param vector
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        scale(vector: Vec3, out?: Vec3): Vec3;
        /**
         * !#en Divides by a number. If you want to save result to another vector, use div() instead.
         * !#zh 向量除法。如果你想结果保存到另一个向量，可使用 div() 代替。
         *
         * @param vector
         * @return returns this
         * @chainable
         */
        divSelf(num: number): this;
        /**
         * !#en Divides by a number, and returns the new result.
         * !#zh 向量除法，并返回新的结果。
         *
         * @param vector
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        div(num: number, out?: Vec3): Vec3;
        /**
         * !#en Negates the components. If you want to save result to another vector, use neg() instead.
         * !#zh 向量取反。如果你想结果保存到另一个向量，可使用 neg() 代替。
         *
         * @return returns this
         * @chainable
         */
        negSelf(): this;
        /**
         * !#en Negates the components, and returns the new result.
         * !#zh 返回取反后的新向量。
         *
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        neg(out?: Vec3): Vec3;
        /**
         * !#en Dot product
         * !#zh 当前向量与指定向量进行点乘。
         *
         * @param [vector]
         * @return the result
         */
        dot(vector: Vec3): number;
        /**
         * !#en Cross product
         * !#zh 当前向量与指定向量进行叉乘。
         *
         * @param vector
         * @param [out]
         * @return the result
         */
        cross(vector: Vec3, out?: Vec3): Vec3;
        /**
         * !#en Returns the length of this vector.
         * !#zh 返回该向量的长度。
         *
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * v.mag(); // return 14.142135623730951;
         */
        mag(): number;
        /**
         * !#en Returns the squared length of this vector.
         * !#zh 返回该向量的长度平方。
         *
         * @return the result
         */
        magSqr(): number;
        /**
         * !#en Make the length of this vector to 1.
         * !#zh 向量归一化，让这个向量的长度为 1。
         *
         * @return returns this
         * @chainable
         */
        normalizeSelf(): this;
        /**
         * !#en
         * Returns this vector with a magnitude of 1.<br/>
         * <br/>
         * Note that the current vector is unchanged and a new normalized vector is returned.
         * If you want to normalize the current vector, use normalizeSelf function.
         * !#zh
         * 返回归一化后的向量。<br/>
         * <br/>
         * 注意，当前向量不变，并返回一个新的归一化向量。如果你想来归一化当前向量，可使用 normalizeSelf 函数。
         *
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return result
         */
        normalize(out?: Vec3): Vec3;
        /**
         * Transforms the vec3 with a mat4. 4th vector component is implicitly '1'
         *
         * @param m matrix to transform with
         * @param [out] The receiving vector, can be `this`; if absent, a new vector would be created.
         * @returns out
         */
        transformMat4(m: Mat4, out?: Vec3): Vec3;
    }
    /**
     * !#en The convenience method to create a new {{#crossLink "Vec3"}}cc.Vec3{{/crossLink}}.
     * !#zh 通过该简便的函数进行创建 {{#crossLink "Vec3"}}cc.Vec3{{/crossLink}} 对象。
     * @param v
     * @return
     * @example
     * var v1 = cc.v3();
     * var v2 = cc.v3(0, 0, 0);
     * var v3 = cc.v3(v2);
     * var v4 = cc.v3({x: 100, y: 100, z: 0});
     */
    export function v3(v: Vec3): Vec3;
    /**
     * !#en The convenience method to create a new {{#crossLink "Vec3"}}cc.Vec3{{/crossLink}}.
     * !#zh 通过该简便的函数进行创建 {{#crossLink "Vec3"}}cc.Vec3{{/crossLink}} 对象。
     * @param [x=0]
     * @param [y=0]
     * @param [z=0]
     * @return
     * @example
     * var v1 = cc.v3();
     * var v2 = cc.v3(0, 0, 0);
     * var v3 = cc.v3(v2);
     * var v4 = cc.v3({x: 100, y: 100, z: 0});
     */
    export function v3(x?: number, y?: number, z?: number): Vec3;
}
declare module "cocos/core/value-types/quat" {
    import { ValueType } from "cocos/core/value-types/value-type";
    import Vec3 from "cocos/core/value-types/vec3";
    /**
     * !#en Representation of 2D vectors and points.
     * !#zh 表示 2D 向量和坐标
     */
    export default class Quat extends ValueType {
        x: number;
        y: number;
        z: number;
        w: number;
        /**
         * !#en
         * Constructor
         * see {{#crossLink "cc/quat:method"}}cc.quat{{/crossLink}}
         * !#zh
         * 构造函数，可查看 {{#crossLink "cc/quat:method"}}cc.quat{{/crossLink}}
         *
         * @param other
         */
        constructor(other: Quat);
        /**
         * !#en
         * Constructor
         * see {{#crossLink "cc/quat:method"}}cc.quat{{/crossLink}}
         * !#zh
         * 构造函数，可查看 {{#crossLink "cc/quat:method"}}cc.quat{{/crossLink}}
         *
         * @param [x=0]
         * @param [y=0]
         * @param [z=0]
         * @param [w=1]
         */
        constructor(x?: number, y?: number, z?: number, w?: number);
        /**
         * !#en clone a Quat object and return the new object
         * !#zh 克隆一个四元数并返回
         *
         * @return
         */
        clone(): Quat;
        /**
         * !#en Set values with another quaternion
         * !#zh 用另一个四元数的值设置到当前对象上。
         *
         * @param newValue - !#en new value to set. !#zh 要设置的新值
         * @return returns this
         * @chainable
         */
        set(newValue: Quat): this;
        /**
         * !#en Check whether current quaternion equals another
         * !#zh 当前的四元数是否与指定的四元数相等。
         *
         * @param other
         * @return
         */
        equals(other: Quat): boolean;
        getEulerAngles(out?: Vec3): Vec3;
        lerp(to: Quat, ratio: number, out?: Quat): Quat;
    }
    /**
     * !#en The convenience method to create a new {{#crossLink "Quat"}}cc.Quat{{/crossLink}}.
     * !#zh 通过该简便的函数进行创建 {{#crossLink "Quat"}}cc.Quat{{/crossLink}} 对象。
     *
     * @param other
     * @return
     */
    export function quat(other: Quat): Quat;
    /**
     * !#en The convenience method to create a new {{#crossLink "Quat"}}cc.Quat{{/crossLink}}.
     * !#zh 通过该简便的函数进行创建 {{#crossLink "Quat"}}cc.Quat{{/crossLink}} 对象。
     *
     * @param [x=0]
     * @param [y=0]
     * @param [z=0]
     * @param [w=1]
     * @return
     */
    export function quat(x?: number, y?: number, z?: number, w?: number): Quat;
}
declare module "cocos/core/value-types/mat4" {
    import Quat from "cocos/core/value-types/quat";
    import { ValueType } from "cocos/core/value-types/value-type";
    import Vec3 from "cocos/core/value-types/vec3";
    /**
     * !#en Representation of 4*4 matrix.
     * !#zh 表示 4*4 矩阵
     */
    export default class Mat4 extends ValueType {
        m00: number;
        m01: number;
        m02: number;
        m03: number;
        m04: number;
        m05: number;
        m06: number;
        m07: number;
        m08: number;
        m09: number;
        m10: number;
        m11: number;
        m12: number;
        m13: number;
        m14: number;
        m15: number;
        /**
         * !#en
         * Constructor
         * see {{#crossLink "cc/mat4:method"}}cc.mat4{{/crossLink}}
         * !#zh
         * 构造函数，可查看 {{#crossLink "cc/mat4:method"}}cc.mat4{{/crossLink}}
         *
         * @param other
         */
        constructor(other: Mat4);
        /**
         * !#en
         * Constructor
         * see {{#crossLink "cc/mat4:method"}}cc.mat4{{/crossLink}}
         * !#zh
         * 构造函数，可查看 {{#crossLink "cc/mat4:method"}}cc.mat4{{/crossLink}}
         *
         * @param m00 Component in column 0, row 0 position (index 0)
         * @param m01 Component in column 0, row 1 position (index 1)
         * @param m02 Component in column 0, row 2 position (index 2)
         * @param m03 Component in column 0, row 3 position (index 3)
         * @param m10 Component in column 1, row 0 position (index 4)
         * @param m11 Component in column 1, row 1 position (index 5)
         * @param m12 Component in column 1, row 2 position (index 6)
         * @param m13 Component in column 1, row 3 position (index 7)
         * @param m20 Component in column 2, row 0 position (index 8)
         * @param m21 Component in column 2, row 1 position (index 9)
         * @param m22 Component in column 2, row 2 position (index 10)
         * @param m23 Component in column 2, row 3 position (index 11)
         * @param m30 Component in column 3, row 0 position (index 12)
         * @param m31 Component in column 3, row 1 position (index 13)
         * @param m32 Component in column 3, row 2 position (index 14)
         * @param m33 Component in column 3, row 3 position (index 15)
         */
        constructor(m00?: number, m01?: number, m02?: number, m03?: number, m04?: number, m05?: number, m06?: number, m07?: number, m08?: number, m09?: number, m10?: number, m11?: number, m12?: number, m13?: number, m14?: number, m15?: number);
        /**
         * !#en clone a Mat4 object
         * !#zh 克隆一个 Mat4 对象
         *
         * @return
         */
        clone(): Mat4;
        /**
         * !#en Sets the matrix with another one's value
         * !#zh 用另一个矩阵设置这个矩阵的值。
         *
         * @param srcObj
         * @return returns this
         * @chainable
         */
        set(other: Mat4): this;
        /**
         * !#en Check whether two matrix equal
         * !#zh 当前的矩阵是否与指定的矩阵相等。
         *
         * @param other
         * @return
         */
        equals(other: Mat4): boolean;
        /**
         * !#en Check whether two matrix equal with default degree of variance.
         * !#zh
         * 近似判断两个矩阵是否相等。<br/>
         * 判断 2 个矩阵是否在默认误差范围之内，如果在则返回 true，反之则返回 false。
         *
         * @param other
         * @return
         */
        fuzzyEquals(other: Mat4): boolean;
        /**
         * !#en Transform to string with matrix informations
         * !#zh 转换为方便阅读的字符串。
         *
         * @return
         */
        toString(): string;
        /**
         * Set the matrix to the identity matrix
         *
         * @return self
         * @chainable
         */
        identity(): any;
        /**
         * Transpose the values of a mat4
         *
         * @param [out] The receiving matrix, can be `this`; if absent, a new matrix would be created.
         * @return out
         */
        transpose(out?: Mat4): any;
        /**
         * Inverts a mat4
         *
         * @param [out] The receiving matrix, can be `this`; if absent, a new matrix would be created.
         * @return out
         */
        invert(out?: Mat4): any;
        /**
         * Calculates the adjugate of a mat4
         *
         * @param [out] The receiving matrix, can be `this`; if absent, a new matrix would be created.
         * @return out
         */
        adjoint(out?: Mat4): any;
        /**
         * Calculates the determinant of a mat4
         *
         * @return determinant of a
         */
        determinant(): number;
        /**
         * Adds two Mat4
         *
         * @param other the second operand
         * @param [out] The receiving matrix, can be `this`; if absent, a new matrix would be created.
         * @return out
         */
        add(other: Mat4, out?: Mat4): any;
        /**
         * Subtracts the current matrix with another one
         *
         * @param other the second operand
         * @param [out] The receiving matrix, can be `this`; if absent, a new matrix would be created.
         * @return out
         */
        sub(other: Mat4, out?: Mat4): any;
        /**
         * Subtracts the current matrix with another one
         *
         * @param other the second operand
         * @param [out] The receiving matrix, can be `this`; if absent, a new matrix would be created.
         * @return out
         */
        mul(other: Mat4, out?: Mat4): any;
        /**
         * Multiply each element of the matrix by a scalar.
         *
         * @param number amount to scale the matrix's elements by
         * @param [out] The receiving matrix, can be `this`; if absent, a new matrix would be created.
         * @return out
         */
        mulScalar(num: number, out?: Mat4): any;
        /**
         * Translate a mat4 by the given vector
         *
         * @param v vector to translate by
         * @param [out] The receiving matrix, can be `this`; if absent, a new matrix would be created.
         * @return out
         */
        translate(v: Vec3, out?: Mat4): any;
        /**
         * Scales the mat4 by the dimensions in the given vec3
         *
         * @param v vector to scale by
         * @param [out] The receiving matrix, can be `this`; if absent, a new matrix would be created.
         * @return out
         */
        scale(v: Vec3, out?: Mat4): any;
        /**
         * Rotates a mat4 by the given angle around the given axis
         *
         * @param rad the angle to rotate the matrix by
         * @param axis the axis to rotate around
         * @param [out] The receiving matrix, can be `this`; if absent, a new matrix would be created.
         * @return out
         */
        rotate(rad: number, axis: Vec3, out?: Mat4): any;
        /**
         * Returns the translation vector component of a transformation matrix.
         *
         * @param  {Vec3} out Vector to receive translation component, if not provided, a new vec3 will be created
         * @return out
         */
        getTranslation(out?: Mat4): any;
        /**
         * Returns the scale factor component of a transformation matrix
         *
         * @param out Vector to receive scale component, if not provided, a new vec3 will be created
         * @return out
         */
        getScale(out: Vec3): any;
        /**
         * Returns the rotation factor component of a transformation matrix
         *
         * @param out Vector to receive rotation component, if not provided, a new quaternion object will be created
         * @return out
         */
        getRotation(out: Quat): any;
        /**
         * Restore the matrix values from a quaternion rotation, vector translation and vector scale
         *
         * @param q Rotation quaternion
         * @param v Translation vector
         * @param s Scaling vector
         * @return the current mat4 object
         * @chainable
         */
        fromRTS(q: Quat, v: Vec3, s: Vec3): any;
        /**
         * Restore the matrix values from a quaternion rotation
         *
         * @param q Rotation quaternion
         * @return the current mat4 object
         * @chainable
         */
        fromQuat(quat: Quat): any;
    }
    /**
     * !#en The convenience method to create a new {{#crossLink "Mat4"}}cc.Mat4{{/crossLink}}.
     * !#zh 通过该简便的函数进行创建 {{#crossLink "Mat4"}}cc.Mat4{{/crossLink}} 对象。
     *
     * @param other
     * @return
     */
    export function mat4(other: Mat4): Mat4;
    /**
     * !#en The convenience method to create a new {{#crossLink "Mat4"}}cc.Mat4{{/crossLink}}.
     * !#zh 通过该简便的函数进行创建 {{#crossLink "Mat4"}}cc.Mat4{{/crossLink}} 对象。
     *
     * @param m00 Component in column 0, row 0 position (index 0)
     * @param m01 Component in column 0, row 1 position (index 1)
     * @param m02 Component in column 0, row 2 position (index 2)
     * @param m03 Component in column 0, row 3 position (index 3)
     * @param m10 Component in column 1, row 0 position (index 4)
     * @param m11 Component in column 1, row 1 position (index 5)
     * @param m12 Component in column 1, row 2 position (index 6)
     * @param m13 Component in column 1, row 3 position (index 7)
     * @param m20 Component in column 2, row 0 position (index 8)
     * @param m21 Component in column 2, row 1 position (index 9)
     * @param m22 Component in column 2, row 2 position (index 10)
     * @param m23 Component in column 2, row 3 position (index 11)
     * @param m30 Component in column 3, row 0 position (index 12)
     * @param m31 Component in column 3, row 1 position (index 13)
     * @param m32 Component in column 3, row 2 position (index 14)
     * @param m33 Component in column 3, row 3 position (index 15)
     * @return
     */
    export function mat4(m00?: number, m01?: number, m02?: number, m03?: number, m10?: number, m11?: number, m12?: number, m13?: number, m20?: number, m21?: number, m22?: number, m23?: number, m30?: number, m31?: number, m32?: number, m33?: number): Mat4;
}
declare module "cocos/core/value-types/vec2" {
    import Mat4 from "cocos/core/value-types/mat4";
    import { ValueType } from "cocos/core/value-types/value-type";
    /**
     * !#en Representation of 2D vectors and points.
     * !#zh 表示 2D 向量和坐标
     */
    export default class Vec2 extends ValueType {
        x: number;
        y: number;
        /**
         * !#en
         * Constructor
         * see {{#crossLink "cc/vec2:method"}}cc.v2{{/crossLink}} or {{#crossLink "cc/p:method"}}cc.p{{/crossLink}}
         * !#zh
         * 构造函数，可查看 {{#crossLink "cc/vec2:method"}}cc.v2{{/crossLink}} 或者 {{#crossLink "cc/p:method"}}cc.p{{/crossLink}}
         * @param v
         */
        constructor(v: Vec2);
        /**
         * !#en
         * Constructor
         * see {{#crossLink "cc/vec2:method"}}cc.v2{{/crossLink}} or {{#crossLink "cc/p:method"}}cc.p{{/crossLink}}
         * !#zh
         * 构造函数，可查看 {{#crossLink "cc/vec2:method"}}cc.v2{{/crossLink}} 或者 {{#crossLink "cc/p:method"}}cc.p{{/crossLink}}
         * @param [x=0]
         * @param [y=0]
         */
        constructor(x?: number, y?: number);
        /**
         * !#en clone a Vec2 object
         * !#zh 克隆一个 Vec2 对象
         */
        clone(): Vec2;
        /**
         * !#en Sets vector with another's value
         * !#zh 设置向量值。
         * @param newValue - !#en new value to set. !#zh 要设置的新值
         * @return returns this
         * @chainable
         */
        set(newValue: Vec2): this;
        /**
         * !#en Check whether two vector equal
         * !#zh 当前的向量是否与指定的向量相等。
         * @param other
         * @return
         */
        equals(other: Vec2): boolean;
        /**
         * !#en Check whether two vector equal with some degree of variance.
         * !#zh
         * 近似判断两个点是否相等。<br/>
         * 判断 2 个向量是否在指定数值的范围之内，如果在则返回 true，反之则返回 false。
         * @param other
         * @param variance
         * @return
         */
        fuzzyEquals(other: Vec2, variance: number): boolean;
        /**
         * !#en Transform to string with vector informations
         * !#zh 转换为方便阅读的字符串。
         */
        toString(): string;
        /**
         * !#en Calculate linear interpolation result between this vector and another one with given ratio
         * !#zh 线性插值。
         * @param to
         * @param ratio - the interpolation coefficient
         * @param [out] - optional, the receiving vector, you can pass the same vec2
         * to save result to itself, if not provided, a new vec2 will be created
         * @return
         */
        lerp(to: Vec2, ratio: number, out?: Vec2): Vec2;
        /**
         * !#en Clamp the vector between from float and to float.
         * !#zh
         * 返回指定限制区域后的向量。<br/>
         * 向量大于 max_inclusive 则返回 max_inclusive。<br/>
         * 向量小于 min_inclusive 则返回 min_inclusive。<br/>
         * 否则返回自身。
         * @param min_inclusive
         * @param max_inclusive
         * @return
         * @example
         * var min_inclusive = cc.v2(0, 0);
         * var max_inclusive = cc.v2(20, 20);
         * var v1 = cc.v2(20, 20).clamp(min_inclusive, max_inclusive); // Vec2 {x: 20, y: 20};
         * var v2 = cc.v2(0, 0).clamp(min_inclusive, max_inclusive);   // Vec2 {x: 0, y: 0};
         * var v3 = cc.v2(10, 10).clamp(min_inclusive, max_inclusive); // Vec2 {x: 10, y: 10};
         */
        clampf(min_inclusive: Vec2, max_inclusive: Vec2): this;
        /**
         * !#en Adds this vector. If you want to save result to another vector, use add() instead.
         * !#zh 向量加法。如果你想保存结果到另一个向量，使用 add() 代替。
         * @param vector
         * @return returns this
         * @chainable
         * @example
         * var v = cc.v2(10, 10);
         * v.addSelf(cc.v2(5, 5));// return Vec2 {x: 15, y: 15};
         */
        addSelf(vector: Vec2): this;
        /**
         * !#en Adds two vectors, and returns the new result.
         * !#zh 向量加法，并返回新结果。
         * @param vector
         * @param [out] - optional, the receiving vector, you can pass the same vec2
         * to save result to itself, if not provided, a new vec2 will be created
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * v.add(cc.v2(5, 5));      // return Vec2 {x: 15, y: 15};
         * var v1;
         * v.add(cc.v2(5, 5), v1);  // return Vec2 {x: 15, y: 15};
         */
        add(vector: Vec2, out?: Vec2): Vec2;
        /**
         * !#en Subtracts one vector from this. If you want to save result to another vector, use sub() instead.
         * !#zh 向量减法。如果你想保存结果到另一个向量，可使用 sub() 代替。
         * @param vector
         * @return returns this
         * @chainable
         * @example
         * var v = cc.v2(10, 10);
         * v.subSelf(cc.v2(5, 5));// return Vec2 {x: 5, y: 5};
         */
        subSelf(vector: Vec2): this;
        /**
         * !#en Subtracts one vector from this, and returns the new result.
         * !#zh 向量减法，并返回新结果。
         * @param vector
         * @param [out] - optional, the receiving vector, you can pass the same vec2
         * to save result to itself, if not provided, a new vec2 will be created
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * v.sub(cc.v2(5, 5));      // return Vec2 {x: 5, y: 5};
         * var v1;
         * v.sub(cc.v2(5, 5), v1);  // return Vec2 {x: 5, y: 5};
         */
        sub(vector: Vec2, out?: Vec2): Vec2;
        /**
         * !#en Multiplies this by a number. If you want to save result to another vector, use mul() instead.
         * !#zh 缩放当前向量。如果你想结果保存到另一个向量，可使用 mul() 代替。
         * @param num
         * @return returns this
         * @chainable
         * @example
         * var v = cc.v2(10, 10);
         * v.mulSelf(5);// return Vec2 {x: 50, y: 50};
         */
        mulSelf(num: number): this;
        /**
         * !#en Multiplies by a number, and returns the new result.
         * !#zh 缩放向量，并返回新结果。
         * @param num
         * @param [out] - optional, the receiving vector, you can pass the same vec2
         * to save result to itself, if not provided, a new vec2 will be created
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * v.mul(5);      // return Vec2 {x: 50, y: 50};
         * var v1;
         * v.mul(5, v1);  // return Vec2 {x: 50, y: 50};
         */
        mul(num: number, out?: Vec2): Vec2;
        /**
         * !#en Multiplies two vectors.
         * !#zh 分量相乘。
         * @param vector
         * @return returns this
         * @chainable
         * @example
         * var v = cc.v2(10, 10);
         * v.scaleSelf(cc.v2(5, 5));// return Vec2 {x: 50, y: 50};
         */
        scaleSelf(vector: Vec2): this;
        /**
         * !#en Multiplies two vectors, and returns the new result.
         * !#zh 分量相乘，并返回新的结果。
         *
         * @param vector
         * @param [out] - optional, the receiving vector, you can pass the same vec2
         * to save result to itself, if not provided, a new vec2 will be created
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * v.scale(cc.v2(5, 5));      // return Vec2 {x: 50, y: 50};
         * var v1;
         * v.scale(cc.v2(5, 5), v1);  // return Vec2 {x: 50, y: 50};
         */
        scale(vector: Vec2, out?: Vec2): Vec2;
        /**
         * !#en Divides by a number. If you want to save result to another vector, use div() instead.
         * !#zh 向量除法。如果你想结果保存到另一个向量，可使用 div() 代替。
         * @param divisor
         * @return returns this
         * @chainable
         * @example
         * var v = cc.v2(10, 10);
         * v.divSelf(5); // return Vec2 {x: 2, y: 2};
         */
        divSelf(num: number): this;
        /**
         * !#en Divides by a number, and returns the new result.
         * !#zh 向量除法，并返回新的结果。
         *
         * @param divisor
         * @param [out] - optional, the receiving vector, you can pass the same vec2
         * to save result to itself, if not provided, a new vec2 will be created
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * v.div(5);      // return Vec2 {x: 2, y: 2};
         * var v1;
         * v.div(5, v1);  // return Vec2 {x: 2, y: 2};
         */
        div(num: number, out?: Vec2): Vec2;
        /**
         * !#en Negates the components. If you want to save result to another vector, use neg() instead.
         * !#zh 向量取反。如果你想结果保存到另一个向量，可使用 neg() 代替。
         * @return returns this
         * @chainable
         * @example
         * var v = cc.v2(10, 10);
         * v.negSelf(); // return Vec2 {x: -10, y: -10};
         */
        negSelf(): this;
        /**
         * !#en Negates the components, and returns the new result.
         * !#zh 返回取反后的新向量。
         * @param [out] - optional, the receiving vector, you can pass the same vec2 to
         * save result to itself, if not provided, a new vec2 will be created
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * var v1;
         * v.neg(v1);  // return Vec2 {x: -10, y: -10};
         */
        neg(out?: Vec2): Vec2;
        /**
         * !#en Dot product
         * !#zh 当前向量与指定向量进行点乘。
         * @param [vector]
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * v.dot(cc.v2(5, 5)); // return 100;
         */
        dot(vector: Vec2): number;
        /**
         * !#en Cross product
         * !#zh 当前向量与指定向量进行叉乘。
         * @param [vector]
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * v.cross(cc.v2(5, 5)); // return 0;
         */
        cross(vector: Vec2): number;
        /**
         * !#en Returns the length of this vector.
         * !#zh 返回该向量的长度。
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * v.mag(); // return 14.142135623730951;
         */
        mag(): number;
        /**
         * !#en Returns the squared length of this vector.
         * !#zh 返回该向量的长度平方。
         * @return the result
         * @example
         * var v = cc.v2(10, 10);
         * v.magSqr(); // return 200;
         */
        magSqr(): number;
        /**
         * !#en Make the length of this vector to 1.
         * !#zh 向量归一化，让这个向量的长度为 1。
         * @return returns this
         * @chainable
         * @example
         * var v = cc.v2(10, 10);
         * v.normalizeSelf(); // return Vec2 {x: 0.7071067811865475, y: 0.7071067811865475};
         */
        normalizeSelf(): this;
        /**
         * !#en
         * Returns this vector with a magnitude of 1.<br/>
         * <br/>
         * Note that the current vector is unchanged and a new normalized vector is returned.
         * If you want to normalize the current vector, use normalizeSelf function.
         * !#zh
         * 返回归一化后的向量。<br/>
         * <br/>
         * 注意，当前向量不变，并返回一个新的归一化向量。如果你想来归一化当前向量，可使用 normalizeSelf 函数。
         * @param [out] - optional, the receiving vector, you can pass the same vec2
         * to save result to itself, if not provided, a new vec2 will be created
         * @return result
         * var v = cc.v2(10, 10);
         * v.normalize();   // return Vec2 {x: 0.7071067811865475, y: 0.7071067811865475};
         */
        normalize(out?: Vec2): Vec2;
        /**
         * !#en Get angle in radian between this and vector.
         * !#zh 夹角的弧度。
         * @param vector
         * @return from 0 to Math.PI
         */
        angle(vector: Vec2): number;
        /**
         * !#en Get angle in radian between this and vector with direction.
         * !#zh 带方向的夹角的弧度。
         * @param vector
         * @return from -MathPI to Math.PI
         */
        signAngle(vector: Vec2): number;
        /**
         * !#en rotate
         * !#zh 返回旋转给定弧度后的新向量。
         * @param radians
         * @param [out] - optional, the receiving vector, you can pass the same vec2 to
         * save result to itself, if not provided, a new vec2 will be created
         * @return the result
         */
        rotate(radians: number, out?: Vec2): Vec2;
        /**
         * !#en rotate self
         * !#zh 按指定弧度旋转向量。
         * @param radians
         * @return returns this
         * @chainable
         */
        rotateSelf(radians: number): this;
        /**
         * !#en Calculates the projection of the current vector over the given vector.
         * !#zh 返回当前向量在指定 vector 向量上的投影向量。
         * @param vector
         * @return
         * @example
         * var v1 = cc.v2(20, 20);
         * var v2 = cc.v2(5, 5);
         * v1.project(v2); // Vec2 {x: 20, y: 20};
         */
        project(vector: Vec2): Vec2;
        /**
         * Transforms the vec2 with a mat4. 3rd vector component is implicitly '0', 4th vector component is implicitly '1'
         * @param m matrix to transform with
         * @param [out] the receiving vector, you can pass the same vec2
         * to save result to itself, if not provided, a new vec2 will be created
         * @returns out
         */
        transformMat4(m: Mat4, out?: Vec2): void;
        /**
         * !#en return a Vec2 object with x = 1 and y = 1.
         * !#zh 新 Vec2 对象。
         */
        static readonly ONE: Vec2;
        /**
         * !#en return a Vec2 object with x = 0 and y = 0.
         * !#zh 返回 x = 0 和 y = 0 的 Vec2 对象。
         */
        static readonly ZERO: Vec2;
        /**
         * !#en return a Vec2 object with x = 0 and y = 1.
         * !#zh 返回 x = 0 和 y = 1 的 Vec2 对象。
         */
        static readonly UP: Vec2;
        /**
         * !#en return a Vec2 object with x = 1 and y = 0.
         * !#zh 返回 x = 1 和 y = 0 的 Vec2 对象。
         */
        static readonly RIGHT: Vec2;
    }
    /**
     * !#en The convenience method to create a new {{#crossLink "Vec2"}}cc.Vec2{{/crossLink}}.
     * !#zh 通过该简便的函数进行创建 {{#crossLink "Vec2"}}cc.Vec2{{/crossLink}} 对象。
     * @param v
     * @return
     * @example
     * var v1 = cc.v2(0, 0);
     * var v2 = cc.v2(v1);
     */
    export function v2(v: Vec2): Vec2;
    /**
     * !#en The convenience method to create a new {{#crossLink "Vec2"}}cc.Vec2{{/crossLink}}.
     * !#zh 通过该简便的函数进行创建 {{#crossLink "Vec2"}}cc.Vec2{{/crossLink}} 对象。
     * @param [x=0]
     * @param [y=0]
     * @return
     * @example
     * var v1 = cc.v2();
     * var v2 = cc.v2(0, 0);
     */
    export function v2(x?: number, y?: number): Vec2;
}
declare module "cocos/core/value-types/vec4" {
    import Mat4 from "cocos/core/value-types/mat4";
    import { ValueType } from "cocos/core/value-types/value-type";
    /**
     * !#en Representation of 3D vectors and points.
     * !#zh 表示 3D 向量和坐标
     *
     * @class Vec4
     * @extends ValueType
     */
    export default class Vec4 extends ValueType {
        x: number;
        y: number;
        z: number;
        w: number;
        /**
         * !#en
         * Constructor
         * see {{#crossLink "cc/vec4:method"}}cc.v4{{/crossLink}}
         * !#zh
         * 构造函数，可查看 {{#crossLink "cc/vec4:method"}}cc.v4{{/crossLink}}
         *
         * @param v
         */
        constructor(v: Vec4);
        /**
         * !#en
         * Constructor
         * see {{#crossLink "cc/vec4:method"}}cc.v4{{/crossLink}}
         * !#zh
         * 构造函数，可查看 {{#crossLink "cc/vec4:method"}}cc.v4{{/crossLink}}
         *
         * @param [x=0]
         * @param [y=0]
         * @param [z=0]
         * @param [w=0]
         */
        constructor(x?: number, y?: number, z?: number, w?: number);
        /**
         * !#en clone a Vec4 value
         * !#zh 克隆一个 Vec4 值
         *
         * @return
         */
        clone(): Vec4;
        /**
         * !#en Set the current vector value with the given vector.
         * !#zh 用另一个向量设置当前的向量对象值。
         *
         * @param newValue - !#en new value to set. !#zh 要设置的新值
         * @return returns this
         * @chainable
         */
        set(newValue: Vec4): this;
        /**
         * !#en Check whether the vector equals another one
         * !#zh 当前的向量是否与指定的向量相等。
         *
         * @param other
         * @return
         */
        equals(other: Vec4): boolean;
        /**
         * !#en Check whether two vector equal with some degree of variance.
         * !#zh
         * 近似判断两个点是否相等。<br/>
         * 判断 2 个向量是否在指定数值的范围之内，如果在则返回 true，反之则返回 false。
         *
         * @param other
         * @param variance
         * @return
         */
        fuzzyEquals(other: Vec4, variance: number): boolean;
        /**
         * !#en Transform to string with vector informations
         * !#zh 转换为方便阅读的字符串。
         *
         * @return
         */
        toString(): string;
        /**
         * !#en Calculate linear interpolation result between this vector and another one with given ratio
         * !#zh 线性插值。
         *
         * @param to
         * @param ratio - the interpolation coefficient
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return
         */
        lerp(to: Vec4, ratio: number, out?: Vec4): Vec4;
        /**
         * !#en Clamp the vector between from float and to float.
         * !#zh
         * 返回指定限制区域后的向量。<br/>
         * 向量大于 max_inclusive 则返回 max_inclusive。<br/>
         * 向量小于 min_inclusive 则返回 min_inclusive。<br/>
         * 否则返回自身。
         *
         * @param min_inclusive
         * @param max_inclusive
         * @return
         */
        clampf(min_inclusive: Vec4, max_inclusive: Vec4): this;
        /**
         * !#en Adds this vector. If you want to save result to another vector, use add() instead.
         * !#zh 向量加法。如果你想保存结果到另一个向量，使用 add() 代替。
         *
         * @param vector
         * @return returns this
         * @chainable
         */
        addSelf(vector: Vec4): this;
        /**
         * !#en Adds two vectors, and returns the new result.
         * !#zh 向量加法，并返回新结果。
         *
         * @param vector
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        add(vector: Vec4, out?: Vec4): Vec4;
        /**
         * !#en Subtracts one vector from this. If you want to save result to another vector, use sub() instead.
         * !#zh 向量减法。如果你想保存结果到另一个向量，可使用 sub() 代替。
         *
         * @param vector
         * @return returns this
         * @chainable
         */
        subSelf(vector: Vec4): this;
        /**
         * !#en Subtracts one vector from this, and returns the new result.
         * !#zh 向量减法，并返回新结果。
         *
         * @param vector
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        sub(vector: Vec4, out?: Vec4): Vec4;
        /**
         * !#en Multiplies this by a number. If you want to save result to another vector, use mul() instead.
         * !#zh 缩放当前向量。如果你想结果保存到另一个向量，可使用 mul() 代替。
         *
         * @param num
         * @return returns this
         * @chainable
         */
        mulSelf(num: number): this;
        /**
         * !#en Multiplies by a number, and returns the new result.
         * !#zh 缩放向量，并返回新结果。
         *
         * @param num
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        mul(num: number, out?: Vec4): Vec4;
        /**
         * !#en Multiplies two vectors.
         * !#zh 分量相乘。
         *
         * @param vector
         * @return returns this
         * @chainable
         */
        scaleSelf(vector: Vec4): this;
        /**
         * !#en Multiplies two vectors, and returns the new result.
         * !#zh 分量相乘，并返回新的结果。
         *
         * @param vector
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        scale(vector: Vec4, out?: Vec4): Vec4;
        /**
         * !#en Divides by a number. If you want to save result to another vector, use div() instead.
         * !#zh 向量除法。如果你想结果保存到另一个向量，可使用 div() 代替。
         *
         * @param vector
         * @return returns this
         * @chainable
         */
        divSelf(num: number): this;
        /**
         * !#en Divides by a number, and returns the new result.
         * !#zh 向量除法，并返回新的结果。
         *
         * @param vector
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        div(num: number, out?: Vec4): Vec4;
        /**
         * !#en Negates the components. If you want to save result to another vector, use neg() instead.
         * !#zh 向量取反。如果你想结果保存到另一个向量，可使用 neg() 代替。
         *
         * @return returns this
         * @chainable
         */
        negSelf(): this;
        /**
         * !#en Negates the components, and returns the new result.
         * !#zh 返回取反后的新向量。
         *
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return the result
         */
        neg(out?: Vec4): Vec4;
        /**
         * !#en Dot product
         * !#zh 当前向量与指定向量进行点乘。
         *
         * @param [vector]
         * @return the result
         */
        dot(vector: Vec4): number;
        /**
         * !#en Cross product
         * !#zh 当前向量与指定向量进行叉乘。
         *
         * @param vector
         * @param [out]
         * @return the result
         */
        cross(vector: Vec4, out?: Vec4): Vec4;
        /**
         * !#en Returns the length of this vector.
         * !#zh 返回该向量的长度。
         *
         * @return the result
         * @example
         * var v = cc.v4(10, 10);
         * v.mag(); // return 14.142135623730951;
         */
        mag(): number;
        /**
         * !#en Returns the squared length of this vector.
         * !#zh 返回该向量的长度平方。
         *
         * @return the result
         */
        magSqr(): number;
        /**
         * !#en Make the length of this vector to 1.
         * !#zh 向量归一化，让这个向量的长度为 1。
         *
         * @return returns this
         * @chainable
         */
        normalizeSelf(): this;
        /**
         * !#en
         * Returns this vector with a magnitude of 1.<br/>
         * <br/>
         * Note that the current vector is unchanged and a new normalized vector is returned.
         * If you want to normalize the current vector, use normalizeSelf function.
         * !#zh
         * 返回归一化后的向量。<br/>
         * <br/>
         * 注意，当前向量不变，并返回一个新的归一化向量。如果你想来归一化当前向量，可使用 normalizeSelf 函数。
         *
         * @param [out] - The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return result
         */
        normalize(out?: Vec4): Vec4;
        /**
         * Transforms the vec4 with a mat4. 4th vector component is implicitly '1'
         *
         * @param m matrix to transform with
         * @param [out] The receiving vector, can be `this`; if absent, a new vector would be created.
         * @return out
         */
        transformMat4(m: Mat4, out?: Vec4): Vec4;
    }
    /**
     * !#en The convenience method to create a new {{#crossLink "Vec4"}}cc.Vec4{{/crossLink}}.
     * !#zh 通过该简便的函数进行创建 {{#crossLink "Vec4"}}cc.Vec4{{/crossLink}} 对象。
     * @param v
     * @return
     * @example
     * var v1 = cc.v4();
     * var v2 = cc.v4(0, 0, 0);
     * var v3 = cc.v4(v2);
     * var v4 = cc.v4({x: 100, y: 100, z: 0});
     */
    export function v4(v: Vec4): Vec4;
    /**
     * !#en The convenience method to create a new {{#crossLink "Vec4"}}cc.Vec4{{/crossLink}}.
     * !#zh 通过该简便的函数进行创建 {{#crossLink "Vec4"}}cc.Vec4{{/crossLink}} 对象。
     * @param [x=0]
     * @param [y=0]
     * @param [z=0]
     * @param [w=0]
     * @return
     * @example
     * var v1 = cc.v4();
     * var v2 = cc.v4(0, 0, 0);
     * var v3 = cc.v4(v2);
     * var v4 = cc.v4({x: 100, y: 100, z: 0});
     */
    export function v4(x?: number, y?: number, z?: number, w?: number): Vec4;
}
declare module "cocos/core/value-types/size" {
    import { ValueType } from "cocos/core/value-types/value-type";
    /**
     * !#en
     * cc.Size is the class for size object,<br/>
     * please do not use its constructor to create sizes,<br/>
     * use {{#crossLink "cc/size:method"}}{{/crossLink}} alias function instead.<br/>
     * It will be deprecated soon, please use cc.Vec2 instead.
     *
     * !#zh
     * cc.Size 是 size 对象的类。<br/>
     * 请不要使用它的构造函数创建的 size，<br/>
     * 使用 {{#crossLink "cc/size:method"}}{{/crossLink}} 别名函数。<br/>
     * 它不久将被取消，请使用cc.Vec2代替。
     *
     * @class Size
     */
    export default class Size extends ValueType {
        width: number;
        height: number;
        constructor(size: Size);
        constructor(width?: number, height?: number);
        /**
         * !#en return a Size object with width = 0 and height = 0.
         * !#zh 返回一个宽度为 0 和高度为 0 的 Size 对象。
         */
        static readonly ZERO: Size;
        /**
         * !#en Clone a new size object from this one.
         * !#zh 克隆 size 对象。
         * @example
         * var a = new cc.size(10, 10);
         * a.clone();// return Size {width: 0, height: 0};
         */
        clone(): Size;
        /**
         * !#en TODO
         * !#zh 当前 Size 对象是否等于指定 Size 对象。
         * @example
         * var a = new cc.size(10, 10);
         * a.equals(new cc.size(10, 10));// return true;
         */
        equals(other: Size): boolean;
        /**
         * !#en TODO
         * !#zh 线性插值。
         * @param to
         * @param ratio - the interpolation coefficient.
         * @param out - optional, the receiving vector.
         * @example
         * var a = new cc.size(10, 10);
         * var b = new cc.rect(50, 50, 100, 100);
         * update (dt) {
         *    // method 1;
         *    var c = a.lerp(b, dt * 0.1);
         *    // method 2;
         *    a.lerp(b, dt * 0.1, c);
         * }
         */
        lerp(to: Size, ratio: number, out?: Size): Size;
        set(source: Size): void;
        /**
         * !#en TODO
         * !#zh 转换为方便阅读的字符串。
         * @example
         * var a = new cc.size(10, 10);
         * a.toString();// return "(10.00, 10.00)";
         */
        toString(): string;
    }
    /**
     * !#en
     * Helper function that creates a cc.Size.<br/>
     * Please use cc.p or cc.v2 instead, it will soon replace cc.Size.
     * !#zh
     * 创建一个 cc.Size 对象的帮助函数。<br/>
     * 注意：可以使用 cc.p 或者是 cc.v2 代替，它们将很快取代 cc.Size。
     *
     * @param size
     * @return
     * @example {@link utils/api/engine/docs/cocos2d/core/value-types/CCSize/size.js}
     */
    export function size(size: Size): Size;
    /**
     * !#en
     * Helper function that creates a cc.Size.<br/>
     * Please use cc.p or cc.v2 instead, it will soon replace cc.Size.
     * !#zh
     * 创建一个 cc.Size 对象的帮助函数。<br/>
     * 注意：可以使用 cc.p 或者是 cc.v2 代替，它们将很快取代 cc.Size。
     *
     * @param [w] - width
     * @param [h] - height
     * @return
     * @example {@link utils/api/engine/docs/cocos2d/core/value-types/CCSize/size.js}
     */
    export function size(width?: number, height?: number): Size;
}
declare module "cocos/core/value-types/rect" {
    import Mat4 from "cocos/core/value-types/mat4";
    import Size from "cocos/core/value-types/size";
    import { ValueType } from "cocos/core/value-types/value-type";
    import Vec2 from "cocos/core/value-types/vec2";
    /**
     * !#en A 2D rectangle defined by x, y position and width, height.
     * !#zh 通过位置和宽高定义的 2D 矩形。
     * @class Rect
     * @extends ValueType
     */
    export default class Rect extends ValueType {
        /**
         * !#en The minimum x value, equals to rect.x
         * !#zh 矩形 x 轴上的最小值，等价于 rect.x。
         */
        xMin: number;
        /**
         * !#en The minimum y value, equals to rect.y
         * !#zh 矩形 y 轴上的最小值。
         */
        yMin: number;
        /**
         * !#en The maximum x value.
         * !#zh 矩形 x 轴上的最大值。
         */
        xMax: number;
        /**
         * !#en The maximum y value.
         * !#zh 矩形 y 轴上的最大值。
         */
        yMax: number;
        /**
         * !#en The position of the center of the rectangle.
         * !#zh 矩形的中心点。
         */
        center: any;
        /**
         * !#en The X and Y position of the rectangle.
         * !#zh 矩形的 x 和 y 坐标。
         */
        origin: any;
        /**
         * !#en Width and height of the rectangle.
         * !#zh 矩形的大小。
         */
        size: Size;
        /**
         * !#en Creates a rectangle from two coordinate values.
         * !#zh 根据指定 2 个坐标创建出一个矩形区域。
         * @param v1
         * @param v2
         * @return
         * @example
         * cc.Rect.fromMinMax(cc.v2(10, 10), cc.v2(20, 20)); // Rect {x: 10, y: 10, width: 10, height: 10};
         */
        static fromMinMax(v1: Vec2, v2: Vec2): Rect;
        x: number;
        y: number;
        width: number;
        height: number;
        /**
         * !#en
         * Constructor of Rect class.
         * see {{#crossLink "cc/rect:method"}} cc.rect {{/crossLink}} for convenience method.
         * !#zh
         * Rect类的构造函数。可以通过 {{#crossLink "cc/rect:method"}} cc.rect {{/crossLink}} 简便方法进行创建。
         */
        constructor(rect: Rect);
        /**
         * !#en
         * Constructor of Rect class.
         * see {{#crossLink "cc/rect:method"}} cc.rect {{/crossLink}} for convenience method.
         * !#zh
         * Rect类的构造函数。可以通过 {{#crossLink "cc/rect:method"}} cc.rect {{/crossLink}} 简便方法进行创建。
         */
        constructor(x?: number, y?: number, width?: number, height?: number);
        /**
         * !#en TODO
         * !#zh 克隆一个新的 Rect。
         * @example
         * var a = new cc.Rect(0, 0, 10, 10);
         * a.clone();// Rect {x: 0, y: 0, width: 10, height: 10}
         */
        clone(): Rect;
        /**
         * !#en TODO
         * !#zh 是否等于指定的矩形。
         * @param other
         * @example
         * var a = new cc.Rect(0, 0, 10, 10);
         * var b = new cc.Rect(0, 0, 10, 10);
         * a.equals(b);// true;
         */
        equals(other: Rect): boolean;
        /**
         * !#en TODO
         * !#zh 线性插值
         *
         * @param to
         * @param ratio - the interpolation coefficient.
         * @param out - optional, the receiving vector.
         * @example
         * var a = new cc.Rect(0, 0, 10, 10);
         * var b = new cc.Rect(50, 50, 100, 100);
         * update (dt) {
         *    // method 1;
         *    var c = a.lerp(b, dt * 0.1);
         *    // method 2;
         *    a.lerp(b, dt * 0.1, c);
         * }
         */
        lerp(to: Rect, ratio: number, out?: Rect): Rect;
        set(source: Rect): void;
        /**
         * !#en Check whether the current rectangle intersects with the given one
         * !#zh 当前矩形与指定矩形是否相交。
         *
         * @param other
         * @return
         * @example
         * var a = new cc.Rect(0, 0, 10, 10);
         * var b = new cc.Rect(0, 0, 20, 20);
         * a.intersects(b);// true
         */
        intersects(other: Rect): boolean;
        /**
         * !#en Returns the overlapping portion of 2 rectangles.
         * !#zh 返回 2 个矩形重叠的部分。
         *
         * @param out Stores the result
         * @param rectB
         * @return Returns the out parameter
         * @example
         * var a = new cc.Rect(0, 10, 20, 20);
         * var b = new cc.Rect(0, 10, 10, 10);
         * var intersection = new cc.Rect();
         * a.intersection(intersection, b); // intersection {x: 0, y: 10, width: 10, height: 10};
         */
        intersection(out: Rect, rectB: Rect): Rect;
        /**
         * !#en Check whether the current rect contains the given point
         * !#zh 当前矩形是否包含指定坐标点。
         * Returns true if the point inside this rectangle.
         * @param point
         * @example
         * var a = new cc.Rect(0, 0, 10, 10);
         * var b = new cc.Vec2(0, 5);
         * a.contains(b);// true
         */
        contains(point: Vec2): boolean;
        /**
         * !#en Returns true if the other rect totally inside this rectangle.
         * !#zh 当前矩形是否包含指定矩形。
         * @param other
         * @example
         * var a = new cc.Rect(0, 0, 20, 20);
         * var b = new cc.Rect(0, 0, 10, 10);
         * a.containsRect(b);// true
         */
        containsRect(other: Rect): boolean;
        /**
         * !#en Returns the smallest rectangle that contains the current rect and the given rect.
         * !#zh 返回一个包含当前矩形和指定矩形的最小矩形。
         * @param out Stores the result
         * @param rectB
         * @return Returns the out parameter
         * @example
         * var a = new cc.Rect(0, 10, 20, 20);
         * var b = new cc.Rect(0, 10, 10, 10);
         * var union = new cc.Rect();
         * a.union(union, b); // union {x: 0, y: 10, width: 20, height: 20};
         */
        union(out: Rect, rectB: Rect): Rect;
        /**
         * !#en Apply matrix4 to the rect.
         * !#zh 使用 mat4 对矩形进行矩阵转换。
         * @param out The output rect
         * @param mat The matrix4
         */
        transformMat4(out: Rect, mat: Mat4): Rect;
        /**
         * !#en Output rect informations to string
         * !#zh 转换为方便阅读的字符串
         * @example
         * var a = new cc.Rect(0, 0, 10, 10);
         * a.toString();// "(0.00, 0.00, 10.00, 10.00)";
         */
        toString(): string;
    }
    /**
     * !#en
     * The convenience method to create a new Rect.
     * see {{#crossLink "Rect/Rect:method"}}cc.Rect{{/crossLink}}
     * !#zh
     * 该方法用来快速创建一个新的矩形。{{#crossLink "Rect/Rect:method"}}cc.Rect{{/crossLink}}
     * @param rect
     * @example
     * var a = cc.rect(new Rect(0, 0, 10, 0));
     */
    export function rect(rect: Rect): Rect;
    /**
     * !#en
     * The convenience method to create a new Rect.
     * see {{#crossLink "Rect/Rect:method"}}cc.Rect{{/crossLink}}
     * !#zh
     * 该方法用来快速创建一个新的矩形。{{#crossLink "Rect/Rect:method"}}cc.Rect{{/crossLink}}
     * @param rect
     * @param x
     * @param y
     * @param width
     * @param height
     * @example
     * var a = cc.rect(0, 0, 10, 0);
     */
    export function rect(x?: number, y?: number, width?: number, height?: number): Rect;
}
declare module "cocos/core/value-types/affine-transform" {
    import Mat4 from "cocos/core/value-types/mat4";
    import Rect from "cocos/core/value-types/rect";
    import Size from "cocos/core/value-types/size";
    import Vec2 from "cocos/core/value-types/vec2";
    /****************************************************************************
     Copyright (c) 2008-2010 Ricardo Quesada
     Copyright (c) 2011-2012 cocos2d-x.org
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    /**
     * !#en
     * AffineTransform class represent an affine transform matrix. It's composed basically by translation, rotation, scale transformations.<br/>
     * !#zh
     * AffineTransform 类代表一个仿射变换矩阵。它基本上是由平移旋转，缩放转变所组成。<br/>
     */
    export default class AffineTransform {
        /**
         * !#en Create a AffineTransform object with all contents in the matrix.
         * !#zh 用在矩阵中的所有内容创建一个 AffineTransform 对象。
         */
        static create(a: number, b: number, c: number, d: number, tx: number, ty: number): AffineTransform;
        /**
         * !#en
         * Create a identity transformation matrix: <br/>
         * [ 1, 0, 0, <br/>
         *   0, 1, 0 ]
         * !#zh
         * 单位矩阵：<br/>
         * [ 1, 0, 0, <br/>
         *   0, 1, 0 ]
         */
        static identity(): AffineTransform;
        /**
         * !#en Clone a AffineTransform object from the specified transform.
         * !#zh 克隆指定的 AffineTransform 对象。
         */
        static clone(t: AffineTransform): AffineTransform;
        /**
         * !#en
         * Concatenate a transform matrix to another
         * The results are reflected in the out affine transform
         * out = t1 * t2
         * This function is memory free, you should create the output affine transform by yourself and manage its memory.
         * !#zh
         * 拼接两个矩阵，将结果保存到 out 矩阵。这个函数不创建任何内存，你需要先创建 AffineTransform 对象用来存储结果，并作为第一个参数传入函数。
         * out = t1 * t2
         * @param out Out object to store the concat result
         * @param t1 The first transform object.
         * @param t2 The transform object to concatenate.
         * @return Out object with the result of concatenation.
         */
        static concat(out: AffineTransform, t1: AffineTransform, t2: AffineTransform): AffineTransform;
        /**
         * !#en Get the invert transform of an AffineTransform object.
         * This function is memory free, you should create the output affine transform by yourself and manage its memory.
         * !#zh 求逆矩阵。这个函数不创建任何内存，你需要先创建 AffineTransform 对象用来存储结果，并作为第一个参数传入函数。
         * @return Out object with inverted result.
         */
        static invert(out: AffineTransform, t: AffineTransform): AffineTransform;
        /**
         * !#en Get an AffineTransform object from a given matrix 4x4.
         * This function is memory free, you should create the output affine transform by yourself and manage its memory.
         * !#zh 从一个 4x4 Matrix 获取 AffineTransform 对象。这个函数不创建任何内存，你需要先创建 AffineTransform 对象用来存储结果，并作为第一个参数传入函数。
         * @return Out object with inverted result.
         */
        static fromMat4(out: AffineTransform, mat: Mat4): AffineTransform;
        /**
         * !#en Apply the affine transformation on a point.
         * This function is memory free, you should create the output Vec2 by yourself and manage its memory.
         * !#zh 对一个点应用矩阵变换。这个函数不创建任何内存，你需要先创建一个 Vec2 对象用来存储结果，并作为第一个参数传入函数。
         * @param out The output point to store the result
         * @param point Point to apply transform.
         * @param t Transform matrix.
         */
        static transformVec2(out: Vec2, point: Vec2, t: AffineTransform): Vec2;
        /**
         * !#en Apply the affine transformation on a point.
         * This function is memory free, you should create the output Vec2 by yourself and manage its memory.
         * !#zh 对一个点应用矩阵变换。这个函数不创建任何内存，你需要先创建一个 Vec2 对象用来存储结果，并作为第一个参数传入函数。
         * @param out The output point to store the result
         * @param x The x.
         * @param y The y.
         * @param t Transform matrix.
         */
        static transformVec2(out: Vec2, x: number, y: number, t: AffineTransform): Vec2;
        /**
         * !#en Apply the affine transformation on a size.
         * This function is memory free, you should create the output Size by yourself and manage its memory.
         * !#zh 应用仿射变换矩阵到 Size 上。这个函数不创建任何内存，你需要先创建一个 Size 对象用来存储结果，并作为第一个参数传入函数。
         * @param out The output point to store the result
         */
        static transformSize(out: Size, size: Size, t: AffineTransform): Size;
        /**
         * !#en Apply the affine transformation on a rect.
         * This function is memory free, you should create the output Rect by yourself and manage its memory.
         * !#zh 应用仿射变换矩阵到 Rect 上。这个函数不创建任何内存，你需要先创建一个 Rect 对象用来存储结果，并作为第一个参数传入函数。
         */
        static transformRect(out: Rect, rect: Rect, t: AffineTransform): Rect;
        /**
         * !#en Apply the affine transformation on a rect, and truns to an Oriented Bounding Box.
         * This function is memory free, you should create the output vectors by yourself and manage their memory.
         * !#zh 应用仿射变换矩阵到 Rect 上, 并转换为有向包围盒。这个函数不创建任何内存，你需要先创建包围盒的四个 Vector 对象用来存储结果，并作为前四个参数传入函数。
         */
        static transformObb(out_bl: Vec2, out_tl: Vec2, out_tr: Vec2, out_br: Vec2, rect: Rect, anAffineTransform: AffineTransform): void;
        a: number;
        b: number;
        c: number;
        d: number;
        tx: number;
        ty: number;
        constructor(a?: number, b?: number, c?: number, d?: number, tx?: number, ty?: number);
    }
}
declare module "cocos/core/value-types/color" {
    import { ValueType } from "cocos/core/value-types/value-type";
    /**
     * !#en
     * Representation of RGBA colors.
     *
     * Each color component is a floating point value with a range from 0 to 255.
     *
     * You can also use the convenience method {{#crossLink "cc/color:method"}}cc.color{{/crossLink}} to create a new Color.
     *
     * !#zh
     * cc.Color 用于表示颜色。
     *
     * 它包含 RGBA 四个以浮点数保存的颜色分量，每个的值都在 0 到 255 之间。
     *
     * 您也可以通过使用 {{#crossLink "cc/color:method"}}cc.color{{/crossLink}} 的便捷方法来创建一个新的 Color。
     *
     * @class Color
     * @extends ValueType
     */
    export default class Color extends ValueType {
        private _val;
        /**
         * @param other
         */
        constructor(other: Color);
        /**
         * @param [r=0] - red component of the color, default value is 0.
         * @param [g=0] - green component of the color, defualt value is 0.
         * @param [b=0] - blue component of the color, default value is 0.
         * @param [a=255] - alpha component of the color, default value is 255.
         */
        constructor(r?: number, g?: number, b?: number, a?: number);
        /**
         * !#en Solid white, RGBA is [255, 255, 255, 255].
         * !#zh 纯白色，RGBA 是 [255, 255, 255, 255]。
         */
        static readonly WHITE: Color;
        /**
         * !#en Solid black, RGBA is [0, 0, 0, 255].
         * !#zh 纯黑色，RGBA 是 [0, 0, 0, 255]。
         */
        static readonly BLACK: Color;
        /**
         * !#en Transparent, RGBA is [0, 0, 0, 0].
         * !#zh 透明，RGBA 是 [0, 0, 0, 0]。
         */
        static readonly TRANSPARENT: Color;
        /**
         * !#en Grey, RGBA is [127.5, 127.5, 127.5].
         * !#zh 灰色，RGBA 是 [127.5, 127.5, 127.5]。
         */
        static readonly GRAY: Color;
        /**
         * !#en Solid red, RGBA is [255, 0, 0].
         * !#zh 纯红色，RGBA 是 [255, 0, 0]。
         */
        static readonly RED: Color;
        /**
         * !#en Solid green, RGBA is [0, 255, 0].
         * !#zh 纯绿色，RGBA 是 [0, 255, 0]。
         */
        static readonly GREEN: Color;
        /**
         * !#en Solid blue, RGBA is [0, 0, 255].
         * !#zh 纯蓝色，RGBA 是 [0, 0, 255]。
         */
        static readonly BLUE: Color;
        /**
         * !#en Yellow, RGBA is [255, 235, 4].
         * !#zh 黄色，RGBA 是 [255, 235, 4]。
         */
        static readonly YELLOW: Color;
        /**
         * !#en Orange, RGBA is [255, 127, 0].
         * !#zh 橙色，RGBA 是 [255, 127, 0]。
         */
        static readonly ORANGE: Color;
        /**
         * !#en Cyan, RGBA is [0, 255, 255].
         * !#zh 青色，RGBA 是 [0, 255, 255]。
         */
        static readonly CYAN: Color;
        /**
         * !#en Magenta, RGBA is [255, 0, 255].
         * !#zh 洋红色（品红色），RGBA 是 [255, 0, 255]。
         */
        static readonly MAGENTA: Color;
        /**
         * !#en red channel value
         * !#zh 红色通道值
         */
        r: number;
        /**
         * !#en green channel value
         * !#zh 绿色通道值
         */
        g: number;
        /**
         * !#en blue channel value
         * !#zh 蓝色通道值
         */
        b: number;
        /**
         * !#en alpha channel value
         * !#zh 透明度通道值
         */
        a: number;
        /**
         * !#en Clone a new color from the current color.
         * !#zh 克隆当前颜色。
         *
         * @return Newly created color.
         * @example
         * var color = new cc.Color();
         * var newColor = color.clone();// Color {r: 0, g: 0, b: 0, a: 255}
         */
        clone(): Color;
        /**
         * !#en TODO
         * !#zh 判断两个颜色是否相等。
         *
         * @param other
         * @return
         * @example
         * var color1 = cc.Color.WHITE;
         * var color2 = new cc.Color(255, 255, 255);
         * cc.log(color1.equals(color2)); // true;
         * color2 = cc.Color.RED;
         * cc.log(color2.equals(color1)); // false;
         */
        equals(other: Color): boolean;
        /**
         * !#en TODO
         * !#zh 线性插值
         *
         * @param to
         * @param ratio - the interpolation coefficient.
         * @param [out] - optional, the receiving vector.
         * @return
         * @example {@link utils/api/engine/docs/cocos2d/core/value-types/CCColor/lerp.js}
         */
        lerp(to: Color, ratio: number, out?: Color): Color;
        /**
         * !#en TODO
         * !#zh 转换为方便阅读的字符串。
         *
         * @return
         * @example
         * var color = cc.Color.WHITE;
         * color.toString(); // "rgba(255, 255, 255, 255)"
         */
        toString(): string;
        /**
         * !#en Convert color to css format.
         * !#zh 转换为 CSS 格式。
         *
         * @param opt - "rgba", "rgb", "#rgb" or "#rrggbb".
         * @return
         * @example {@link utils/api/engine/docs/cocos2d/core/value-types/CCColor/toCSS.js}
         */
        toCSS(opt: 'rgba' | 'rgb' | '#rgb' | '#rrggbb'): string;
        /**
         * !#en Read hex string and store color data into the current color object,
         * the hex string must be formated as rgba or rgb.
         * !#zh 读取 16 进制颜色。
         *
         * @param hexString
         * @return
         * @chainable
         * @example
         * var color = cc.Color.BLACK;
         * color.fromHEX("#FFFF33"); // Color {r: 255, g: 255, b: 51, a: 255};
         */
        fromHEX(hexString: string): this;
        /**
         * !#en convert Color to HEX color string.
         * e.g.  cc.color(255,6,255)  to : "#ff06ff"
         * !#zh 转换为 16 进制。
         *
         * @param fmt - "#rgb", "#rrggbb" or "#rrggbbaa".
         * @return
         * @example
         * var color = cc.Color.BLACK;
         * color.toHEX("#rgb");     // "000";
         * color.toHEX("#rrggbb");  // "000000";
         */
        toHEX(fmt: '#rgb' | '#rrggbb' | '#rrggbbaa'): string;
        /**
         * !#en Convert to 24bit rgb value.
         * !#zh 转换为 24bit 的 RGB 值。
         *
         * @return
         * @example
         * var color = cc.Color.YELLOW;
         * color.toRGBValue(); // 16771844;
         */
        toRGBValue(): number;
        /**
         * !#en Read HSV model color and convert to RGB color
         * !#zh 读取 HSV（色彩模型）格式。
         *
         * @param h
         * @param s
         * @param v
         * @return
         * @chainable
         * @example
         * var color = cc.Color.YELLOW;
         * color.fromHSV(0, 0, 1); // Color {r: 255, g: 255, b: 255, a: 255};
         */
        fromHSV(h: number, s: number, v: number): this;
        /**
         * !#en Transform to HSV model color
         * !#zh 转换为 HSV（色彩模型）格式。
         *
         * @return - {h: number, s: number, v: number}.
         * @example
         * var color = cc.Color.YELLOW;
         * color.toHSV(); // Object {h: 0.1533864541832669, s: 0.9843137254901961, v: 1};
         */
        toHSV(): {
            h: number;
            s: number;
            v: number;
        };
        set(c: Color): void;
        mulSelf(c: Color): this;
        mul(c: Color, out?: Color): Color;
        x: number;
        y: number;
        z: number;
        w: number;
    }
    /**
     * !#en
     * The convenience method to create a new {{#crossLink "Color/Color:method"}}cc.Color{{/crossLink}}
     * Alpha channel is optional. Default value is 255.
     *
     * !#zh
     * 通过该方法来创建一个新的 {{#crossLink "Color/Color:method"}}cc.Color{{/crossLink}} 对象。
     * Alpha 通道是可选的。默认值是 255。
     *
     *
     * @param other
     * @return
     * @example {@link utils/api/engine/docs/cocos2d/core/value-types/CCColor/color.js}
     */
    export function color(other: Color | string): Color;
    /**
     * !#en
     * The convenience method to create a new {{#crossLink "Color/Color:method"}}cc.Color{{/crossLink}}
     * Alpha channel is optional. Default value is 255.
     *
     * !#zh
     * 通过该方法来创建一个新的 {{#crossLink "Color/Color:method"}}cc.Color{{/crossLink}} 对象。
     * Alpha 通道是可选的。默认值是 255。
     *
     *
     * @param [r=0]
     * @param [g=0]
     * @param [b=0]
     * @param [a=255]
     * @return
     * @example {@link utils/api/engine/docs/cocos2d/core/value-types/CCColor/color.js}
     */
    export function color(r?: number, g?: number, b?: number, a?: number): Color;
}
declare module "cocos/core/value-types/index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export { default as Enum } from "cocos/core/value-types/enum";
    export { ValueType } from "cocos/core/value-types/value-type";
    export { default as Vec2 } from "cocos/core/value-types/vec2";
    export { default as Vec3 } from "cocos/core/value-types/vec3";
    export { default as Vec4 } from "cocos/core/value-types/vec4";
    export { default as Quat } from "cocos/core/value-types/quat";
    export { default as Mat4 } from "cocos/core/value-types/mat4";
    export { default as AffineTransform } from "cocos/core/value-types/affine-transform";
    export { default as Size } from "cocos/core/value-types/size";
    export { default as Rect } from "cocos/core/value-types/rect";
    export { default as Color } from "cocos/core/value-types/color";
}
declare module "cocos/core/data/class-decorator" {
    import "cocos/core/data/class";
    import { IExposedAttributes } from "cocos/core/data/utils/attibute-defines";
    /**
     * !#en
     * Declare the standard [ES6 Class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)
     * as CCClass, please see [Class](/docs/editors_and_tools/creator-chapters/scripting/class/) for details.
     * !#zh
     * 将标准写法的 [ES6 Class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) 声明为 CCClass，具体用法请参阅[类型定义](/docs/creator/scripting/class/)。
     *
     * @method ccclass
     * @param {String} [name] - The class name used for serialization.
     * @example
     * const {ccclass} = cc._decorator;
     *
     * // define a CCClass, omit the name
     * &#64;ccclass
     * class NewScript extends cc.Component {
     *     // ...
     * }
     *
     * // define a CCClass with a name
     * &#64;ccclass('LoginData')
     * class LoginData {
     *     // ...
     * }
     * @typescript
     * ccclass(name?: string): Function
     * ccclass(_class?: Function): void
     */
    export const ccclass: (target: any) => any;
    export type SimplePropertyType = Function | string;
    export type PropertyType = SimplePropertyType | SimplePropertyType[];
    /**
     * cc 属性选项。
     */
    export interface IPropertyOptions extends IExposedAttributes {
    }
    /**
     * 标注属性为 cc 属性。
     * @param options 选项。
     */
    export function property(options?: IPropertyOptions): PropertyDecorator;
    /**
     * 标注属性为 cc 属性。
     * 等价于`@property({type})`。
     * @param type cc 属性的类型。
     */
    export function property(type: PropertyType): PropertyDecorator;
    /**
     * 标注属性为 cc 属性。
     * 等价于`@property()`。
     */
    export function property(target: Object, propertyKey: string | symbol): void;
    /**
     * !#en
     * Makes a CCClass that inherit from component execute in edit mode.<br>
     * By default, all components are only executed in play mode,
     * which means they will not have their callback functions executed while the Editor is in edit mode.
     * !#zh
     * 允许继承自 Component 的 CCClass 在编辑器里执行。<br>
     * 默认情况下，所有 Component 都只会在运行时才会执行，也就是说它们的生命周期回调不会在编辑器里触发。
     *
     * @method executeInEditMode
     * @example
     * const {ccclass, executeInEditMode} = cc._decorator;
     *
     * &#64;ccclass
     * &#64;executeInEditMode
     * class NewScript extends cc.Component {
     *     // ...
     * }
     * @typescript
     * executeInEditMode(): Function
     * executeInEditMode(_class: Function): void
     */
    export const executeInEditMode: any;
    /**
     * !#en
     * Automatically add required component as a dependency for the CCClass that inherit from component.
     * !#zh
     * 为声明为 CCClass 的组件添加依赖的其它组件。当组件添加到节点上时，如果依赖的组件不存在，引擎将会自动将依赖组件添加到同一个节点，防止脚本出错。该设置在运行时同样有效。
     *
     * @method requireComponent
     * @param {Component} requiredComponent
     * @example
     * const {ccclass, requireComponent} = cc._decorator;
     *
     * &#64;ccclass
     * &#64;requireComponent(cc.Sprite)
     * class SpriteCtrl extends cc.Component {
     *     // ...
     * }
     * @typescript
     * requireComponent(requiredComponent: typeof cc.Component): Function
     */
    export const requireComponent: any;
    /**
     * !#en
     * The menu path to register a component to the editors "Component" menu. Eg. "Rendering/CameraCtrl".
     * !#zh
     * 将当前组件添加到组件菜单中，方便用户查找。例如 "Rendering/CameraCtrl"。
     *
     * @method menu
     * @param {String} path - The path is the menu represented like a pathname.
     *                        For example the menu could be "Rendering/CameraCtrl".
     * @example
     * const {ccclass, menu} = cc._decorator;
     *
     * &#64;ccclass
     * &#64;menu("Rendering/CameraCtrl")
     * class NewScript extends cc.Component {
     *     // ...
     * }
     * @typescript
     * menu(path: string): Function
     */
    export const menu: any;
    /**
     * !#en
     * The execution order of lifecycle methods for Component.
     * Those less than 0 will execute before while those greater than 0 will execute after.
     * The order will only affect onLoad, onEnable, start, update and lateUpdate while onDisable and onDestroy will not be affected.
     * !#zh
     * 设置脚本生命周期方法调用的优先级。优先级小于 0 的组件将会优先执行，优先级大于 0 的组件将会延后执行。优先级仅会影响 onLoad, onEnable, start, update 和 lateUpdate，而 onDisable 和 onDestroy 不受影响。
     *
     * @method executionOrder
     * @param {Number} order - The execution order of lifecycle methods for Component. Those less than 0 will execute before while those greater than 0 will execute after.
     * @example
     * const {ccclass, executionOrder} = cc._decorator;
     *
     * &#64;ccclass
     * &#64;executionOrder(1)
     * class CameraCtrl extends cc.Component {
     *     // ...
     * }
     * @typescript
     * executionOrder(order: number): Function
     */
    export const executionOrder: any;
    /**
     * !#en
     * Prevents Component of the same type (or subtype) to be added more than once to a Node.
     * !#zh
     * 防止多个相同类型（或子类型）的组件被添加到同一个节点。
     *
     * @method disallowMultiple
     * @example
     * const {ccclass, disallowMultiple} = cc._decorator;
     *
     * &#64;ccclass
     * &#64;disallowMultiple
     * class CameraCtrl extends cc.Component {
     *     // ...
     * }
     * @typescript
     * disallowMultiple(): Function
     * disallowMultiple(_class: Function): void
     */
    export const disallowMultiple: any;
    /**
     * !#en
     * If specified, the editor's scene view will keep updating this node in 60 fps when it is selected, otherwise, it will update only if necessary.<br>
     * This property is only available if executeInEditMode is true.
     * !#zh
     * 当指定了 "executeInEditMode" 以后，playOnFocus 可以在选中当前组件所在的节点时，提高编辑器的场景刷新频率到 60 FPS，否则场景就只会在必要的时候进行重绘。
     *
     * @method playOnFocus
     * @example
     * const {ccclass, playOnFocus, executeInEditMode} = cc._decorator;
     *
     * &#64;ccclass
     * &#64;executeInEditMode
     * &#64;playOnFocus
     * class CameraCtrl extends cc.Component {
     *     // ...
     * }
     * @typescript
     * playOnFocus(): Function
     * playOnFocus(_class: Function): void
     */
    export const playOnFocus: any;
    /**
     * !#en
     * Specifying the url of the custom html to draw the component in **Properties**.
     * !#zh
     * 自定义当前组件在 **属性检查器** 中渲染时所用的网页 url。
     *
     * @method inspector
     * @param {String} url
     * @example
     * const {ccclass, inspector} = cc._decorator;
     *
     * &#64;ccclass
     * &#64;inspector("packages://inspector/inspectors/comps/camera-ctrl.js")
     * class NewScript extends cc.Component {
     *     // ...
     * }
     * @typescript
     * inspector(path: string): Function
     */
    export const inspector: any;
    /**
     * !#en
     * Specifying the url of the icon to display in the editor.
     * !#zh
     * 自定义当前组件在编辑器中显示的图标 url。
     *
     * @method icon
     * @param {String} url
     * @private
     * @example
     * const {ccclass, icon} = cc._decorator;
     *
     * &#64;ccclass
     * &#64;icon("xxxx.png")
     * class NewScript extends cc.Component {
     *     // ...
     * }
     * @typescript
     * icon(path: string): Function
     */
    export const icon: any;
    /**
     * !#en
     * The custom documentation URL.
     * !#zh
     * 指定当前组件的帮助文档的 url，设置过后，在 **属性检查器** 中就会出现一个帮助图标，用户点击将打开指定的网页。
     *
     * @method help
     * @param {String} url
     * @example
     * const {ccclass, help} = cc._decorator;
     *
     * &#64;ccclass
     * &#64;help("app://docs/html/components/spine.html")
     * class NewScript extends cc.Component {
     *     // ...
     * }
     * @typescript
     * help(path: string): Function
     */
    export const help: any;
    /**
     * NOTE:<br>
     * The old mixins implemented in cc.Class(ES5) behaves exact the same as multiple inheritance.
     * But since ES6, class constructor can't be function-called and class methods become non-enumerable,
     * so we can not mix in ES6 Classes.<br>
     * See:<br>
     * [https://esdiscuss.org/topic/traits-are-now-impossible-in-es6-until-es7-since-rev32](https://esdiscuss.org/topic/traits-are-now-impossible-in-es6-until-es7-since-rev32)<br>
     * One possible solution (but IDE unfriendly):<br>
     * [http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes](http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/)<br>
     * <br>
     * NOTE:<br>
     * You must manually call mixins constructor, this is different from cc.Class(ES5).
     *
     * @method mixins
     * @param {Function} ...ctor - constructors to mix, only support ES5 constructors or classes defined by using `cc.Class`,
     *                             not support ES6 Classes.
     * @example
     * const {ccclass, mixins} = cc._decorator;
     *
     * class Animal { ... }
     *
     * const Fly = cc.Class({
     *     constructor () { ... }
     * });
     *
     * &#64;ccclass
     * &#64;mixins(cc.EventTarget, Fly)
     * class Bird extends Animal {
     *     constructor () {
     *         super();
     *
     *         // You must manually call mixins constructor, this is different from cc.Class(ES5)
     *         cc.EventTarget.call(this);
     *         Fly.call(this);
     *     }
     *     // ...
     * }
     * @typescript
     * mixins(ctor: Function, ...rest: Function[]): Function
     */
    export function mixins(...constructors: Function[]): (ctor: any) => void;
}
declare module "cocos/core/event/event" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    /**
     * !#en Base class of all kinds of events.
     * !#zh 包含事件相关信息的对象。
     * @class Event
     */
    export default class Event {
        /**
         * !#en Code for event without type.
         * !#zh 没有类型的事件
         */
        static NO_TYPE: string;
        /**
         * !#en The type code of Touch event.
         * !#zh 触摸事件类型
         */
        static TOUCH: string;
        /**
         * !#en The type code of Mouse event.
         * !#zh 鼠标事件类型
         */
        static MOUSE: string;
        /**
         * !#en The type code of Keyboard event.
         * !#zh 键盘事件类型
         */
        static KEYBOARD: string;
        /**
         * !#en The type code of Acceleration event.
         * !#zh 加速器事件类型
         */
        static ACCELERATION: string;
        /**
         * !#en Events not currently dispatched are in this phase
         * !#zh 尚未派发事件阶段
         */
        static NONE: number;
        /**
         * !#en
         * The capturing phase comprises the journey from the root to the last node before the event target's node
         * see http://www.w3.org/TR/DOM-Level-3-Events/#event-flow
         * !#zh 捕获阶段，包括事件目标节点之前从根节点到最后一个节点的过程。
         */
        static CAPTURING_PHASE: number;
        /**
         * !#en
         * The target phase comprises only the event target node
         * see http://www.w3.org/TR/DOM-Level-3-Events/#event-flow
         * !#zh 目标阶段仅包括事件目标节点。
         */
        static AT_TARGET: number;
        /**
         * !#en
         * The bubbling phase comprises any subsequent nodes encountered on the return trip to the root of the hierarchy
         * see http://www.w3.org/TR/DOM-Level-3-Events/#event-flow
         * !#zh 冒泡阶段， 包括回程遇到到层次根节点的任何后续节点。
         */
        static BUBBLING_PHASE: number;
        /**
         * !#en The name of the event (case-sensitive), e.g. "click", "fire", or "submit".
         * !#zh 事件类型。
         */
        type: string;
        /**
         * !#en Indicate whether the event bubbles up through the tree or not.
         * !#zh 表示该事件是否进行冒泡。
         */
        bubbles: boolean;
        /**
         * !#en A reference to the target to which the event was originally dispatched.
         * !#zh 最初事件触发的目标
         */
        target: Object | null;
        /**
         * !#en A reference to the currently registered target for the event.
         * !#zh 当前目标
         */
        currentTarget: Object | null;
        /**
         * !#en
         * Indicates which phase of the event flow is currently being evaluated.
         * Returns an integer value represented by 4 constants:
         *  - Event.NONE = 0
         *  - Event.CAPTURING_PHASE = 1
         *  - Event.AT_TARGET = 2
         *  - Event.BUBBLING_PHASE = 3
         * The phases are explained in the [section 3.1, Event dispatch and DOM event flow]
         * (http://www.w3.org/TR/DOM-Level-3-Events/#event-flow), of the DOM Level 3 Events specification.
         * !#zh 事件阶段
         */
        eventPhase: number;
        /**
         * !#en Stops propagation for current event.
         * !#zh 停止传递当前事件。
         */
        propagationStopped: boolean;
        /**
         * !#en Stops propagation for current event immediately,
         * the event won't even be dispatched to the listeners attached in the current target.
         * !#zh 立即停止当前事件的传递，事件甚至不会被分派到所连接的当前目标。
         */
        propagationImmediateStopped: boolean;
        /**
         * @param type - The name of the event (case-sensitive), e.g. "click", "fire", or "submit"
         * @param bubbles - A boolean indicating whether the event bubbles up through the tree or not
         */
        constructor(type: string, bubbles?: boolean);
        /**
         * !#en Reset the event for being stored in the object pool.
         * !#zh 重置对象池中存储的事件。
         */
        unuse(): void;
        /**
         * !#en Reuse the event for being used again by the object pool.
         * !#zh 用于对象池再次使用的事件。
         */
        reuse(type: string, bubbles?: boolean): void;
        /**
         * !#en Checks whether the event has been stopped.
         * !#zh 检查该事件是否已经停止传递.
         */
        isStopped(): boolean;
        /**
         * !#en
         * <p>
         *     Gets current target of the event                                                            <br/>
         *     note: It only be available when the event listener is associated with node.                <br/>
         *          It returns 0 when the listener is associated with fixed priority.
         * </p>
         * !#zh 获取当前目标节点
         * @returns The target with which the event associates.
         */
        getCurrentTarget(): Object | null;
        /**
         * !#en Gets the event type.
         * !#zh 获取事件类型
         */
        getType(): string;
    }
}
declare module "cocos/core/event/index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export { default as Event } from "cocos/core/event/event";
    export { EventTarget } from "cocos/core/event/event-target";
}
declare module "cocos/3d/memop/pool" {
    export default class Pool<T> {
        private _fn;
        private _idx;
        private _frees;
        constructor(fn: () => T, size: number);
        alloc(): T;
        free(obj: T): void;
        clear(fn: (obj: T) => void): void;
        private _expand;
    }
}
declare module "cocos/core/event/callbacks-invoker" {
    class CallbackInfo {
        callback: Function;
        target: Object | undefined;
        once: boolean;
        set(callback: Function, target?: Object, once?: boolean): void;
    }
    export class CallbackList {
        callbackInfos: Array<CallbackInfo | null>;
        isInvoking: boolean;
        containCanceled: boolean;
        /**
         * @zh
         * 从列表中移除与指定目标相同回调函数的事件。
         * @param cb - 指定回调函数
         */
        removeByCallback(cb: Function): void;
        /**
         * @zh
         * 从列表中移除与指定目标相同调用者的事件。
         * @param target - 指定调用者
         */
        removeByTarget(target: Object): void;
        /**
         * @zh
         * 移除指定编号事件。
         *
         * @param index - 指定编号。
         */
        cancel(index: number): void;
        /**
         * @zh
         * 注销所有事件。
         */
        cancelAll(): void;
        purgeCanceled(): void;
        clear(): void;
    }
    export interface ICallbackTable {
        [x: string]: CallbackList | undefined;
    }
    /**
     * @zh
     * CallbacksInvoker 用来根据 Key 管理事件监听器列表并调用回调方法。
     * @class CallbacksInvoker
     */
    export class CallbacksInvoker {
        _callbackTable: ICallbackTable;
        /**
         * @zh
         * 事件添加管理
         * @param key - 一个监听事件类型的字符串。
         * @param callback - 事件分派时将被调用的回调函数。
         * @param arget - 调用回调的目标。可以为空。
         * @param once - 是否只调用一次。
         */
        on(key: string, callback: Function, target?: Object, once?: boolean): void;
        /**
         * @zh
         * 检查指定事件是否已注册回调。
         *
         * @param key - 一个监听事件类型的字符串。
         * @param callback - 事件分派时将被调用的回调函数。
         * @param target - 调用回调的目标。
         * @return - 指定事件是否已注册回调。
         */
        hasEventListener(key: string, callback?: Function, target?: Object | null): boolean;
        /**
         * @zh
         * 移除在特定事件类型中注册的所有回调或在某个目标中注册的所有回调。
         *
         * @param keyOrTarget - 要删除的事件键或要删除的目标。
         */
        removeAll(keyOrTarget?: string | Object): void;
        /**
         * @zh
         * 删除之前与同类型，回调，目标注册的回调。
         *
         * @param key - 一个监听事件类型的字符串。
         * @param callback - 移除指定注册回调。如果没有给，则删除全部同事件类型的监听。
         * @param target - 调用回调的目标。
         */
        off(key: string, callback?: Function, target?: Object): void;
        /**
         * @zh
         * 事件派发
         *
         * @param key - 一个监听事件类型的字符串
         * @param p1 - 派发的第一个参数。
         * @param p2 - 派发的第二个参数。
         * @param p3 - 派发的第三个参数。
         * @param p4 - 派发的第四个参数。
         * @param p5 - 派发的第五个参数。
         */
        emit(key: string, ...args: any[]): void;
    }
}
declare module "cocos/core/event/event-target" {
    import { CallbacksInvoker } from "cocos/core/event/callbacks-invoker";
    export interface ITargetImpl extends Object {
        __eventTargets?: Object[];
        node?: ITargetImpl;
    }
    /**
     * @zh
     * 事件目标是事件触发时，分派的事件对象，Node 是最常见的事件目标，
     * 但是其他对象也可以是事件目标。
     */
    export class EventTarget extends CallbacksInvoker {
        /**
         * @zh
         * 注册事件目标的特定事件类型回调。这种类型的事件应该被 `emit` 触发。
         *
         * @param type - 一个监听事件类型的字符串.
         * @param callback - 事件分派时将被调用的回调函数。如果该回调存在则不会重复添加.
         * @param callback.arg1 回调的第一个参数
         * @param callback.arg2 回调的第二个参数
         * @param callback.arg3 回调的第三个参数
         * @param callback.arg4 回调的第四个参数
         * @param callback.arg5 回调的第五个参数
         * @param target - 回调的目标。可以为空。
         * @return - 返回监听回调函数自身。
         *
         * @example
         * ```ts
         * eventTarget.on('fire', function () {
         *     cc.log("fire in the hole");
         * }, node);
         * ```
         */
        on(type: string, callback: Function, target?: Object): Function | undefined;
        /**
         * @zh
         * 删除之前用同类型，回调，目标或 useCapture 注册的事件监听器，如果只传递 type，将会删除 type 类型的所有事件监听器。
         *
         * @param type - 一个监听事件类型的字符串。
         * @param callback - 事件分派时将被调用的回调函数。
         * @param target - 调用回调的目标。如果为空, 只有没有目标的事件会被移除。
         *
         * @example
         * ```ts
         * // register fire eventListener
         * var callback = eventTarget.on('fire', function () {
         *     cc.log("fire in the hole");
         * }, target);
         * // remove fire event listener
         * eventTarget.off('fire', callback, target);
         * // remove all fire event listeners
         * eventTarget.off('fire');
         * ```
         */
        off(type: string, callback?: Function, target?: Object): void;
        /**
         * @zh
         * 在当前 EventTarget 上删除指定目标（target 参数）注册的所有事件监听器。
         * 这个函数无法删除当前 EventTarget 的所有事件监听器，也无法删除 target 参数所注册的所有事件监听器。
         * 这个函数只能删除 target 参数在当前 EventTarget 上注册的所有事件监听器。
         *
         * @param target - 注销所有指定目标的监听
         */
        targetOff(keyOrTarget?: string | Object): void;
        /**
         * @zh
         * 注册事件目标的特定事件类型回调，回调会在第一时间被触发后删除自身。
         *
         * @param type - 一个监听事件类型的字符串。
         * @param callback - 事件分派时将被调用的回调函数。如果该回调存在则不会重复添加。
         * @param callback.arg1 回调的第一个参数。
         * @param callback.arg2 第二个参数。
         * @param callback.arg3 第三个参数。
         * @param callback.arg4 第四个参数。
         * @param callback.arg5 第五个参数。
         * @param target - 调用回调的目标。可以为空。
         *
         * @example
         * ```ts
         * eventTarget.once('fire', function () {
         *     cc.log("this is the callback and will be invoked only once");
         * }, node);
         * ```
         */
        once(type: string, callback: Function, target?: Object): Function | undefined;
    }
}
declare module "cocos/core/platform/event-manager/event-listener" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Node } from "cocos/scene-graph/index";
    export interface IEventListenerCreateInfo {
        event?: number;
        [x: string]: any;
    }
    export interface ILinstenerMask {
        index: number;
        node: Node;
    }
    /**
     * !#en
     * <p>
     *     The base class of event listener.                                                                        <br/>
     *     If you need custom listener which with different callback, you need to inherit this class.               <br/>
     *     For instance, you could refer to EventListenerAcceleration, EventListenerKeyboard,                       <br/>
     *      EventListenerTouchOneByOne, EventListenerCustom.
     * </p>
     *
     * !#zh
     * 封装用户的事件处理逻辑。
     * 注意：这是一个抽象类，开发者不应该直接实例化这个类，请参考 {{#crossLink "EventListener/create:method"}}cc.EventListener.create{{/crossLink}}。
     */
    export class EventListener {
        readonly onEvent: ((...args: any[]) => any) | null;
        /**
         * !#en The type code of unknown event listener.
         * !#zh 未知的事件监听器类型
         */
        static UNKNOWN: number;
        static TOUCH_ONE_BY_ONE: number;
        static TOUCH_ALL_AT_ONCE: number;
        /**
         * !#en The type code of keyboard event listener.
         * !#zh 键盘事件监听器类型
         */
        static KEYBOARD: number;
        static MOUSE: number;
        /**
         * !#en The type code of acceleration event listener.
         * !#zh 加速器事件监听器类型
         */
        static ACCELERATION: number;
        static CUSTOM: number;
        static ListenerID: {
            MOUSE: string;
            TOUCH_ONE_BY_ONE: string;
            TOUCH_ALL_AT_ONCE: string;
            KEYBOARD: string;
            ACCELERATION: string;
        };
        /**
         * !#en
         * Create a EventListener object with configuration including the event type, handlers and other parameters.
         * In handlers, this refer to the event listener object itself.
         * You can also pass custom parameters in the configuration object,
         * all custom parameters will be polyfilled into the event listener object and can be accessed in handlers.
         * !#zh 通过指定不同的 Event 对象来设置想要创建的事件监听器。
         * @param {Object} argObj a json object
         * @example {@link cocos2d/core/event-manager/CCEventListener/create.js}
         */
        static create(argObj: IEventListenerCreateInfo): EventListener;
        owner: Object | null;
        mask: ILinstenerMask | null;
        _previousIn?: boolean;
        _target: any;
        protected _onEvent: ((...args: any[]) => any) | null;
        private _type;
        private _listenerID;
        private _registered;
        private _fixedPriority;
        private _node;
        private _paused;
        private _isEnabled;
        constructor(type: number, listenerID: string, callback: ((...args: any[]) => any) | null);
        /**
         * <p>
         *     Sets paused state for the listener
         *     The paused state is only used for scene graph priority listeners.
         *     `EventDispatcher::resumeAllEventListenersForTarget(node)` will set the paused state to `true`,
         *     while `EventDispatcher::pauseAllEventListenersForTarget(node)` will set it to `false`.
         *     @note 1) Fixed priority listeners will never get paused. If a fixed priority doesn't want to receive events,
         *              call `setEnabled(false)` instead.
         *            2) In `Node`'s onEnter and onExit, the `paused state` of the listeners
         *              which associated with that node will be automatically updated.
         * </p>
         * @private
         */
        _setPaused(paused: boolean): void;
        /**
         * Checks whether the listener is paused.
         * @private
         */
        _isPaused(): boolean;
        /**
         * Marks the listener was registered by EventDispatcher.
         * @private
         */
        _setRegistered(registered: boolean): void;
        /**
         * Checks whether the listener was registered by EventDispatcher
         * @private
         */
        _isRegistered(): boolean;
        /**
         * Gets the type of this listener
         * @note It's different from `EventType`, e.g.
         * TouchEvent has two kinds of event listeners - EventListenerOneByOne, EventListenerAllAtOnce
         * @private
         */
        _getType(): number;
        /**
         * Gets the listener ID of this listener
         * When event is being dispatched, listener ID is used as key for searching listeners according to event type.
         * @private
         */
        _getListenerID(): string;
        /**
         * Sets the fixed priority for this listener
         * @note This method is only used for `fixed priority listeners`,
         *   it needs to access a non-zero value. 0 is reserved for scene graph priority listeners
         * @private
         */
        _setFixedPriority(fixedPriority: number): void;
        /**
         * Gets the fixed priority of this listener
         * @return 0 if it's a scene graph priority listener, non-zero for fixed priority listener
         * @private
         */
        _getFixedPriority(): number;
        /**
         * Sets scene graph priority for this listener
         * @private
         * @param {Node} node
         */
        _setSceneGraphPriority(node: any): void;
        /**
         * Gets scene graph priority of this listener
         * @return if it's a fixed priority listener, non-null for scene graph priority listener
         * @private
         */
        _getSceneGraphPriority(): any;
        /**
         * !#en Checks whether the listener is available.
         * !#zh 检测监听器是否有效
         */
        checkAvailable(): boolean;
        /**
         * !#en Clones the listener, its subclasses have to override this method.
         * !#zh 克隆监听器,它的子类必须重写此方法。
         */
        clone(): EventListener | null;
        /**
         *  !#en Enables or disables the listener
         *  !#zh 启用或禁用监听器。
         *  @note Only listeners with `enabled` state will be able to receive events.
         *          When an listener was initialized, it's enabled by default.
         *          An event listener can receive events when it is enabled and is not paused.
         *          paused state is always false when it is a fixed priority listener.
         */
        setEnabled(enabled: boolean): void;
        /**
         * !#en Checks whether the listener is enabled
         * !#zh 检查监听器是否可用。
         */
        isEnabled(): boolean;
    }
    export class Mouse extends EventListener {
        onMouseDown: Function | null;
        onMouseUp: Function | null;
        onMouseMove: Function | null;
        onMouseScroll: Function | null;
        constructor();
        _callback(event: any): void;
        clone(): Mouse;
        checkAvailable(): boolean;
    }
    export class TouchOneByOne extends EventListener {
        swallowTouches: boolean;
        onTouchBegan: Function | null;
        onTouchMoved: Function | null;
        onTouchEnded: Function | null;
        onTouchCancelled: Function | null;
        private _claimedTouches;
        constructor();
        setSwallowTouches(needSwallow: any): void;
        isSwallowTouches(): boolean;
        clone(): TouchOneByOne;
        checkAvailable(): boolean;
    }
    export class TouchAllAtOnce extends EventListener {
        onTouchesBegan: Function | null;
        onTouchesMoved: Function | null;
        onTouchesEnded: Function | null;
        onTouchesCancelled: Function | null;
        constructor();
        clone(): TouchAllAtOnce;
        checkAvailable(): boolean;
    }
    export class Acceleration extends EventListener {
        _onAccelerationEvent: Function | null;
        constructor(callback: Function | null);
        _callback(event: any): void;
        checkAvailable(): boolean;
        clone(): Acceleration;
    }
    export class Keyboard extends EventListener {
        onKeyPressed: Function | null;
        onKeyReleased: Function | null;
        constructor();
        _callback(event: any): void;
        clone(): Keyboard;
        checkAvailable(): boolean;
    }
}
declare module "cocos/core/platform/event-manager/event-manager" {
    import { EventListener } from "cocos/core/platform/event-manager/event-listener";
    class EventManager {
        private _listenersMap;
        private _priorityDirtyFlagMap;
        private _nodeListenersMap;
        private _nodePriorityMap;
        private _globalZOrderNodeMap;
        private _toAddedListeners;
        private _toRemovedListeners;
        private _dirtyNodes;
        private _inDispatch;
        private _isEnabled;
        private _nodePriorityIndex;
        private _internalCustomListenerIDs;
        /**
         * !#en Pauses all listeners which are associated the specified target.
         * !#zh 暂停传入的 node 相关的所有监听器的事件响应。
         * @param {Node} node
         * @param [recursive=false]
         */
        pauseTarget(node: any, recursive?: boolean): void;
        /**
         * !#en Resumes all listeners which are associated the specified target.
         * !#zh 恢复传入的 node 相关的所有监听器的事件响应。
         * @param {Node} node
         * @param [recursive=false]
         */
        resumeTarget(node: any, recursive?: boolean): void;
        frameUpdateListeners(): void;
        /**
         * !#en Query whether the specified event listener id has been added.
         * !#zh 查询指定的事件 ID 是否存在
         * @param listenerID - The listener id.
         * @return true or false
         */
        hasEventListener(listenerID: string | number): boolean;
        /**
         * !#en
         * <p>
         * Adds a event listener for a specified event.<br/>
         * if the parameter "nodeOrPriority" is a node,
         * it means to add a event listener for a specified event with the priority of scene graph.<br/>
         * if the parameter "nodeOrPriority" is a Number,
         * it means to add a event listener for a specified event with the fixed priority.<br/>
         * </p>
         * !#zh
         * 将事件监听器添加到事件管理器中。<br/>
         * 如果参数 “nodeOrPriority” 是节点，优先级由 node 的渲染顺序决定，显示在上层的节点将优先收到事件。<br/>
         * 如果参数 “nodeOrPriority” 是数字，优先级则固定为该参数的数值，数字越小，优先级越高。<br/>
         *
         * @method addListener
         * @param listener - The listener of a specified event or a object of some event parameters.
         * @param nodeOrPriority - The priority of the listener is based on the draw order of this node or fixedPriority The fixed priority of the listener.
         * @note  The priority of scene graph will be fixed value 0. So the order of listener item in the vector will be ' <0, scene graph (0 priority), >0'.
         *         A lower priority will be called before the ones that have a higher value. 0 priority is forbidden for fixed priority since it's used for scene graph based priority.
         *         The listener must be a cc.EventListener object when adding a fixed priority listener, because we can't remove a fixed priority listener without the listener handler,
         *         except calls removeAllListeners().
         * @return {EventListener} Return the listener. Needed in order to remove the event from the dispatcher.
         */
        addListener(listener: EventListener, nodeOrPriority: any | number): any;
        /**
         * !#en Adds a Custom event listener. It will use a fixed priority of 1.
         * !#zh 向事件管理器添加一个自定义事件监听器。
         * @param eventName
         * @param callback
         * @return the generated event. Needed in order to remove the event from the dispatcher
         */
        addCustomListener(eventName: string, callback: Function): EventListener;
        /**
         * !#en Remove a listener.
         * !#zh 移除一个已添加的监听器。
         * @param listener - an event listener or a registered node target
         * @example {@link cocos2d/core/event-manager/CCEventManager/removeListener.js}
         */
        removeListener(listener: EventListener): void;
        /**
         * !#en Removes all listeners with the same event listener type or removes all listeners of a node.
         * !#zh
         * 移除注册到 eventManager 中指定类型的所有事件监听器。<br/>
         * 1. 如果传入的第一个参数类型是 Node，那么事件管理器将移除与该对象相关的所有事件监听器。
         * （如果第二参数 recursive 是 true 的话，就会连同该对象的子控件上所有的事件监听器也一并移除）<br/>
         * 2. 如果传入的第一个参数类型是 Number（该类型 EventListener 中定义的事件类型），
         * 那么事件管理器将移除该类型的所有事件监听器。<br/>
         *
         * 下列是目前存在监听器类型：       <br/>
         * cc.EventListener.UNKNOWN       <br/>
         * cc.EventListener.KEYBOARD      <br/>
         * cc.EventListener.ACCELERATION，<br/>
         *
         * @method removeListeners
         * @param {Number|Node} listenerType - listenerType or a node
         * @param [recursive=false]
         */
        removeListeners(listenerType: number | any, recursive?: boolean): void;
        removeCustomListeners(customEventName: any): void;
        /**
         * !#en Removes all listeners
         * !#zh 移除所有事件监听器。
         * @method removeAllListeners
         */
        removeAllListeners(): void;
        /**
         * !#en Sets listener's priority with fixed value.
         * !#zh 设置 FixedPriority 类型监听器的优先级。
         * @method setPriority
         * @param {EventListener} listener
         * @param {Number} fixedPriority
         */
        setPriority(listener: any, fixedPriority: any): void;
        /**
         * !#en Whether to enable dispatching events
         * !#zh 启用或禁用事件管理器，禁用后不会分发任何事件。
         * @method setEnabled
         * @param {Boolean} enabled
         */
        setEnabled(enabled: any): void;
        /**
         * !#en Checks whether dispatching events is enabled
         * !#zh 检测事件管理器是否启用。
         * @method isEnabled
         * @returns {Boolean}
         */
        isEnabled(): boolean;
        dispatchEvent(event: any): void;
        _onListenerCallback(listener: EventListener, event: any): any;
        dispatchCustomEvent(eventName: any, optionalUserData: any): void;
        private _setDirtyForNode;
        private _addListener;
        private _forceAddEventListener;
        private _getListeners;
        private _updateDirtyFlagForSceneGraph;
        private _removeAllListenersInVector;
        private _removeListenersForListenerID;
        private _sortEventListeners;
        private _sortListenersOfSceneGraphPriority;
        private _sortEventListenersOfSceneGraphPriorityDes;
        private _sortListenersOfFixedPriority;
        private _sortListenersOfFixedPriorityAsc;
        private _onUpdateListeners;
        private _updateTouchListeners;
        private _cleanToRemovedListeners;
        private _onTouchEventCallback;
        private _dispatchTouchEvent;
        private _onTouchesEventCallback;
        private _associateNodeAndEventListener;
        private _dissociateNodeAndEventListener;
        private _dispatchEventToListeners;
        private _setDirty;
        private _visitTarget;
        private _sortNumberAsc;
        private _removeListenerInCallback;
        private _removeListenerInVector;
    }
    /**
     * !#en
     * This class has been deprecated, please use cc.systemEvent or cc.EventTarget instead.
     * See [Listen to and launch events](../../../manual/en/scripting/events.md) for details.<br>
     * <br>
     * cc.eventManager is a singleton object which manages event listener subscriptions and event dispatching.
     * The EventListener list is managed in such way so that event listeners can be added and removed
     * while events are being dispatched.
     *
     * !#zh
     * 该类已废弃，请使用 cc.systemEvent 或 cc.EventTarget 代替，详见 [监听和发射事件](../../../manual/zh/scripting/events.md)。<br>
     * <br>
     * 事件管理器，它主要管理事件监听器注册和派发系统事件。
     *
     * @class eventManager
     * @static
     * @example {@link cocos2d/core/event-manager/CCEventManager/addListener.js}
     * @deprecated
     */
    export const eventManager: EventManager;
    export default eventManager;
}
declare module "cocos/core/platform/CCMacro" {
    /****************************************************************************
     Copyright (c) 2008-2010 Ricardo Quesada
     Copyright (c) 2011-2012 cocos2d-x.org
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import Vec2 from "cocos/core/value-types/vec2";
    /**
     * @module macro
     */
    const macro: {
        /**
         * !en
         * The image format supported by the engine defaults, and the supported formats may differ in different build platforms and device types.
         * Currently all platform and device support ['.webp', '.jpg', '.jpeg', '.bmp', '.png'], ios mobile platform
         * !zh
         * 引擎默认支持的图片格式，支持的格式可能在不同的构建平台和设备类型上有所差别。
         * 目前所有平台和设备支持的格式有 ['.webp', '.jpg', '.jpeg', '.bmp', '.png']. The iOS mobile platform also supports the PVR format。
         * @property {[String]} SUPPORT_TEXTURE_FORMATS
         */
        SUPPORT_TEXTURE_FORMATS: string[];
        KEY: {
            /**
             * !#en None
             * !#zh 没有分配
             * @property none
             * @type {Number}
             * @readonly
             */
            'none': number;
            /**
             * !#en The back key
             * !#zh 返回键
             * @property back
             * @type {Number}
             * @readonly
             */
            'back': number;
            /**
             * !#en The menu key
             * !#zh 菜单键
             * @property menu
             * @type {Number}
             * @readonly
             */
            'menu': number;
            /**
             * !#en The backspace key
             * !#zh 退格键
             * @property backspace
             * @type {Number}
             * @readonly
             */
            'backspace': number;
            /**
             * !#en The tab key
             * !#zh Tab 键
             * @property tab
             * @type {Number}
             * @readonly
             */
            'tab': number;
            /**
             * !#en The enter key
             * !#zh 回车键
             * @property enter
             * @type {Number}
             * @readonly
             */
            'enter': number;
            /**
             * !#en The shift key
             * !#zh Shift 键
             * @property shift
             * @type {Number}
             * @readonly
             */
            'shift': number;
            /**
             * !#en The ctrl key
             * !#zh Ctrl 键
             * @property ctrl
             * @type {Number}
             * @readonly
             */
            'ctrl': number;
            /**
             * !#en The alt key
             * !#zh Alt 键
             * @property alt
             * @type {Number}
             * @readonly
             */
            'alt': number;
            /**
             * !#en The pause key
             * !#zh 暂停键
             * @property pause
             * @type {Number}
             * @readonly
             */
            'pause': number;
            /**
             * !#en The caps lock key
             * !#zh 大写锁定键
             * @property capslock
             * @type {Number}
             * @readonly
             */
            'capslock': number;
            /**
             * !#en The esc key
             * !#zh ESC 键
             * @property escape
             * @type {Number}
             * @readonly
             */
            'escape': number;
            /**
             * !#en The space key
             * !#zh 空格键
             * @property space
             * @type {Number}
             * @readonly
             */
            'space': number;
            /**
             * !#en The page up key
             * !#zh 向上翻页键
             * @property pageup
             * @type {Number}
             * @readonly
             */
            'pageup': number;
            /**
             * !#en The page down key
             * !#zh 向下翻页键
             * @property pagedown
             * @type {Number}
             * @readonly
             */
            'pagedown': number;
            /**
             * !#en The end key
             * !#zh 结束键
             * @property end
             * @type {Number}
             * @readonly
             */
            'end': number;
            /**
             * !#en The home key
             * !#zh 主菜单键
             * @property home
             * @type {Number}
             * @readonly
             */
            'home': number;
            /**
             * !#en The left key
             * !#zh 向左箭头键
             * @property left
             * @type {Number}
             * @readonly
             */
            'left': number;
            /**
             * !#en The up key
             * !#zh 向上箭头键
             * @property up
             * @type {Number}
             * @readonly
             */
            'up': number;
            /**
             * !#en The right key
             * !#zh 向右箭头键
             * @property right
             * @type {Number}
             * @readonly
             */
            'right': number;
            /**
             * !#en The down key
             * !#zh 向下箭头键
             * @property down
             * @type {Number}
             * @readonly
             */
            'down': number;
            /**
             * !#en The select key
             * !#zh Select 键
             * @property select
             * @type {Number}
             * @readonly
             */
            'select': number;
            /**
             * !#en The insert key
             * !#zh 插入键
             * @property insert
             * @type {Number}
             * @readonly
             */
            'insert': number;
            /**
             * !#en The Delete key
             * !#zh 删除键
             * @property Delete
             * @type {Number}
             * @readonly
             */
            'Delete': number;
            /**
             * !#en The '0' key on the top of the alphanumeric keyboard.
             * !#zh 字母键盘上的 0 键
             * @property 0
             * @type {Number}
             * @readonly
             */
            '0': number;
            /**
             * !#en The '1' key on the top of the alphanumeric keyboard.
             * !#zh 字母键盘上的 1 键
             * @property 1
             * @type {Number}
             * @readonly
             */
            '1': number;
            /**
             * !#en The '2' key on the top of the alphanumeric keyboard.
             * !#zh 字母键盘上的 2 键
             * @property 2
             * @type {Number}
             * @readonly
             */
            '2': number;
            /**
             * !#en The '3' key on the top of the alphanumeric keyboard.
             * !#zh 字母键盘上的 3 键
             * @property 3
             * @type {Number}
             * @readonly
             */
            '3': number;
            /**
             * !#en The '4' key on the top of the alphanumeric keyboard.
             * !#zh 字母键盘上的 4 键
             * @property 4
             * @type {Number}
             * @readonly
             */
            '4': number;
            /**
             * !#en The '5' key on the top of the alphanumeric keyboard.
             * !#zh 字母键盘上的 5 键
             * @property 5
             * @type {Number}
             * @readonly
             */
            '5': number;
            /**
             * !#en The '6' key on the top of the alphanumeric keyboard.
             * !#zh 字母键盘上的 6 键
             * @property 6
             * @type {Number}
             * @readonly
             */
            '6': number;
            /**
             * !#en The '7' key on the top of the alphanumeric keyboard.
             * !#zh 字母键盘上的 7 键
             * @property 7
             * @type {Number}
             * @readonly
             */
            '7': number;
            /**
             * !#en The '8' key on the top of the alphanumeric keyboard.
             * !#zh 字母键盘上的 8 键
             * @property 8
             * @type {Number}
             * @readonly
             */
            '8': number;
            /**
             * !#en The '9' key on the top of the alphanumeric keyboard.
             * !#zh 字母键盘上的 9 键
             * @property 9
             * @type {Number}
             * @readonly
             */
            '9': number;
            /**
             * !#en The a key
             * !#zh A 键
             * @property a
             * @type {Number}
             * @readonly
             */
            'a': number;
            /**
             * !#en The b key
             * !#zh B 键
             * @property b
             * @type {Number}
             * @readonly
             */
            'b': number;
            /**
             * !#en The c key
             * !#zh C 键
             * @property c
             * @type {Number}
             * @readonly
             */
            'c': number;
            /**
             * !#en The d key
             * !#zh D 键
             * @property d
             * @type {Number}
             * @readonly
             */
            'd': number;
            /**
             * !#en The e key
             * !#zh E 键
             * @property e
             * @type {Number}
             * @readonly
             */
            'e': number;
            /**
             * !#en The f key
             * !#zh F 键
             * @property f
             * @type {Number}
             * @readonly
             */
            'f': number;
            /**
             * !#en The g key
             * !#zh G 键
             * @property g
             * @type {Number}
             * @readonly
             */
            'g': number;
            /**
             * !#en The h key
             * !#zh H 键
             * @property h
             * @type {Number}
             * @readonly
             */
            'h': number;
            /**
             * !#en The i key
             * !#zh I 键
             * @property i
             * @type {Number}
             * @readonly
             */
            'i': number;
            /**
             * !#en The j key
             * !#zh J 键
             * @property j
             * @type {Number}
             * @readonly
             */
            'j': number;
            /**
             * !#en The k key
             * !#zh K 键
             * @property k
             * @type {Number}
             * @readonly
             */
            'k': number;
            /**
             * !#en The l key
             * !#zh L 键
             * @property l
             * @type {Number}
             * @readonly
             */
            'l': number;
            /**
             * !#en The m key
             * !#zh M 键
             * @property m
             * @type {Number}
             * @readonly
             */
            'm': number;
            /**
             * !#en The n key
             * !#zh N 键
             * @property n
             * @type {Number}
             * @readonly
             */
            'n': number;
            /**
             * !#en The o key
             * !#zh O 键
             * @property o
             * @type {Number}
             * @readonly
             */
            'o': number;
            /**
             * !#en The p key
             * !#zh P 键
             * @property p
             * @type {Number}
             * @readonly
             */
            'p': number;
            /**
             * !#en The q key
             * !#zh Q 键
             * @property q
             * @type {Number}
             * @readonly
             */
            'q': number;
            /**
             * !#en The r key
             * !#zh R 键
             * @property r
             * @type {Number}
             * @readonly
             */
            'r': number;
            /**
             * !#en The s key
             * !#zh S 键
             * @property s
             * @type {Number}
             * @readonly
             */
            's': number;
            /**
             * !#en The t key
             * !#zh T 键
             * @property t
             * @type {Number}
             * @readonly
             */
            't': number;
            /**
             * !#en The u key
             * !#zh U 键
             * @property u
             * @type {Number}
             * @readonly
             */
            'u': number;
            /**
             * !#en The v key
             * !#zh V 键
             * @property v
             * @type {Number}
             * @readonly
             */
            'v': number;
            /**
             * !#en The w key
             * !#zh W 键
             * @property w
             * @type {Number}
             * @readonly
             */
            'w': number;
            /**
             * !#en The x key
             * !#zh X 键
             * @property x
             * @type {Number}
             * @readonly
             */
            'x': number;
            /**
             * !#en The y key
             * !#zh Y 键
             * @property y
             * @type {Number}
             * @readonly
             */
            'y': number;
            /**
             * !#en The z key
             * !#zh Z 键
             * @property z
             * @type {Number}
             * @readonly
             */
            'z': number;
            /**
             * !#en The numeric keypad 0
             * !#zh 数字键盘 0
             * @property num0
             * @type {Number}
             * @readonly
             */
            'num0': number;
            /**
             * !#en The numeric keypad 1
             * !#zh 数字键盘 1
             * @property num1
             * @type {Number}
             * @readonly
             */
            'num1': number;
            /**
             * !#en The numeric keypad 2
             * !#zh 数字键盘 2
             * @property num2
             * @type {Number}
             * @readonly
             */
            'num2': number;
            /**
             * !#en The numeric keypad 3
             * !#zh 数字键盘 3
             * @property num3
             * @type {Number}
             * @readonly
             */
            'num3': number;
            /**
             * !#en The numeric keypad 4
             * !#zh 数字键盘 4
             * @property num4
             * @type {Number}
             * @readonly
             */
            'num4': number;
            /**
             * !#en The numeric keypad 5
             * !#zh 数字键盘 5
             * @property num5
             * @type {Number}
             * @readonly
             */
            'num5': number;
            /**
             * !#en The numeric keypad 6
             * !#zh 数字键盘 6
             * @property num6
             * @type {Number}
             * @readonly
             */
            'num6': number;
            /**
             * !#en The numeric keypad 7
             * !#zh 数字键盘 7
             * @property num7
             * @type {Number}
             * @readonly
             */
            'num7': number;
            /**
             * !#en The numeric keypad 8
             * !#zh 数字键盘 8
             * @property num8
             * @type {Number}
             * @readonly
             */
            'num8': number;
            /**
             * !#en The numeric keypad 9
             * !#zh 数字键盘 9
             * @property num9
             * @type {Number}
             * @readonly
             */
            'num9': number;
            /**
             * !#en The numeric keypad '*'
             * !#zh 数字键盘 *
             * @property *
             * @type {Number}
             * @readonly
             */
            '*': number;
            /**
             * !#en The numeric keypad '+'
             * !#zh 数字键盘 +
             * @property +
             * @type {Number}
             * @readonly
             */
            '+': number;
            /**
             * !#en The numeric keypad '-'
             * !#zh 数字键盘 -
             * @property -
             * @type {Number}
             * @readonly
             */
            '-': number;
            /**
             * !#en The numeric keypad 'delete'
             * !#zh 数字键盘删除键
             * @property numdel
             * @type {Number}
             * @readonly
             */
            'numdel': number;
            /**
             * !#en The numeric keypad '/'
             * !#zh 数字键盘 /
             * @property /
             * @type {Number}
             * @readonly
             */
            '/': number;
            /**
             * !#en The F1 function key
             * !#zh F1 功能键
             * @property f1
             * @type {Number}
             * @readonly
             */
            'f1': number;
            /**
             * !#en The F2 function key
             * !#zh F2 功能键
             * @property f2
             * @type {Number}
             * @readonly
             */
            'f2': number;
            /**
             * !#en The F3 function key
             * !#zh F3 功能键
             * @property f3
             * @type {Number}
             * @readonly
             */
            'f3': number;
            /**
             * !#en The F4 function key
             * !#zh F4 功能键
             * @property f4
             * @type {Number}
             * @readonly
             */
            'f4': number;
            /**
             * !#en The F5 function key
             * !#zh F5 功能键
             * @property f5
             * @type {Number}
             * @readonly
             */
            'f5': number;
            /**
             * !#en The F6 function key
             * !#zh F6 功能键
             * @property f6
             * @type {Number}
             * @readonly
             */
            'f6': number;
            /**
             * !#en The F7 function key
             * !#zh F7 功能键
             * @property f7
             * @type {Number}
             * @readonly
             */
            'f7': number;
            /**
             * !#en The F8 function key
             * !#zh F8 功能键
             * @property f8
             * @type {Number}
             * @readonly
             */
            'f8': number;
            /**
             * !#en The F9 function key
             * !#zh F9 功能键
             * @property f9
             * @type {Number}
             * @readonly
             */
            'f9': number;
            /**
             * !#en The F10 function key
             * !#zh F10 功能键
             * @property f10
             * @type {Number}
             * @readonly
             */
            'f10': number;
            /**
             * !#en The F11 function key
             * !#zh F11 功能键
             * @property f11
             * @type {Number}
             * @readonly
             */
            'f11': number;
            /**
             * !#en The F12 function key
             * !#zh F12 功能键
             * @property f12
             * @type {Number}
             * @readonly
             */
            'f12': number;
            /**
             * !#en The numlock key
             * !#zh 数字锁定键
             * @property numlock
             * @type {Number}
             * @readonly
             */
            'numlock': number;
            /**
             * !#en The scroll lock key
             * !#zh 滚动锁定键
             * @property scrolllock
             * @type {Number}
             * @readonly
             */
            'scrolllock': number;
            /**
             * !#en The ';' key.
             * !#zh 分号键
             * @property ;
             * @type {Number}
             * @readonly
             */
            ';': number;
            /**
             * !#en The ';' key.
             * !#zh 分号键
             * @property semicolon
             * @type {Number}
             * @readonly
             */
            'semicolon': number;
            /**
             * !#en The '=' key.
             * !#zh 等于号键
             * @property equal
             * @type {Number}
             * @readonly
             */
            'equal': number;
            /**
             * !#en The '=' key.
             * !#zh 等于号键
             * @property =
             * @type {Number}
             * @readonly
             */
            '=': number;
            /**
             * !#en The ',' key.
             * !#zh 逗号键
             * @property ,
             * @type {Number}
             * @readonly
             */
            ',': number;
            /**
             * !#en The ',' key.
             * !#zh 逗号键
             * @property comma
             * @type {Number}
             * @readonly
             */
            'comma': number;
            /**
             * !#en The dash '-' key.
             * !#zh 中划线键
             * @property dash
             * @type {Number}
             * @readonly
             */
            'dash': number;
            /**
             * !#en The '.' key.
             * !#zh 句号键
             * @property .
             * @type {Number}
             * @readonly
             */
            '.': number;
            /**
             * !#en The '.' key
             * !#zh 句号键
             * @property period
             * @type {Number}
             * @readonly
             */
            'period': number;
            /**
             * !#en The forward slash key
             * !#zh 正斜杠键
             * @property forwardslash
             * @type {Number}
             * @readonly
             */
            'forwardslash': number;
            /**
             * !#en The grave key
             * !#zh 按键 `
             * @property grave
             * @type {Number}
             * @readonly
             */
            'grave': number;
            /**
             * !#en The '[' key
             * !#zh 按键 [
             * @property [
             * @type {Number}
             * @readonly
             */
            '[': number;
            /**
             * !#en The '[' key
             * !#zh 按键 [
             * @property openbracket
             * @type {Number}
             * @readonly
             */
            'openbracket': number;
            /**
             * !#en The '\' key
             * !#zh 反斜杠键
             * @property backslash
             * @type {Number}
             * @readonly
             */
            'backslash': number;
            /**
             * !#en The ']' key
             * !#zh 按键 ]
             * @property ]
             * @type {Number}
             * @readonly
             */
            ']': number;
            /**
             * !#en The ']' key
             * !#zh 按键 ]
             * @property closebracket
             * @type {Number}
             * @readonly
             */
            'closebracket': number;
            /**
             * !#en The quote key
             * !#zh 单引号键
             * @property quote
             * @type {Number}
             * @readonly
             */
            'quote': number;
            /**
             * !#en The dpad left key
             * !#zh 导航键 向左
             * @property dpadLeft
             * @type {Number}
             * @readonly
             */
            'dpadLeft': number;
            /**
             * !#en The dpad right key
             * !#zh 导航键 向右
             * @property dpadRight
             * @type {Number}
             * @readonly
             */
            'dpadRight': number;
            /**
             * !#en The dpad up key
             * !#zh 导航键 向上
             * @property dpadUp
             * @type {Number}
             * @readonly
             */
            'dpadUp': number;
            /**
             * !#en The dpad down key
             * !#zh 导航键 向下
             * @property dpadDown
             * @type {Number}
             * @readonly
             */
            'dpadDown': number;
            /**
             * !#en The dpad center key
             * !#zh 导航键 确定键
             * @property dpadCenter
             * @type {Number}
             * @readonly
             */
            'dpadCenter': number;
        };
        ImageFormat: any;
        /**
         * PI / 180
         * @property RAD
         * @type {Number}
         */
        RAD: number;
        /**
         * One degree
         * @property DEG
         * @type {Number}
         */
        DEG: number;
        /**
         * @property REPEAT_FOREVER
         * @type {Number}
         */
        REPEAT_FOREVER: number;
        /**
         * @property FLT_EPSILON
         * @type {Number}
         */
        FLT_EPSILON: number;
        /**
         * Minimum z index value for node
         * @property MIN_ZINDEX
         * @type {Number}
         */
        MIN_ZINDEX: number;
        /**
         * Maximum z index value for node
         * @property MAX_ZINDEX
         * @type {Number}
         */
        MAX_ZINDEX: number;
        /**
         * Oriented vertically
         * @property ORIENTATION_PORTRAIT
         * @type {Number}
         */
        ORIENTATION_PORTRAIT: number;
        /**
         * Oriented horizontally
         * @property ORIENTATION_LANDSCAPE
         * @type {Number}
         */
        ORIENTATION_LANDSCAPE: number;
        /**
         * Oriented automatically
         * @property ORIENTATION_AUTO
         * @type {Number}
         */
        ORIENTATION_AUTO: number;
        DENSITYDPI_DEVICE: string;
        DENSITYDPI_HIGH: string;
        DENSITYDPI_MEDIUM: string;
        DENSITYDPI_LOW: string;
        /**
         * <p>
         *   If enabled, the texture coordinates will be calculated by using this formula: <br/>
         *      - texCoord.left = (rect.x*2+1) / (texture.wide*2);                  <br/>
         *      - texCoord.right = texCoord.left + (rect.width*2-2)/(texture.wide*2); <br/>
         *                                                                                 <br/>
         *  The same for bottom and top.                                                   <br/>
         *                                                                                 <br/>
         *  This formula prevents artifacts by using 99% of the texture.                   <br/>
         *  The "correct" way to prevent artifacts is by expand the texture's border with the same color by 1 pixel<br/>
         *                                                                                  <br/>
         *  Affected component:                                                                 <br/>
         *      - cc.TMXLayer                                                       <br/>
         *                                                                                  <br/>
         *  Enabled by default. To disabled set it to 0. <br/>
         *  To modify it, in Web engine please refer to CCMacro.js, in JSB please refer to CCConfig.h
         * </p>
         *
         * @property {Number} FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX
         */
        FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX: boolean;
        /**
         * Position of the FPS (Default: 0,0 (bottom-left corner))<br/>
         * To modify it, in Web engine please refer to CCMacro.js, in JSB please refer to CCConfig.h
         * @property {Vec2} DIRECTOR_STATS_POSITION
         */
        DIRECTOR_STATS_POSITION: Vec2;
        /**
         * <p>
         *    If enabled, actions that alter the position property (eg: CCMoveBy, CCJumpBy, CCBezierBy, etc..) will be stacked.                  <br/>
         *    If you run 2 or more 'position' actions at the same time on a node, then end position will be the sum of all the positions.        <br/>
         *    If disabled, only the last run action will take effect.
         * </p>
         * @property {Number} ENABLE_STACKABLE_ACTIONS
         */
        ENABLE_STACKABLE_ACTIONS: boolean;
        /**
         * !#en
         * The timeout to determine whether a touch is no longer active and should be removed.
         * The reason to add this timeout is due to an issue in X5 browser core,
         * when X5 is presented in wechat on Android, if a touch is glissed from the bottom up, and leave the page area,
         * no touch cancel event is triggered, and the touch will be considered active forever.
         * After multiple times of this action, our maximum touches number will be reached and all new touches will be ignored.
         * So this new mechanism can remove the touch that should be inactive if it's not updated during the last 5000 milliseconds.
         * Though it might remove a real touch if it's just not moving for the last 5 seconds which is not easy with the sensibility of mobile touch screen.
         * You can modify this value to have a better behavior if you find it's not enough.
         * !#zh
         * 用于甄别一个触点对象是否已经失效并且可以被移除的延时时长
         * 添加这个时长的原因是 X5 内核在微信浏览器中出现的一个 bug。
         * 在这个环境下，如果用户将一个触点从底向上移出页面区域，将不会触发任何 touch cancel 或 touch end 事件，而这个触点会被永远当作停留在页面上的有效触点。
         * 重复这样操作几次之后，屏幕上的触点数量将达到我们的事件系统所支持的最高触点数量，之后所有的触摸事件都将被忽略。
         * 所以这个新的机制可以在触点在一定时间内没有任何更新的情况下视为失效触点并从事件系统中移除。
         * 当然，这也可能移除一个真实的触点，如果用户的触点真的在一定时间段内完全没有移动（这在当前手机屏幕的灵敏度下会很难）。
         * 你可以修改这个值来获得你需要的效果，默认值是 5000 毫秒。
         * @property {Number} TOUCH_TIMEOUT
         */
        TOUCH_TIMEOUT: number;
        /**
         * !#en
         * The maximum vertex count for a single batched draw call.
         * !#zh
         * 最大可以被单次批处理渲染的顶点数量。
         * @property {Number} BATCH_VERTEX_COUNT
         */
        BATCH_VERTEX_COUNT: number;
        /**
         * !#en
         * Whether or not enabled tiled map auto culling. If you set the TiledMap skew or rotation,
         * then need to manually disable this, otherwise, the rendering will be wrong.
         * !#zh
         * 是否开启瓦片地图的自动裁减功能。瓦片地图如果设置了 skew, rotation 的话，需要手动关闭，否则渲染会出错。
         * @property {Boolean} ENABLE_TILEDMAP_CULLING
         * @default true
         */
        ENABLE_TILEDMAP_CULLING: boolean;
        /**
         * !#en
         * The max concurrent task number for the downloader
         * !#zh
         * 下载任务的最大并发数限制，在安卓平台部分机型或版本上可能需要限制在较低的水平
         * @property {Number} DOWNLOAD_MAX_CONCURRENT
         * @default 64
         */
        DOWNLOAD_MAX_CONCURRENT: number;
        /**
         * !#en
         * Boolean that indicates if the canvas contains an alpha channel, default sets to false for better performance.
         * Though if you want to make your canvas background transparent and show other dom elements at the background,
         * you can set it to true before `cc.game.run`.
         * Web only.
         * !#zh
         * 用于设置 Canvas 背景是否支持 alpha 通道，默认为 false，这样可以有更高的性能表现。
         * 如果你希望 Canvas 背景是透明的，并显示背后的其他 DOM 元素，你可以在 `cc.game.run` 之前将这个值设为 true。
         * 仅支持 Web
         * @property {Boolean} ENABLE_TRANSPARENT_CANVAS
         * @default false
         */
        ENABLE_TRANSPARENT_CANVAS: boolean;
        /**
         * !#en
         * Boolean that indicates if the WebGL context is created with `antialias` option turned on, default value is false.
         * Set it to true could make your game graphics slightly smoother, like texture hard edges when rotated.
         * Whether to use this really depend on your game design and targeted platform,
         * device with retina display usually have good detail on graphics with or without this option,
         * you probably don't want antialias if your game style is pixel art based.
         * Also, it could have great performance impact with some browser / device using software MSAA.
         * You can set it to true before `cc.game.run`.
         * Web only.
         * !#zh
         * 用于设置在创建 WebGL Context 时是否开启抗锯齿选项，默认值是 false。
         * 将这个选项设置为 true 会让你的游戏画面稍稍平滑一些，比如旋转硬边贴图时的锯齿。是否开启这个选项很大程度上取决于你的游戏和面向的平台。
         * 在大多数拥有 retina 级别屏幕的设备上用户往往无法区分这个选项带来的变化；如果你的游戏选择像素艺术风格，你也多半不会想开启这个选项。
         * 同时，在少部分使用软件级别抗锯齿算法的设备或浏览器上，这个选项会对性能产生比较大的影响。
         * 你可以在 `cc.game.run` 之前设置这个值，否则它不会生效。
         * 仅支持 Web
         * @property {Boolean} ENABLE_WEBGL_ANTIALIAS
         * @default false
         */
        ENABLE_WEBGL_ANTIALIAS: boolean;
        /**
         * !#en
         * Whether or not enable auto culling.
         * This feature have been removed in v2.0 new renderer due to overall performance consumption.
         * We have no plan currently to re-enable auto culling.
         * If your game have more dynamic objects, we suggest to disable auto culling.
         * If your game have more static objects, we suggest to enable auto culling.
         * !#zh
         * 是否开启自动裁减功能，开启裁减功能将会把在屏幕外的物体从渲染队列中去除掉。
         * 这个功能在 v2.0 的新渲染器中被移除了，因为它在大多数游戏中所带来的损耗要高于性能的提升，目前我们没有计划重新支持自动裁剪。
         * 如果游戏中的动态物体比较多的话，建议将此选项关闭。
         * 如果游戏中的静态物体比较多的话，建议将此选项打开。
         * @property {Boolean} ENABLE_CULLING
         * @deprecated since v2.0
         * @default false
         */
        ENABLE_CULLING: boolean;
        /**
         * !#en
         * Whether or not clear dom Image object cache after uploading to gl texture.
         * Concretely, we are setting image.src to empty string to release the cache.
         * Normally you don't need to enable this option, because on web the Image object doesn't consume too much memory.
         * But on Wechat Game platform, the current version cache decoded data in Image object, which has high memory usage.
         * So we enabled this option by default on Wechat, so that we can release Image cache immediately after uploaded to GPU.
         * !#zh
         * 是否在将贴图上传至 GPU 之后删除 DOM Image 缓存。
         * 具体来说，我们通过设置 image.src 为空字符串来释放这部分内存。
         * 正常情况下，你不需要开启这个选项，因为在 web 平台，Image 对象所占用的内存很小。
         * 但是在微信小游戏平台的当前版本，Image 对象会缓存解码后的图片数据，它所占用的内存空间很大。
         * 所以我们在微信平台默认开启了这个选项，这样我们就可以在上传 GL 贴图之后立即释放 Image 对象的内存，避免过高的内存占用。
         * @property {Boolean} CLEANUP_IMAGE_CACHE
         * @default false
         */
        CLEANUP_IMAGE_CACHE: boolean;
        /**
         * !#en
         * Whether or not show mesh wire frame.
         * !#zh
         * 是否显示网格的线框。
         * @property {Boolean} SHOW_MESH_WIREFRAME
         * @default false
         */
        SHOW_MESH_WIREFRAME: boolean;
    };
    export { macro };
}
declare module "cocos/core/platform/CCSys" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    /**
     * System variables
     * @class sys
     * @main
     * @static
     */
    const sys: {
        [x: string]: any;
    };
    export default sys;
}
declare module "cocos/core/platform/event-manager/CCTouch" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Vec2 } from "cocos/core/value-types/index";
    /**
     * !#en The touch event class
     * !#zh 封装了触摸相关的信息。
     * @class Touch
     *
     * @param {Number} x
     * @param {Number} y
     * @param {Number} id
     */
    export default class Touch {
        _point: Vec2;
        _prevPoint: Vec2;
        _lastModified: number;
        private _id;
        private _startPoint;
        private _startPointCaptured;
        constructor(x: number, y: number, id?: number | null);
        /**
         * !#en Returns the current touch location in OpenGL coordinates.、
         * !#zh 获取当前触点位置。
         */
        getLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns X axis location value.
         * !#zh 获取当前触点 X 轴位置。
         */
        getLocationX(): number;
        /**
         * !#en Returns Y axis location value.
         * !#zh 获取当前触点 Y 轴位置。
         */
        getLocationY(): number;
        /**
         * !#en Returns the current touch location in OpenGL coordinates.、
         * !#zh 获取当前触点位置。
         */
        getUILocation(out?: Vec2): Vec2;
        /**
         * !#en Returns X axis location value.
         * !#zh 获取当前触点 X 轴位置。
         */
        getUILocationX(): number;
        /**
         * !#en Returns Y axis location value.
         * !#zh 获取当前触点 Y 轴位置。
         */
        getUILocationY(): number;
        /**
         * !#en Returns the previous touch location in OpenGL coordinates.
         * !#zh 获取触点在上一次事件时的位置对象，对象包含 x 和 y 属性。
         */
        getPreviousLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns the previous touch location in OpenGL coordinates.
         * !#zh 获取触点在上一次事件时的位置对象，对象包含 x 和 y 属性。
         */
        getUIPreviousLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns the start touch location in OpenGL coordinates.
         * !#zh 获获取触点落下时的位置对象，对象包含 x 和 y 属性。
         */
        getStartLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns the start touch location in OpenGL coordinates.
         * !#zh 获获取触点落下时的位置对象，对象包含 x 和 y 属性。
         */
        getUIStartLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns the delta distance from the previous touche to the current one in screen coordinates.
         * !#zh 获取触点距离上一次事件移动的距离对象，对象包含 x 和 y 属性。
         */
        getDelta(out?: Vec2): Vec2;
        /**
         * !#en Returns the delta distance from the previous touche to the current one in screen coordinates.
         * !#zh 获取触点距离上一次事件移动的距离对象，对象包含 x 和 y 属性。
         */
        getUIDelta(out?: Vec2): Vec2;
        /**
         * !#en Returns the current touch location in screen coordinates.
         * !#zh 获取当前事件在游戏窗口内的坐标位置对象，对象包含 x 和 y 属性。
         */
        getLocationInView(out?: Vec2): Vec2;
        /**
         * !#en Returns the previous touch location in screen coordinates.
         * !#zh 获取触点在上一次事件时在游戏窗口中的位置对象，对象包含 x 和 y 属性。
         */
        getPreviousLocationInView(out?: Vec2): Vec2;
        /**
         * !#en Returns the start touch location in screen coordinates.
         * !#zh 获取触点落下时在游戏窗口中的位置对象，对象包含 x 和 y 属性。
         */
        getStartLocationInView(out?: Vec2): Vec2;
        /**
         * !#en Returns the id of cc.Touch.
         * !#zh 触点的标识 ID，可以用来在多点触摸中跟踪触点。
         */
        getID(): number | null;
        /**
         * !#en Sets information to touch.
         * !#zh 设置触摸相关的信息。用于监控触摸事件。
         */
        setTouchInfo(id?: number | null, x?: number, y?: number): void;
        _setPoint(point: Vec2): void;
        _setPoint(x: number, y: number): void;
        _setPrevPoint(point: Vec2): void;
        _setPrevPoint(x: number, y: number): void;
    }
}
declare module "cocos/core/platform/event-manager/CCEvent" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import Event from "cocos/core/event/event";
    import { Vec2 } from "cocos/core/value-types/index";
    import Touch from "cocos/core/platform/event-manager/CCTouch";
    /**
     * !#en The mouse event
     * !#zh 鼠标事件类型
     * @class Event.EventMouse
     * @extends Event
     */
    export class EventMouse extends Event {
        /**
         * !#en The none event code of mouse event.
         * !#zh 无。
         */
        static NONE: number;
        /**
         * !#en The event type code of mouse down event.
         * !#zh 鼠标按下事件。
         */
        static DOWN: number;
        /**
         * !#en The event type code of mouse up event.
         * !#zh 鼠标按下后释放事件。
         */
        static UP: number;
        /**
         * !#en The event type code of mouse move event.
         * !#zh 鼠标移动事件。
         */
        static MOVE: number;
        /**
         * !#en The event type code of mouse scroll event.
         * !#zh 鼠标滚轮事件。
         */
        static SCROLL: number;
        /**
         * !#en The tag of Mouse left button.
         * !#zh 鼠标左键的标签。
         */
        static BUTTON_LEFT: number;
        /**
         * !#en The tag of Mouse right button  (The right button number is 2 on browser).
         * !#zh 鼠标右键的标签。
         */
        static BUTTON_RIGHT: number;
        /**
         * !#en The tag of Mouse middle button  (The right button number is 1 on browser).
         * !#zh 鼠标中键的标签。
         */
        static BUTTON_MIDDLE: number;
        /**
         * !#en The tag of Mouse button 4.
         * !#zh 鼠标按键 4 的标签。
         */
        static BUTTON_4: number;
        /**
         * !#en The tag of Mouse button 5.
         * !#zh 鼠标按键 5 的标签。
         */
        static BUTTON_5: number;
        /**
         * !#en The tag of Mouse button 6.
         * !#zh 鼠标按键 6 的标签。
         */
        static BUTTON_6: number;
        /**
         * !#en The tag of Mouse button 7.
         * !#zh 鼠标按键 7 的标签。
         */
        static BUTTON_7: number;
        /**
         * !#en The tag of Mouse button 8.
         * !#zh 鼠标按键 8 的标签。
         */
        static BUTTON_8: number;
        movementX: number;
        movementY: number;
        private _eventType;
        private _button;
        private _x;
        private _y;
        private _prevX;
        private _prevY;
        private _scrollX;
        private _scrollY;
        /**
         * @param eventType - The mouse event type, UP, DOWN, MOVE, CANCELED
         * @param [bubbles=false] - A boolean indicating whether the event bubbles up through the tree or not
         */
        constructor(eventType: number, bubbles?: boolean);
        /**
         * !#en Sets scroll data.
         * !#zh 设置鼠标的滚动数据。
         */
        setScrollData(scrollX: number, scrollY: number): void;
        /**
         * !#en Returns the x axis scroll value.
         * !#zh 获取鼠标滚动的X轴距离，只有滚动时才有效。
         */
        getScrollX(): number;
        /**
         * !#en Returns the y axis scroll value.
         * !#zh 获取滚轮滚动的 Y 轴距离，只有滚动时才有效。
         */
        getScrollY(): number;
        /**
         * !#en Sets cursor location.
         * !#zh 设置当前鼠标位置。
         */
        setLocation(x: number, y: number): void;
        /**
         * !#en Returns cursor location.
         * !#zh 获取鼠标相对于左下角位置对象，对象包含 x 和 y 属性。
         */
        getLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns the current cursor location in screen coordinates.
         * !#zh 获取当前事件在游戏窗口内的坐标位置对象，对象包含 x 和 y 属性。
         */
        getLocationInView(out?: Vec2): Vec2;
        /**
         * !#en Returns the current cursor location in ui coordinates.
         * !#zh 获取当前事件在 UI 窗口内的坐标位置，对象包含 x 和 y 属性。
         */
        getUILocation(out?: Vec2): Vec2;
        _setPrevCursor(x: number, y: number): void;
        /**
         * !#en Returns the previous touch location.
         * !#zh 获取鼠标点击在上一次事件时的位置对象，对象包含 x 和 y 属性。
         */
        getPreviousLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns the previous touch location.
         * !#zh 获取鼠标点击在上一次事件时的位置对象，对象包含 x 和 y 属性。
         */
        getUIPreviousLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns the delta distance from the previous location to current location.
         * !#zh 获取鼠标距离上一次事件移动的距离对象，对象包含 x 和 y 属性。
         */
        getDelta(out?: Vec2): Vec2;
        /**
         * !#en Returns the X axis delta distance from the previous location to current location.
         * !#zh 获取鼠标距离上一次事件移动的 X 轴距离。
         */
        getDeltaX(): number;
        /**
         * !#en Returns the Y axis delta distance from the previous location to current location.
         * !#zh 获取鼠标距离上一次事件移动的 Y 轴距离。
         */
        getDeltaY(): number;
        /**
         * !#en Returns the delta distance from the previous location to current location.
         * !#zh 获取鼠标距离上一次事件移动的距离对象，对象包含 x 和 y 属性。
         */
        getUIDelta(out?: Vec2): Vec2;
        /**
         * !#en Returns the X axis delta distance from the previous location to current location.
         * !#zh 获取鼠标距离上一次事件移动的 X 轴距离。
         */
        getUIDeltaX(): number;
        /**
         * !#en Returns the Y axis delta distance from the previous location to current location.
         * !#zh 获取鼠标距离上一次事件移动的 Y 轴距离。
         */
        getUIDeltaY(): number;
        /**
         * !#en Sets mouse button.
         * !#zh 设置鼠标按键。
         */
        setButton(button: number | null): void;
        /**
         * !#en Returns mouse button.
         * !#zh 获取鼠标按键。
         */
        getButton(): number | null;
        /**
         * !#en Returns location X axis data.
         * !#zh 获取鼠标当前位置 X 轴。
         */
        getLocationX(): number;
        /**
         * !#en Returns location Y axis data.
         * !#zh 获取鼠标当前位置 Y 轴。
         */
        getLocationY(): number;
        /**
         * !#en Returns location X axis data.
         * !#zh 获取鼠标当前位置 X 轴。
         */
        getUILocationX(): number;
        /**
         * !#en Returns location Y axis data.
         * !#zh 获取鼠标当前位置 Y 轴。
         */
        getUILocationY(): number;
    }
    /**
     * !#en The touch event
     * !#zh 触摸事件
     * @class Event.EventTouch
     * @constructor
     * @extends Event
     */
    export class EventTouch extends Event {
        /**
         * !#en The maximum touch numbers
         * !#zh 最大触摸数量。
         */
        static MAX_TOUCHES: number;
        /**
         * !#en The event type code of touch began event.
         * !#zh 开始触摸事件
         */
        static BEGAN: number;
        /**
         * !#en The event type code of touch moved event.
         * !#zh 触摸后移动事件
         */
        static MOVED: number;
        /**
         * !#en The event type code of touch ended event.
         * !#zh 结束触摸事件
         */
        static ENDED: number;
        /**
         * !#en The event type code of touch cancelled event.
         * !#zh 取消触摸事件
         */
        static CANCELLED: number;
        /**
         * !#en The current touch object
         * !#zh 当前触点对象
         */
        touch: Touch | null;
        currentTouch: Touch | null;
        _eventCode: number;
        simulate: boolean;
        private _touches;
        /**
         * @param touches - The array of the touches
         * @param bubbles - A boolean indicating whether the event bubbles up through the tree or not
         */
        constructor(touches?: Touch[], bubbles?: boolean);
        /**
         * !#en Returns event code.
         * !#zh 获取事件类型。
         */
        getEventCode(): number;
        /**
         * !#en Returns touches of event.
         * !#zh 获取触摸点的列表。
         */
        getTouches(): Touch[];
        _setEventCode(eventCode: number): void;
        _setTouches(touches: Touch[]): void;
        /**
         * !#en Sets touch location.
         * !#zh 设置当前触点位置
         */
        setLocation(x: number, y: number): void;
        /**
         * !#en Returns touch location.
         * !#zh 获取触点位置。
         */
        getLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns the current touch location in screen coordinates.
         * !#zh 获取当前触点在游戏窗口中的位置。
         */
        getLocationInView(out?: Vec2): Vec2;
        /**
         * !#en Returns the previous touch location.
         * !#zh 获取触点在上一次事件时的位置对象，对象包含 x 和 y 属性。
         */
        getPreviousLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns the start touch location.
         * !#zh 获获取触点落下时的位置对象，对象包含 x 和 y 属性。
         */
        getStartLocation(out?: Vec2): Vec2;
        /**
         * !#en Returns the id of cc.Touch.
         * !#zh 触点的标识 ID，可以用来在多点触摸中跟踪触点。
         */
        getID(): number | null;
        /**
         * !#en Returns the delta distance from the previous location to current location.
         * !#zh 获取触点距离上一次事件移动的距离对象，对象包含 x 和 y 属性。
         */
        getDelta(out?: Vec2): Vec2;
        /**
         * !#en Returns the X axis delta distance from the previous location to current location.
         * !#zh 获取触点距离上一次事件移动的 x 轴距离。
         */
        getDeltaX(out?: Vec2): number;
        /**
         * !#en Returns the Y axis delta distance from the previous location to current location.
         * !#zh 获取触点距离上一次事件移动的 y 轴距离。
         */
        getDeltaY(out?: Vec2): number;
        /**
         * !#en Returns location X axis data.
         * !#zh 获取当前触点 X 轴位置。
         */
        getLocationX(): number;
        /**
         * !#en Returns location Y axis data.
         * !#zh 获取当前触点 Y 轴位置。
         */
        getLocationY(): number;
    }
    /**
     * !#en The acceleration event
     * !#zh 加速度事件
     * @class Event.EventAcceleration
     * @extends Event
     */
    export class EventAcceleration extends Event {
        acc: Object;
        /**
         * @param acc - The acceleration
         * @param bubbles - A boolean indicating whether the event bubbles up through the tree or not
         */
        constructor(acc: Object, bubbles?: boolean);
    }
    /**
     * !#en The keyboard event
     * !#zh 键盘事件
     * @class Event.EventKeyboard
     * @extends Event
     */
    export class EventKeyboard extends Event {
        /**
         * !#en
         * The keyCode read-only property represents a system and implementation dependent numerical code
         * identifying the unmodified value of the pressed key.
         * This is usually the decimal ASCII (RFC 20) or Windows 1252 code corresponding to the key.
         * If the key can't be identified, this value is 0.
         *
         * !#zh
         * keyCode 是只读属性它表示一个系统和依赖于实现的数字代码，可以识别按键的未修改值。
         * 这通常是十进制 ASCII (RFC20) 或者 Windows 1252 代码，所对应的密钥。
         * 如果无法识别该键，则该值为 0。
         */
        keyCode: number;
        /**
         * Raw DOM event.
         */
        rawEvent?: KeyboardEvent;
        isPressed: boolean;
        /**
         * @param keyCode - The key code of which triggered this event
         * @param isPressed - A boolean indicating whether the key have been pressed
         * @param bubbles - A boolean indicating whether the event bubbles up through the tree or not
         */
        constructor(keyCode: number | KeyboardEvent, isPressed: boolean, bubbles?: boolean);
    }
}
declare module "cocos/core/platform/event-manager/input-manager" {
    import { EventMouse } from "cocos/core/platform/event-manager/CCEvent";
    import CCTouch from "cocos/core/platform/event-manager/CCTouch";
    interface IHTMLElementPosition {
        left: number;
        top: number;
        width: number;
        height: number;
    }
    /**
     *  This class manages all events of input. include: touch, mouse, accelerometer, keyboard
     */
    class InputManager {
        private _mousePressed;
        private _isRegisterEvent;
        private _preTouchPoint;
        private _prevMousePoint;
        private _preTouchPool;
        private _preTouchPoolPointer;
        private _touches;
        private _touchesIntegerDict;
        private _indexBitsUsed;
        private _maxTouches;
        private _accelEnabled;
        private _accelInterval;
        private _accelMinus;
        private _accelCurTime;
        private _acceleration;
        private _accelDeviceEvent;
        private _glView;
        private _minus;
        private _pointLocked;
        handleTouchesBegin(touches: CCTouch[]): void;
        handleTouchesMove(touches: CCTouch[]): void;
        handleTouchesEnd(touches: CCTouch[]): void;
        handleTouchesCancel(touches: CCTouch[]): void;
        getSetOfTouchesEndOrCancel(touches: CCTouch[]): CCTouch[];
        getHTMLElementPosition(element: HTMLElement): IHTMLElementPosition;
        getPreTouch(touch: CCTouch): CCTouch;
        setPreTouch(touch: CCTouch): void;
        getTouchByXY(event: MouseEvent, tx: number, ty: number, pos: IHTMLElementPosition): CCTouch;
        getMouseEvent(location: {
            x: number;
            y: number;
        }, pos: IHTMLElementPosition, eventType: number): EventMouse;
        getPointByEvent(event: MouseEvent, pos: IHTMLElementPosition): {
            x: number;
            y: number;
        };
        getTouchesByEvent(event: TouchEvent, position: IHTMLElementPosition): CCTouch[];
        registerSystemEvent(element: HTMLElement): void;
        /**
         * Whether enable accelerometer event.
         */
        setAccelerometerEnabled(isEnable: boolean): void;
        didAccelerate(eventData: DeviceMotionEvent | DeviceOrientationEvent): void;
        update(dt: number): void;
        /**
         * set accelerometer interval value
         * @method setAccelerometerInterval
         * @param {Number} interval
         */
        setAccelerometerInterval(interval: any): void;
        private _getUnUsedIndex;
        private _removeUsedIndexBit;
        private _registerMouseEvents;
        private _registerPointerLockEvent;
        private _registerWindowMouseEvents;
        private _registerElementMouseEvents;
        private _registerMousePointerEvents;
        private _registerTouchEvents;
        private _registerWXGameTouchEvents;
        private _registerHTMLTouchEvents;
        private _registerKeyboardEvent;
        private _registerAccelerometerEvent;
        private _unregisterAccelerometerEvent;
    }
    const inputManager: InputManager;
    export default inputManager;
}
declare module "cocos/core/platform/event-manager/event-enum" {
    /**
     * !#zh
     * 一般用于系统事件或者节点事件的事件枚举
     */
    export enum EventType {
        /**
         * !#en The event type for press the key up event, you can use its value directly: 'keyup'
         * !#zh 手指开始触摸事件
         * @property TOUCH_START
         * @type {String}
         * @static
         */
        TOUCH_START = "touch-start",
        /**
         * !#en The event type for press the key up event, you can use its value directly: 'keyup'
         * !#zh 手指开始触摸事件
         * @property TOUCH_MOVE
         * @type {String}
         * @static
         */
        TOUCH_MOVE = "touch-move2",
        /**
         * !#en The event type for press the key up event, you can use its value directly: 'keyup'
         * !#zh 手指开始触摸事件
         * @property TOUCH_END
         * @type {String}
         * @static
         */
        TOUCH_END = "touch-end",
        /**
         * !#en The event type for press the key up event, you can use its value directly: 'keyup'
         * !#zh 手指开始触摸事件
         * @property TOUCH_CANCEL
         * @type {String}
         * @static
         */
        TOUCH_CANCEL = "touch-cancel",
        /**
         * !#en The event type for press the key up event, you can use its value directly: 'keyup'
         * !#zh 手指开始触摸事件
         * @property MOUSE_DOWN
         * @type {String}
         * @static
         */
        MOUSE_DOWN = "mouse-down",
        /**
         * !#en The event type for press the key up event, you can use its value directly: 'keyup'
         * !#zh 手指开始触摸事件
         * @property MOUSE_MOVE
         * @type {String}
         * @static
         */
        MOUSE_MOVE = "mouse-move",
        /**
         * !#en The event type for press the key up event, you can use its value directly: 'keyup'
         * !#zh 手指开始触摸事件
         * @property MOUSE_UP
         * @type {String}
         * @static
         */
        MOUSE_UP = "mouse-up",
        /**
         * !#en The event type for press the key up event, you can use its value directly: 'keyup'
         * !#zh 手指开始触摸事件
         * @property MOUSE_WHEEL
         * @type {String}
         * @static
         */
        MOUSE_WHEEL = "mouse-wheel",
        /**
         * !#en The event type for press the devicemotion event, you can use its value directly: 'devicemotion'
         * !#zh 鼠标进入事件
         * @property MOUSE_ENTER
         * @type {String}
         * @static
         */
        MOUSE_ENTER = "mouse-enter",
        /**
         * !#en The event type for press the devicemotion event, you can use its value directly: 'devicemotion'
         * !#zh 鼠标离开事件
         * @property MOUSE_LEAVE
         * @type {String}
         * @static
         */
        MOUSE_LEAVE = "mouse-leave",
        /**
         * !#en The event type for press the key down event, you can use its value directly: 'keydown'
         * !#zh 当按下按键时触发的事件
         * @property KEY_DOWN
         * @type {String}
         * @static
         */
        KEY_DOWN = "keydown",
        /**
         * !#en The event type for press the key up event, you can use its value directly: 'keyup'
         * !#zh 当松开按键时触发的事件
         * @property KEY_UP
         * @type {String}
         * @static
         */
        KEY_UP = "keyup",
        /**
         * !#en The event type for press the devicemotion event, you can use its value directly: 'devicemotion'
         * !#zh 重力感应
         * @property DEVICEMOTION
         * @type {String}
         * @static
         */
        DEVICEMOTION = "devicemotion",
        /**
         * !#en The event type for press the devicemotion event, you can use its value directly: 'devicemotion'
         * !#zh 节点改变位置、旋转或缩放事件
         * @property TRANSFORM_CHANGED
         * @type {String}
         * @static
         */
        TRANSFORM_CHANGED = "transform-changed",
        /**
         * !#en The event type for press the devicemotion event, you can use its value directly: 'devicemotion'
         * !#zh 节点位置改变事件
         * @property POSITION_PART
         * @type {String}
         * @static
         */
        POSITION_PART = "position-part",
        /**
         * !#en The event type for press the devicemotion event, you can use its value directly: 'devicemotion'
         * !#zh 节点旋转事件
         * @property ROTATION_PART
         * @type {String}
         * @static
         */
        ROTATION_PART = "rotation-part",
        /**
         * !#en The event type for press the devicemotion event, you can use its value directly: 'devicemotion'
         * !#zh 节点缩放事件
         * @property SCALE_PART
         * @type {String}
         * @static
         */
        SCALE_PART = "scale-part",
        /**
         * !#en The event type for press the devicemotion event, you can use its value directly: 'devicemotion'
         * !#zh
         * @property SCENE_CHANGED_FOR_PERSISTS
         * @type {String}
         * @static
         */
        SCENE_CHANGED_FOR_PERSISTS = "scene-changed-for-persists",
        /**
         * !#en The event type for size change events.
         * Performance note, this event will be triggered every time corresponding properties being changed,
         * if the event callback have heavy logic it may have great performance impact, try to avoid such scenario.
         * !#zh 当节点尺寸改变时触发的事件。
         * 性能警告：这个事件会在每次对应的属性被修改时触发，如果事件回调损耗较高，有可能对性能有很大的负面影响，请尽量避免这种情况。
         * @property {String} SIZE_CHANGED
         * @static
         */
        SIZE_CHANGED = "size-changed",
        /**
         * !#en The event type for anchor point change events.
         * Performance note, this event will be triggered every time corresponding properties being changed,
         * if the event callback have heavy logic it may have great performance impact, try to avoid such scenario.
         * !#zh 当节点锚点改变时触发的事件。
         * 性能警告：这个事件会在每次对应的属性被修改时触发，如果事件回调损耗较高，有可能对性能有很大的负面影响，请尽量避免这种情况。
         * @property {String} ANCHOR_CHANGED
         * @static
         */
        ANCHOR_CHANGED = "anchor-changed",
        /**
         * !#en The event type for press the devicemotion event, you can use its value directly: 'devicemotion'
         * !#zh 节点子类添加
         * @property CHILD_ADDED
         * @type {String}
         * @static
         */
        CHILD_ADDED = "child-added",
        /**
         * !#en The event type for press the devicemotion event, you can use its value directly: 'devicemotion'
         * !#zh 节点子类移除
         * @property CHILD_REMOVED
         * @type {String}
         * @static
         */
        CHILD_REMOVED = "child-removed"
    }
}
declare module "cocos/core/platform/event-manager/system-event" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     https://www.cocos.com/
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { EventTarget } from "cocos/core/event/event-target";
    import { EventType } from "cocos/core/platform/event-manager/event-enum";
    export class SystemEvent extends EventTarget {
        static EventType: typeof EventType;
        constructor();
        /**
         * !#en whether enable accelerometer event
         * !#zh 是否启用加速度计事件
         * @method setAccelerometerEnabled
         * @param {Boolean} isEnable
         */
        setAccelerometerEnabled(isEnable: boolean): void;
        /**
         * !#en set accelerometer interval value
         * !#zh 设置加速度计间隔值
         * @method setAccelerometerInterval
         * @param {Number} interval
         */
        setAccelerometerInterval(interval: number): void;
        on(type: string, callback: Function, target?: Object): Function | undefined;
        off(type: string, callback?: Function, target?: Object): void;
    }
}
declare module "cocos/core/platform/event-manager/index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export * from "cocos/core/platform/event-manager/event-manager";
    export * from "cocos/core/platform/event-manager/input-manager";
    export * from "cocos/core/platform/event-manager/system-event";
    export * from "cocos/core/platform/event-manager/CCEvent";
    export * from "cocos/core/platform/event-manager/CCTouch";
    export * from "cocos/core/platform/event-manager/event-enum";
}
declare module "cocos/assets/raw-asset" {
    import { CCObject } from '../core/data/object';
    /**
     * !#en
     * The base class for registering asset types.
     * !#zh
     * 注册用的资源基类。
     *
     * @class RawAsset
     * @extends Object
     */
    export class RawAsset extends CCObject {
        /**
         * For internal usage.
         */
        static isRawAssetType(ctor: Function): boolean;
        /**
         * For internal usage.
         */
        _uuid: string;
        constructor(...args: ConstructorParameters<typeof CCObject>);
    }
}
declare module "cocos/core/data/utils/compiler" {
    export function flattenCodeArray(array: any): string;
}
declare module "cocos/assets/CCPrefab" {
    import { Asset } from "cocos/assets/asset";
    /**
     * !#en Class for prefab handling.
     * !#zh 预制资源类。
     * @class Prefab
     * @extends Asset
     */
    export default class Prefab extends Asset {
        static OptimizationPolicy: {
            /**
             * !#zh
             * 根据创建次数自动调整优化策略。初次创建实例时，行为等同 SINGLE_INSTANCE，多次创建后将自动采用 MULTI_INSTANCE。
             * !#en
             * The optimization policy is automatically chosen based on the number of instantiations.
             * When you first create an instance, the behavior is the same as SINGLE_INSTANCE. MULTI_INSTANCE will be automatically used after multiple creation.
             * @property {Number} AUTO
             */
            AUTO: number;
            /**
             * !#zh
             * 优化单次创建性能。<br>
             * 该选项会跳过针对这个 prefab 的代码生成优化操作。当该 prefab 加载后，一般只会创建一个实例时，请选择此项。
             * !#en
             * Optimize for single instance creation.<br>
             * This option skips code generation for this prefab.
             * When this prefab will usually create only one instances, please select this option.
             * @property {Number} SINGLE_INSTANCE
             */
            SINGLE_INSTANCE: number;
            /**
             * !#zh
             * 优化多次创建性能。<br>
             * 该选项会启用针对这个 prefab 的代码生成优化操作。当该 prefab 加载后，一般会创建多个实例时，请选择此项。如果该 prefab 在场景中的节点启用了自动关联，并且在场景中有多份实例，也建议选择此项。
             * !#en
             * Optimize for creating instances multiple times.<br>
             * This option enables code generation for this prefab.
             * When this prefab will usually create multiple instances, please select this option.
             * It is also recommended to select this option if the prefab instance in the scene has Auto Sync enabled and there are multiple instances in the scene.
             * @property {Number} MULTI_INSTANCE
             */
            MULTI_INSTANCE: number;
        };
        static OptimizationPolicyThreshold: number;
        /**
         * @property {Node} data - the main cc.Node in the prefab
         */
        data: any;
        /**
         * !#zh
         * 设置实例化这个 prefab 时所用的优化策略。根据使用情况设置为合适的值，能优化该 prefab 实例化所用的时间。
         * !#en
         * Indicates the optimization policy for instantiating this prefab.
         * Set to a suitable value based on usage, can optimize the time it takes to instantiate this prefab.
         *
         * @property {Prefab.OptimizationPolicy} optimizationPolicy
         * @default Prefab.OptimizationPolicy.AUTO
         * @since 1.10.0
         * @example
         * prefab.optimizationPolicy = cc.Prefab.OptimizationPolicy.MULTI_INSTANCE;
         */
        optimizationPolicy: number;
        /**
         * !#en Indicates the raw assets of this prefab can be load after prefab loaded.
         * !#zh 指示该 Prefab 依赖的资源可否在 Prefab 加载后再延迟加载。
         * @property {Boolean} asyncLoadAssets
         * @default false
         */
        asyncLoadAssets: boolean;
        private _createFunction;
        private _instantiatedTimes;
        constructor();
        createNode(cb: Function): void;
        /**
         * Dynamically translation prefab data into minimized code.<br/>
         * This method will be called automatically before the first time the prefab being instantiated,
         * but you can re-call to refresh the create function once you modified the original prefab data in script.
         * @method compileCreateFunction
         */
        compileCreateFunction(): void;
        private _doInstantiate;
        private _instantiate;
    }
}
declare module "cocos/assets/CCScripts" {
    import { Asset } from "cocos/assets/asset";
    /**
     * !#en Class for script handling.
     * !#zh Script 资源类。
     * @class _Script
     * @extends Asset
     *
     * @private
     */
    export class Script extends Asset {
    }
    /**
     * !#en Class for JavaScript handling.
     * !#zh JavaScript 资源类。
     * @class _JavaScript
     * @extends Asset
     *
     */
    export class JavaScript extends Script {
    }
    /**
     * !#en Class for TypeScript handling.
     * !#zh TypeScript 资源类。
     * @class TypeScript
     * @extends Asset
     *
     */
    export class TypeScript extends Script {
    }
}
declare module "cocos/assets/CCSceneAsset" {
    import { Scene } from "cocos/scene-graph/index";
    import { Asset } from "cocos/assets/asset";
    /**
     * !#en Class for scene handling.
     * !#zh 场景资源类。
     * @class SceneAsset
     * @extends Asset
     *
     */
    export default class SceneAsset extends Asset {
        /**
         * @property {Scene} scene
         * @default null
         */
        scene: Scene | null;
        /**
         * !#en Indicates the raw assets of this scene can be load after scene launched.
         * !#zh 指示该场景依赖的资源可否在场景切换后再延迟加载。
         * @property {Boolean} asyncLoadAssets
         * @default false
         */
        asyncLoadAssets: boolean;
    }
}
declare module "cocos/gfx/define" {
    export const GFX_MAX_VERTEX_ATTRIBUTES: number;
    export const GFX_MAX_TEXTURE_UNITS: number;
    export const GFX_MAX_ATTACHMENTS: number;
    export const GFX_MAX_BUFFER_BINDINGS: number;
    export enum GFXObjectType {
        UNKNOWN = 0,
        BUFFER = 1,
        TEXTURE = 2,
        TEXTURE_VIEW = 3,
        RENDER_PASS = 4,
        FRAMEBUFFER = 5,
        SAMPLER = 6,
        SHADER = 7,
        PIPELINE_LAYOUT = 8,
        PIPELINE_STATE = 9,
        BINDING_LAYOUT = 10,
        INPUT_ASSEMBLER = 11,
        COMMAND_ALLOCATOR = 12,
        COMMAND_BUFFER = 13,
        QUEUE = 14,
        WINDOW = 15
    }
    export enum GFXStatus {
        UNREADY = 0,
        FAILED = 1,
        SUCCESS = 2
    }
    export class GFXObject {
        readonly gfxType: GFXObjectType;
        readonly status: GFXStatus;
        protected _gfxType: GFXObjectType;
        protected _status: GFXStatus;
        constructor(gfxType: GFXObjectType);
    }
    export enum GFXAttributeName {
        ATTR_POSITION = "a_position",
        ATTR_NORMAL = "a_normal",
        ATTR_TANGENT = "a_tangent",
        ATTR_BITANGENT = "a_bitangent",
        ATTR_WEIGHTS = "a_weights",
        ATTR_JOINTS = "a_joints",
        ATTR_COLOR = "a_color",
        ATTR_COLOR1 = "a_color1",
        ATTR_COLOR2 = "a_color2",
        ATTR_TEX_COORD = "a_texCoord",
        ATTR_TEX_COORD1 = "a_texCoord1",
        ATTR_TEX_COORD2 = "a_texCoord2",
        ATTR_TEX_COORD3 = "a_texCoord3",
        ATTR_TEX_COORD4 = "a_texCoord4",
        ATTR_TEX_COORD5 = "a_texCoord5",
        ATTR_TEX_COORD6 = "a_texCoord6",
        ATTR_TEX_COORD7 = "a_texCoord7",
        ATTR_TEX_COORD8 = "a_texCoord8"
    }
    export enum GFXType {
        UNKNOWN = 0,
        BOOL = 1,
        BOOL2 = 2,
        BOOL3 = 3,
        BOOL4 = 4,
        INT = 5,
        INT2 = 6,
        INT3 = 7,
        INT4 = 8,
        UINT = 9,
        UINT2 = 10,
        UINT3 = 11,
        UINT4 = 12,
        FLOAT = 13,
        FLOAT2 = 14,
        FLOAT3 = 15,
        FLOAT4 = 16,
        MAT2 = 17,
        MAT2X3 = 18,
        MAT2X4 = 19,
        MAT3X2 = 20,
        MAT3 = 21,
        MAT3X4 = 22,
        MAT4X2 = 23,
        MAT4X3 = 24,
        MAT4 = 25,
        SAMPLER1D = 26,
        SAMPLER1D_ARRAY = 27,
        SAMPLER2D = 28,
        SAMPLER2D_ARRAY = 29,
        SAMPLER3D = 30,
        SAMPLER_CUBE = 31,
        COUNT = 32
    }
    export enum GFXFormat {
        UNKNOWN = 0,
        A8 = 1,
        L8 = 2,
        LA8 = 3,
        R8 = 4,
        R8SN = 5,
        R8UI = 6,
        R8I = 7,
        R16F = 8,
        R16UI = 9,
        R16I = 10,
        R32F = 11,
        R32UI = 12,
        R32I = 13,
        RG8 = 14,
        RG8SN = 15,
        RG8UI = 16,
        RG8I = 17,
        RG16F = 18,
        RG16UI = 19,
        RG16I = 20,
        RG32F = 21,
        RG32UI = 22,
        RG32I = 23,
        RGB8 = 24,
        SRGB8 = 25,
        RGB8SN = 26,
        RGB8UI = 27,
        RGB8I = 28,
        RGB16F = 29,
        RGB16UI = 30,
        RGB16I = 31,
        RGB32F = 32,
        RGB32UI = 33,
        RGB32I = 34,
        RGBA8 = 35,
        SRGB8_A8 = 36,
        RGBA8SN = 37,
        RGBA8UI = 38,
        RGBA8I = 39,
        RGBA16F = 40,
        RGBA16UI = 41,
        RGBA16I = 42,
        RGBA32F = 43,
        RGBA32UI = 44,
        RGBA32I = 45,
        R5G6B5 = 46,
        R11G11B10F = 47,
        RGB5A1 = 48,
        RGBA4 = 49,
        RGB10A2 = 50,
        RGB10A2UI = 51,
        RGB9E5 = 52,
        D16 = 53,
        D16S8 = 54,
        D24 = 55,
        D24S8 = 56,
        D32F = 57,
        D32F_S8 = 58,
        BC1 = 59,
        BC1_ALPHA = 60,
        BC1_SRGB = 61,
        BC1_SRGB_ALPHA = 62,
        BC2 = 63,
        BC2_SRGB = 64,
        BC3 = 65,
        BC3_SRGB = 66,
        BC4 = 67,
        BC4_SNORM = 68,
        BC5 = 69,
        BC5_SNORM = 70,
        BC6H_UF16 = 71,
        BC6H_SF16 = 72,
        BC7 = 73,
        BC7_SRGB = 74,
        ETC_RGB8 = 75,
        ETC2_RGB8 = 76,
        ETC2_SRGB8 = 77,
        ETC2_RGB8_A1 = 78,
        ETC2_SRGB8_A1 = 79,
        ETC2_RGBA8 = 80,
        ETC2_SRGB8_A8 = 81,
        EAC_R11 = 82,
        EAC_R11SN = 83,
        EAC_RG11 = 84,
        EAC_RG11SN = 85,
        PVRTC_RGB2 = 86,
        PVRTC_RGBA2 = 87,
        PVRTC_RGB4 = 88,
        PVRTC_RGBA4 = 89,
        PVRTC2_2BPP = 90,
        PVRTC2_4BPP = 91
    }
    export enum GFXBufferUsageBit {
        NONE = 0,
        TRANSFER_SRC = 1,
        TRANSFER_DST = 2,
        INDEX = 4,
        VERTEX = 8,
        UNIFORM = 16,
        STORAGE = 32,
        INDIRECT = 64
    }
    export type GFXBufferUsage = GFXBufferUsageBit;
    export enum GFXMemoryUsageBit {
        NONE = 0,
        DEVICE = 1,
        HOST = 2
    }
    export type GFXMemoryUsage = GFXMemoryUsageBit;
    export enum GFXBufferAccessBit {
        NONE = 0,
        READ = 1,
        WRITE = 2
    }
    export type GFXBufferAccess = GFXBufferAccessBit;
    export enum GFXPrimitiveMode {
        POINT_LIST = 0,
        LINE_LIST = 1,
        LINE_STRIP = 2,
        LINE_LOOP = 3,
        LINE_LIST_ADJACENCY = 4,
        LINE_STRIP_ADJACENCY = 5,
        ISO_LINE_LIST = 6,
        TRIANGLE_LIST = 7,
        TRIANGLE_STRIP = 8,
        TRIANGLE_FAN = 9,
        TRIANGLE_LIST_ADJACENCY = 10,
        TRIANGLE_STRIP_ADJACENCY = 11,
        TRIANGLE_PATCH_ADJACENCY = 12,
        QUAD_PATCH_LIST = 13
    }
    export enum GFXPolygonMode {
        FILL = 0,
        POINT = 1,
        LINE = 2
    }
    export enum GFXShadeModel {
        GOURAND = 0,
        FLAT = 1
    }
    export enum GFXCullMode {
        NONE = 0,
        FRONT = 1,
        BACK = 2
    }
    export enum GFXComparisonFunc {
        NEVER = 0,
        LESS = 1,
        EQUAL = 2,
        LESS_EQUAL = 3,
        GREATER = 4,
        NOT_EQUAL = 5,
        GREATER_EQUAL = 6,
        ALWAYS = 7
    }
    export enum GFXStencilOp {
        ZERO = 0,
        KEEP = 1,
        REPLACE = 2,
        INCR = 3,
        DECR = 4,
        INVERT = 5,
        INCR_WRAP = 6,
        DECR_WRAP = 7
    }
    export enum GFXBlendOp {
        ADD = 0,
        SUB = 1,
        REV_SUB = 2,
        MIN = 3,
        MAX = 4
    }
    export enum GFXBlendFactor {
        ZERO = 0,
        ONE = 1,
        SRC_ALPHA = 2,
        DST_ALPHA = 3,
        ONE_MINUS_SRC_ALPHA = 4,
        ONE_MINUS_DST_ALPHA = 5,
        SRC_COLOR = 6,
        DST_COLOR = 7,
        ONE_MINUS_SRC_COLOR = 8,
        ONE_MINUS_DST_COLOR = 9,
        SRC_ALPHA_SATURATE = 10,
        CONSTANT_COLOR = 11,
        ONE_MINUS_CONSTANT_COLOR = 12,
        CONSTANT_ALPHA = 13,
        ONE_MINUS_CONSTANT_ALPHA = 14
    }
    export enum GFXColorMask {
        NONE = 0,
        R = 1,
        G = 2,
        B = 4,
        A = 8,
        ALL = 15
    }
    export enum GFXFilter {
        NONE = 0,
        POINT = 1,
        LINEAR = 2,
        ANISOTROPIC = 3
    }
    export enum GFXAddress {
        WRAP = 0,
        MIRROR = 1,
        CLAMP = 2,
        BORDER = 3
    }
    export enum GFXTextureType {
        TEX1D = 0,
        TEX2D = 1,
        TEX3D = 2
    }
    export enum GFXTextureUsageBit {
        NONE = 0,
        TRANSFER_SRC = 1,
        TRANSFER_DST = 2,
        SAMPLED = 4,
        STORAGE = 8,
        COLOR_ATTACHMENT = 16,
        DEPTH_STENCIL_ATTACHMENT = 32,
        TRANSIENT_ATTACHMENT = 64,
        INPUT_ATTACHMENT = 128
    }
    export type GFXTextureUsage = GFXTextureUsageBit;
    export enum GFXSampleCount {
        X1 = 0,
        X2 = 1,
        X4 = 2,
        X8 = 3,
        X16 = 4,
        X32 = 5,
        X64 = 6
    }
    export enum GFXTextureFlagBit {
        NONE = 0,
        GEN_MIPMAP = 1,
        CUBEMAP = 2,
        BAKUP_BUFFER = 4
    }
    export type GFXTextureFlags = GFXTextureFlagBit;
    export enum GFXTextureViewType {
        TV1D = 0,
        TV2D = 1,
        TV3D = 2,
        CUBE = 3,
        TV1D_ARRAY = 4,
        TV2D_ARRAY = 5
    }
    export enum GFXShaderType {
        VERTEX = 0,
        HULL = 1,
        DOMAIN = 2,
        GEOMETRY = 3,
        FRAGMENT = 4,
        COMPUTE = 5,
        COUNT = 6
    }
    export enum GFXBindingType {
        UNKNOWN = 0,
        UNIFORM_BUFFER = 1,
        SAMPLER = 2,
        STORAGE_BUFFER = 3
    }
    export enum GFXCommandBufferType {
        PRIMARY = 0,
        SECONDARY = 1
    }
    export enum GFXLoadOp {
        LOAD = 0,
        CLEAR = 1,
        DISCARD = 2
    }
    export enum GFXStoreOp {
        STORE = 0,
        DISCARD = 1
    }
    export enum GFXTextureLayout {
        UNDEFINED = 0,
        GENERAL = 1,
        COLOR_ATTACHMENT_OPTIMAL = 2,
        DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
        DEPTH_STENCIL_READONLY_OPTIMAL = 4,
        SHADER_READONLY_OPTIMAL = 5,
        TRANSFER_SRC_OPTIMAL = 6,
        TRANSFER_DST_OPTIMAL = 7,
        PREINITIALIZED = 8,
        PRESENT_SRC = 9
    }
    export enum GFXPipelineBindPoint {
        GRAPHICS = 0,
        COMPUTE = 1,
        RAY_TRACING = 2
    }
    export enum GFXDynamicState {
        VIEWPORT = 0,
        SCISSOR = 1,
        LINE_WIDTH = 2,
        DEPTH_BIAS = 3,
        BLEND_CONSTANTS = 4,
        DEPTH_BOUNDS = 5,
        STENCIL_WRITE_MASK = 6,
        STENCIL_COMPARE_MASK = 7
    }
    export enum GFXStencilFace {
        FRONT = 0,
        BACK = 1,
        ALL = 2
    }
    export enum GFXQueueType {
        GRAPHICS = 0,
        COMPUTE = 1,
        TRANSFER = 2
    }
    export interface IGFXRect {
        x: number;
        y: number;
        width: number;
        height: number;
    }
    export interface IGFXViewport {
        left: number;
        top: number;
        width: number;
        height: number;
        minDepth: number;
        maxDepth: number;
    }
    export interface IGFXColor {
        r: number;
        g: number;
        b: number;
        a: number;
    }
    export enum GFXClearFlag {
        NONE = 0,
        COLOR = 1,
        DEPTH = 2,
        STENCIL = 4,
        DEPTH_STENCIL = 6,
        ALL = 7
    }
    export interface IGFXOffset {
        x: number;
        y: number;
        z: number;
    }
    export interface IGFXExtent {
        width: number;
        height: number;
        depth: number;
    }
    export class GFXTextureSubres {
        baseMipLevel: number;
        levelCount: number;
        baseArrayLayer: number;
        layerCount: number;
    }
    export class GFXTextureCopy {
        srcSubres: GFXTextureSubres;
        srcOffset: IGFXOffset;
        dstSubres: GFXTextureSubres;
        dstOffset: IGFXOffset;
        extent: IGFXExtent;
    }
    export class GFXBufferTextureCopy {
        buffOffset: number;
        buffStride: number;
        buffTexHeight: number;
        texOffset: IGFXOffset;
        texExtent: IGFXExtent;
        texSubres: GFXTextureSubres;
    }
    export enum GFXFormatType {
        NONE = 0,
        UNORM = 1,
        SNORM = 2,
        UINT = 3,
        INT = 4,
        UFLOAT = 5,
        FLOAT = 6
    }
    export interface IGFXFormatInfo {
        readonly name: string;
        readonly size: number;
        readonly count: number;
        readonly type: GFXFormatType;
        readonly hasAlpha: boolean;
        readonly hasDepth: boolean;
        readonly hasStencil: boolean;
        readonly isCompressed: boolean;
    }
    export const GFXFormatInfos: IGFXFormatInfo[];
    export function GFXFormatSize(format: GFXFormat, width: number, height: number, depth: number): number;
    export function GFXFormatSurfaceSize(format: GFXFormat, width: number, height: number, depth: number, mips: number): number;
    export function GFXGetTypeSize(type: GFXType): number;
}
declare module "cocos/gfx/buffer" {
    import { GFXBufferUsage, GFXMemoryUsage, GFXObject, GFXType } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    export interface IGFXUniformInfo {
        name: string;
        type: GFXType;
        count: number;
    }
    export interface IGFXDrawInfo {
        vertexCount: number;
        firstVertex: number;
        indexCount: number;
        firstIndex: number;
        vertexOffset: number;
        instanceCount: number;
        firstInstance: number;
    }
    export const GFX_DRAW_INFO_SIZE: number;
    export interface IGFXIndirectBuffer {
        drawInfos: IGFXDrawInfo[];
    }
    export type GFXBufferSource = ArrayBuffer | IGFXIndirectBuffer;
    export interface IGFXBufferInfo {
        usage: GFXBufferUsage;
        memUsage: GFXMemoryUsage;
        size: number;
        stride?: number;
    }
    export abstract class GFXBuffer extends GFXObject {
        readonly usage: GFXBufferUsage;
        readonly memUsage: GFXMemoryUsage;
        readonly size: number;
        readonly stride: number;
        readonly count: number;
        protected _device: GFXDevice;
        protected _usage: GFXBufferUsage;
        protected _memUsage: GFXMemoryUsage;
        protected _size: number;
        protected _stride: number;
        protected _count: number;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXBufferInfo): boolean;
        abstract destroy(): void;
        abstract resize(size: number): any;
        abstract update(buffer: GFXBufferSource, offset?: number, size?: number): any;
    }
}
declare module "cocos/gfx/sampler" {
    import { GFXAddress, GFXComparisonFunc, GFXFilter, GFXObject, IGFXColor } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    export interface IGFXSamplerInfo {
        name?: string;
        minFilter?: GFXFilter;
        magFilter?: GFXFilter;
        mipFilter?: GFXFilter;
        addressU?: GFXAddress;
        addressV?: GFXAddress;
        addressW?: GFXAddress;
        maxAnisotropy?: number;
        cmpFunc?: GFXComparisonFunc;
        borderColor?: IGFXColor;
        minLOD?: number;
        maxLOD?: number;
        mipLODBias?: number;
    }
    export class GFXSamplerState {
        name: string;
        minFilter: GFXFilter;
        magFilter: GFXFilter;
        mipFilter: GFXFilter;
        addressU: GFXAddress;
        addressV: GFXAddress;
        addressW: GFXAddress;
        maxAnisotropy: number;
        cmpFunc: GFXComparisonFunc;
        borderColor: IGFXColor;
        minLOD: number;
        maxLOD: number;
        mipLODBias: number;
        compare(state: GFXSamplerState): boolean;
    }
    export abstract class GFXSampler extends GFXObject {
        readonly state: GFXSamplerState;
        protected _device: GFXDevice;
        protected _state: GFXSamplerState;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXSamplerInfo): boolean;
        abstract destroy(): void;
    }
}
declare module "cocos/gfx/texture" {
    import { GFXFormat, GFXObject, GFXSampleCount, GFXTextureFlags, GFXTextureType, GFXTextureUsage } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    export interface IGFXTextureInfo {
        type: GFXTextureType;
        usage: GFXTextureUsage;
        format: GFXFormat;
        width: number;
        height: number;
        depth?: number;
        arrayLayer?: number;
        mipLevel?: number;
        samples?: GFXSampleCount;
        flags?: GFXTextureFlags;
    }
    export abstract class GFXTexture extends GFXObject {
        readonly type: GFXTextureType;
        readonly usage: GFXTextureUsage;
        readonly format: GFXFormat;
        readonly width: number;
        readonly height: number;
        readonly depth: number;
        readonly arrayLayer: number;
        readonly mipLevel: number;
        readonly samples: GFXSampleCount;
        readonly flags: GFXTextureFlags;
        readonly size: number;
        readonly buffer: ArrayBuffer | null;
        protected _device: GFXDevice;
        protected _type: GFXTextureType;
        protected _usage: GFXTextureUsage;
        protected _format: GFXFormat;
        protected _width: number;
        protected _height: number;
        protected _depth: number;
        protected _arrayLayer: number;
        protected _mipLevel: number;
        protected _samples: GFXSampleCount;
        protected _flags: GFXTextureFlags;
        protected _isPowerOf2: boolean;
        protected _size: number;
        protected _buffer: ArrayBuffer | null;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXTextureInfo): boolean;
        abstract destroy(): any;
        abstract resize(width: number, height: number): any;
    }
}
declare module "cocos/gfx/texture-view" {
    import { GFXFormat, GFXObject, GFXTextureViewType } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXTexture } from "cocos/gfx/texture";
    export interface IGFXTextureViewInfo {
        texture: GFXTexture;
        type: GFXTextureViewType;
        format: GFXFormat;
        baseLevel?: number;
        levelCount?: number;
        baseLayer?: number;
        layerCount?: number;
    }
    export abstract class GFXTextureView extends GFXObject {
        readonly texture: GFXTexture;
        readonly type: GFXTextureViewType;
        readonly format: GFXFormat;
        readonly baseLevel: number;
        readonly levelCount: number;
        readonly baseLayer: number;
        readonly layerCount: number;
        protected _device: GFXDevice;
        protected _texture: GFXTexture | null;
        protected _type: GFXTextureViewType;
        protected _format: GFXFormat;
        protected _baseLevel: number;
        protected _levelCount: number;
        protected _baseLayer: number;
        protected _layerCount: number;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXTextureViewInfo): boolean;
        abstract destroy(): void;
    }
}
declare module "cocos/gfx/binding-layout" {
    import { GFXBuffer } from "cocos/gfx/buffer";
    import { GFXBindingType, GFXObject } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXSampler } from "cocos/gfx/sampler";
    import { GFXTextureView } from "cocos/gfx/texture-view";
    export interface IGFXBinding {
        binding: number;
        type: GFXBindingType;
        name: string;
    }
    export interface IGFXBindingLayoutInfo {
        bindings: IGFXBinding[];
    }
    export class GFXBindingUnit {
        binding: number;
        type: GFXBindingType;
        name: string;
        buffer: GFXBuffer | null;
        texView: GFXTextureView | null;
        sampler: GFXSampler | null;
    }
    export abstract class GFXBindingLayout extends GFXObject {
        protected _device: GFXDevice;
        protected _bindingUnits: GFXBindingUnit[];
        protected _isDirty: boolean;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXBindingLayoutInfo): boolean;
        abstract destroy(): any;
        abstract update(): any;
        bindBuffer(binding: number, buffer: GFXBuffer): void;
        bindSampler(binding: number, sampler: GFXSampler): void;
        bindTextureView(binding: number, texView: GFXTextureView): void;
        getBindingUnit(binding: number): GFXBindingUnit | null;
    }
}
declare module "cocos/gfx/command-allocator" {
    import { GFXObject } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    export interface IGFXCommandAllocatorInfo {
    }
    export abstract class GFXCommandAllocator extends GFXObject {
        protected _device: GFXDevice;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXCommandAllocatorInfo): boolean;
        abstract destroy(): any;
    }
}
declare module "cocos/gfx/render-pass" {
    import { GFXFormat, GFXLoadOp, GFXObject, GFXPipelineBindPoint, GFXStoreOp, GFXTextureLayout } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    export class GFXColorAttachment {
        format: GFXFormat;
        loadOp: GFXLoadOp;
        storeOp: GFXStoreOp;
        sampleCount: number;
        beginLayout: GFXTextureLayout;
        endLayout: GFXTextureLayout;
    }
    export class GFXDepthStencilAttachment {
        format: GFXFormat;
        depthLoadOp: GFXLoadOp;
        depthStoreOp: GFXStoreOp;
        stencilLoadOp: GFXLoadOp;
        stencilStoreOp: GFXStoreOp;
        sampleCount: number;
        beginLayout: GFXTextureLayout;
        endLayout: GFXTextureLayout;
    }
    export interface IGFXSubPassInfo {
        bindPoint: GFXPipelineBindPoint;
        inputs: number[];
        colors: number[];
        resolves: number[];
        depthStencil: number;
        preserves: number[];
    }
    export interface IGFXRenderPassInfo {
        colorAttachments?: GFXColorAttachment[];
        depthStencilAttachment?: GFXDepthStencilAttachment;
    }
    export abstract class GFXRenderPass extends GFXObject {
        protected _device: GFXDevice;
        protected _colorInfos: GFXColorAttachment[];
        protected _depthStencilInfo: GFXDepthStencilAttachment | null;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXRenderPassInfo): boolean;
        abstract destroy(): void;
    }
}
declare module "cocos/gfx/framebuffer" {
    import { GFXObject } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXRenderPass } from "cocos/gfx/render-pass";
    import { GFXTextureView } from "cocos/gfx/texture-view";
    export interface IGFXFramebufferInfo {
        renderPass: GFXRenderPass;
        colorViews: GFXTextureView[];
        depthStencilView: GFXTextureView | null;
        isOffscreen?: boolean;
    }
    export abstract class GFXFramebuffer extends GFXObject {
        readonly renderPass: GFXRenderPass | null;
        readonly colorViews: GFXTextureView[];
        readonly depthStencilView: GFXTextureView | null;
        readonly isOffscreen: boolean;
        protected _device: GFXDevice;
        protected _renderPass: GFXRenderPass | null;
        protected _colorViews: GFXTextureView[];
        protected _depthStencilView: GFXTextureView | null;
        protected _isOffscreen: boolean;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXFramebufferInfo): boolean;
        abstract destroy(): void;
    }
}
declare module "cocos/gfx/input-assembler" {
    import { GFXBuffer, GFXBufferSource, IGFXDrawInfo } from "cocos/gfx/buffer";
    import { GFXFormat, GFXObject } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    export interface IGFXAttribute {
        name: string;
        format: GFXFormat;
        isNormalized?: boolean;
        stream?: number;
        isInstanced?: boolean;
    }
    export interface IGFXInputAssemblerInfo {
        attributes: IGFXAttribute[];
        vertexBuffers: GFXBuffer[];
        indexBuffer?: GFXBuffer;
        indirectBuffer?: GFXBuffer;
    }
    export abstract class GFXInputAssembler extends GFXObject {
        readonly vertexBuffers: GFXBuffer[];
        readonly indexBuffer: GFXBuffer | null;
        readonly attributes: IGFXAttribute[];
        vertexCount: number;
        firstVertex: number;
        indexCount: number;
        firstIndex: number;
        vertexOffset: number;
        instanceCount: number;
        firstInstance: number;
        readonly isIndirect: boolean;
        readonly indirectBuffer: GFXBuffer | null;
        protected _device: GFXDevice;
        protected _attributes: IGFXAttribute[];
        protected _vertexBuffers: GFXBuffer[];
        protected _indexBuffer: GFXBuffer | null;
        protected _vertexCount: number;
        protected _firstVertex: number;
        protected _indexCount: number;
        protected _firstIndex: number;
        protected _vertexOffset: number;
        protected _instanceCount: number;
        protected _firstInstance: number;
        protected _isIndirect: boolean;
        protected _indirectBuffer: GFXBuffer | null;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXInputAssemblerInfo): boolean;
        abstract destroy(): void;
        getVertexBuffer(stream?: number): GFXBuffer | null;
        extractDrawInfo(drawInfo: IGFXDrawInfo): void;
        /**
         * update VB data on the fly.
         * @param vbuffer - an ArrayBuffer containing the full VB
         * @param attr - name of the attribute to update (default names are specified in GFXAttributeName)
         * @param data - the new VB attribute data to be uploaded
         * @example
         * // get VB array buffer from mesh, better to cache this somewhere convenient
         * const vbInfo = mesh.struct.vertexBundles[0].data;
         * const vbuffer = mesh.data.buffer.slice(vbInfo.offset, vbInfo.offset + vbInfo.length);
         * const submodel = someModelComponent.model.getSubModel(0);
         * // say the new positions is stored in 'data' as a plain array
         * submodel.inputAssembler.updateVertexBuffer(vbuffer, cc.GFXAttributeName.ATTR_POSITION, data);
         */
        updateVertexAttr(vbuffer: GFXBufferSource, attr: string, data: number[]): void;
        /**
         * update IB data on the fly.
         * need to call submodel.updateCommandBuffer after this if index count changed
         * @param ibuffer - an ArrayBuffer containing the full IB
         * @param data - the new IB data to be uploaded
         * @example
         * // get IB array buffer from mesh, better to cache this somewhere convenient
         * const ibInfo = mesh.struct.primitives[0].indices.range;
         * const ibuffer = mesh.data.buffer.slice(ibInfo.offset, ibInfo.offset + ibInfo.length);
         * const submodel = someModelComponent.model.getSubModel(0);
         * submodel.inputAssembler.updateIndexBuffer(ibuffer, [0, 1, 2]);
         * submodel.updateCommandBuffer(); // index count changed
         */
        updateIndexBuffer(ibuffer: GFXBufferSource, data: number[]): void;
    }
}
declare module "cocos/gfx/pipeline-layout" {
    import { GFXBindingLayout } from "cocos/gfx/binding-layout";
    import { GFXObject, GFXShaderType } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    export interface IGFXPushConstantRange {
        shaderType: GFXShaderType;
        offset: number;
        count: number;
    }
    export interface IGFXPipelineLayoutInfo {
        pushConstantsRanges?: IGFXPushConstantRange[];
        layouts: GFXBindingLayout[];
    }
    export abstract class GFXPipelineLayout extends GFXObject {
        readonly layouts: GFXBindingLayout[];
        protected _device: GFXDevice;
        protected _pushConstantsRanges: IGFXPushConstantRange[];
        protected _layouts: GFXBindingLayout[];
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXPipelineLayoutInfo): boolean;
        abstract destroy(): any;
    }
}
declare module "cocos/gfx/shader" {
    import { GFXObject, GFXShaderType, GFXType } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    export interface IGFXShaderMacro {
        macro: string;
        value: string;
    }
    export interface IGFXShaderStage {
        type: GFXShaderType;
        source: string;
        macros?: IGFXShaderMacro[];
    }
    export class GFXUniform {
        name: string;
        type: GFXType;
        count: number;
    }
    export class GFXUniformBlock {
        binding: number;
        name: string;
        members: GFXUniform[];
    }
    export class GFXUniformSampler {
        binding: number;
        name: string;
        type: GFXType;
        count: number;
    }
    export interface IGFXShaderInfo {
        name: string;
        stages: IGFXShaderStage[];
        blocks?: GFXUniformBlock[];
        samplers?: GFXUniformSampler[];
    }
    export abstract class GFXShader extends GFXObject {
        readonly id: number;
        protected _device: GFXDevice;
        protected _id: number;
        protected _name: string;
        protected _stages: IGFXShaderStage[];
        protected _blocks: GFXUniformBlock[];
        protected _samplers: GFXUniformSampler[];
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXShaderInfo): boolean;
        abstract destroy(): any;
        readonly name: string;
    }
}
declare module "cocos/gfx/pipeline-state" {
    import { GFXBlendFactor, GFXBlendOp, GFXColorMask, GFXComparisonFunc, GFXCullMode, GFXDynamicState, GFXObject, GFXPolygonMode, GFXPrimitiveMode, GFXShadeModel, GFXStencilOp } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { IGFXAttribute } from "cocos/gfx/input-assembler";
    import { GFXPipelineLayout } from "cocos/gfx/pipeline-layout";
    import { GFXRenderPass } from "cocos/gfx/render-pass";
    import { GFXShader } from "cocos/gfx/shader";
    export class GFXRasterizerState {
        isDiscard: boolean;
        polygonMode: GFXPolygonMode;
        shadeModel: GFXShadeModel;
        cullMode: GFXCullMode;
        isFrontFaceCCW: boolean;
        depthBias: number;
        depthBiasClamp: number;
        depthBiasSlop: number;
        isDepthClip: boolean;
        isMultisample: boolean;
        lineWidth: number;
        compare(state: GFXRasterizerState): boolean;
    }
    export class GFXDepthStencilState {
        depthTest: boolean;
        depthWrite: boolean;
        depthFunc: GFXComparisonFunc;
        stencilTestFront: boolean;
        stencilFuncFront: GFXComparisonFunc;
        stencilReadMaskFront: number;
        stencilWriteMaskFront: number;
        stencilFailOpFront: GFXStencilOp;
        stencilZFailOpFront: GFXStencilOp;
        stencilPassOpFront: GFXStencilOp;
        stencilRefFront: number;
        stencilTestBack: boolean;
        stencilFuncBack: GFXComparisonFunc;
        stencilReadMaskBack: number;
        stencilWriteMaskBack: number;
        stencilFailOpBack: GFXStencilOp;
        stencilZFailOpBack: GFXStencilOp;
        stencilPassOpBack: GFXStencilOp;
        stencilRefBack: number;
        compare(state: GFXDepthStencilState): boolean;
    }
    export class GFXBlendTarget {
        blend: boolean;
        blendSrc: GFXBlendFactor;
        blendDst: GFXBlendFactor;
        blendEq: GFXBlendOp;
        blendSrcAlpha: GFXBlendFactor;
        blendDstAlpha: GFXBlendFactor;
        blendAlphaEq: GFXBlendOp;
        blendColorMask: GFXColorMask;
        compare(state: GFXBlendTarget): boolean;
    }
    export class GFXBlendState {
        isA2C: boolean;
        isIndepend: boolean;
        blendColor: number[];
        targets: GFXBlendTarget[];
    }
    export class GFXInputState {
        attributes: IGFXAttribute[];
    }
    export interface IGFXPipelineStateInfo {
        primitive: GFXPrimitiveMode;
        shader: GFXShader;
        is: GFXInputState;
        rs: GFXRasterizerState;
        dss: GFXDepthStencilState;
        bs: GFXBlendState;
        dynamicStates?: GFXDynamicState[];
        layout: GFXPipelineLayout;
        renderPass: GFXRenderPass;
    }
    export abstract class GFXPipelineState extends GFXObject {
        readonly shader: GFXShader;
        readonly primitive: GFXPrimitiveMode;
        readonly rasterizerState: GFXRasterizerState;
        readonly depthStencilState: GFXDepthStencilState;
        readonly blendState: GFXBlendState;
        readonly dynamicStates: GFXDynamicState[];
        readonly pipelineLayout: GFXPipelineLayout;
        readonly renderPass: GFXRenderPass;
        protected _device: GFXDevice;
        protected _shader: GFXShader | null;
        protected _primitive: GFXPrimitiveMode;
        protected _is: GFXInputState | null;
        protected _rs: GFXRasterizerState | null;
        protected _dss: GFXDepthStencilState | null;
        protected _bs: GFXBlendState | null;
        protected _dynamicStates: GFXDynamicState[];
        protected _layout: GFXPipelineLayout | null;
        protected _renderPass: GFXRenderPass | null;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXPipelineStateInfo): boolean;
        abstract destroy(): void;
    }
}
declare module "cocos/gfx/command-buffer" {
    import { GFXBindingLayout } from "cocos/gfx/binding-layout";
    import { GFXBuffer } from "cocos/gfx/buffer";
    import { GFXCommandAllocator } from "cocos/gfx/command-allocator";
    import { GFXBufferTextureCopy, GFXCommandBufferType, GFXObject, GFXStencilFace, GFXTextureLayout, IGFXColor, IGFXRect, IGFXViewport, GFXClearFlag } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXFramebuffer } from "cocos/gfx/framebuffer";
    import { GFXInputAssembler } from "cocos/gfx/input-assembler";
    import { GFXPipelineState } from "cocos/gfx/pipeline-state";
    import { GFXTexture } from "cocos/gfx/texture";
    export interface IGFXCommandBufferInfo {
        allocator: GFXCommandAllocator;
        type: GFXCommandBufferType;
    }
    export interface IGFXDepthBias {
        constantFactor: number;
        clamp: number;
        slopeFactor: number;
    }
    export interface IGFXDepthBounds {
        minBounds: number;
        maxBounds: number;
    }
    export interface IGFXStencilWriteMask {
        face: GFXStencilFace;
        writeMask: number;
    }
    export interface IGFXStencilCompareMask {
        face: GFXStencilFace;
        reference: number;
        compareMask: number;
    }
    export abstract class GFXCommandBuffer extends GFXObject {
        readonly type: GFXCommandBufferType;
        readonly numDrawCalls: number;
        readonly numTris: number;
        protected _device: GFXDevice;
        protected _allocator: GFXCommandAllocator | null;
        protected _type: GFXCommandBufferType;
        protected _numDrawCalls: number;
        protected _numTris: number;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXCommandBufferInfo): boolean;
        abstract destroy(): any;
        abstract begin(): any;
        abstract end(): any;
        abstract beginRenderPass(framebuffer: GFXFramebuffer, renderArea: IGFXRect, clearFlag: GFXClearFlag, clearColors: IGFXColor[], clearDepth: number, clearStencil: number): any;
        abstract endRenderPass(): any;
        abstract bindPipelineState(pipelineState: GFXPipelineState): any;
        abstract bindBindingLayout(bindingLayout: GFXBindingLayout): any;
        abstract bindInputAssembler(inputAssembler: GFXInputAssembler): any;
        abstract setViewport(viewport: IGFXViewport): any;
        abstract setScissor(scissor: IGFXRect): any;
        abstract setLineWidth(lineWidth: number): any;
        abstract setDepthBias(depthBiasConstantFacotr: number, depthBiasClamp: number, depthBiasSlopeFactor: number): any;
        abstract setBlendConstants(blendConstants: number[]): any;
        abstract setDepthBound(minDepthBounds: number, maxDepthBounds: number): any;
        abstract setStencilWriteMask(face: GFXStencilFace, writeMask: number): any;
        abstract setStencilCompareMask(face: GFXStencilFace, reference: number, compareMask: number): any;
        abstract draw(inputAssembler: GFXInputAssembler): any;
        abstract updateBuffer(buffer: GFXBuffer, data: ArrayBuffer, offset?: number): any;
        abstract copyBufferToTexture(srcBuff: GFXBuffer, dstTex: GFXTexture, dstLayout: GFXTextureLayout, regions: GFXBufferTextureCopy[]): any;
        abstract execute(cmdBuffs: GFXCommandBuffer[], count: number): any;
    }
}
declare module "cocos/gfx/queue" {
    import { GFXCommandBuffer } from "cocos/gfx/command-buffer";
    import { GFXObject, GFXQueueType } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    export interface IGFXQueueInfo {
        type: GFXQueueType;
    }
    export abstract class GFXQueue extends GFXObject {
        readonly type: number;
        protected _device: GFXDevice;
        protected _type: GFXQueueType;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXQueueInfo): boolean;
        abstract destroy(): any;
        abstract submit(cmdBuffs: GFXCommandBuffer[], fence?: any): any;
    }
}
declare module "cocos/gfx/window" {
    import { GFXFormat, GFXObject } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXFramebuffer } from "cocos/gfx/framebuffer";
    import { GFXRenderPass } from "cocos/gfx/render-pass";
    import { GFXTexture } from "cocos/gfx/texture";
    import { GFXTextureView } from "cocos/gfx/texture-view";
    export interface IGFXWindowInfo {
        title?: string;
        left?: number;
        top?: number;
        width: number;
        height: number;
        colorFmt: GFXFormat;
        depthStencilFmt: GFXFormat;
        isOffscreen?: boolean;
    }
    export abstract class GFXWindow extends GFXObject {
        readonly width: number;
        readonly height: number;
        readonly colorFormat: GFXFormat;
        readonly detphStencilFormat: GFXFormat;
        readonly renderPass: GFXRenderPass;
        readonly colorTexView: GFXTextureView | null;
        readonly depthStencilTexView: GFXTextureView | null;
        readonly framebuffer: GFXFramebuffer;
        protected _device: GFXDevice;
        protected _title: string;
        protected _left: number;
        protected _top: number;
        protected _width: number;
        protected _height: number;
        protected _nativeWidth: number;
        protected _nativeHeight: number;
        protected _colorFmt: GFXFormat;
        protected _depthStencilFmt: GFXFormat;
        protected _isOffscreen: boolean;
        protected _renderPass: GFXRenderPass | null;
        protected _colorTex: GFXTexture | null;
        protected _colorTexView: GFXTextureView | null;
        protected _depthStencilTex: GFXTexture | null;
        protected _depthStencilTexView: GFXTextureView | null;
        protected _framebuffer: GFXFramebuffer | null;
        constructor(device: GFXDevice);
        abstract initialize(info: IGFXWindowInfo): boolean;
        abstract destroy(): any;
        abstract resize(width: number, height: number): any;
    }
}
declare module "cocos/gfx/device" {
    import { GFXBindingLayout, IGFXBindingLayoutInfo } from "cocos/gfx/binding-layout";
    import { GFXBuffer, IGFXBufferInfo } from "cocos/gfx/buffer";
    import { GFXCommandAllocator, IGFXCommandAllocatorInfo } from "cocos/gfx/command-allocator";
    import { GFXCommandBuffer, IGFXCommandBufferInfo } from "cocos/gfx/command-buffer";
    import { GFXBufferTextureCopy, GFXFilter, GFXFormat, IGFXRect } from "cocos/gfx/define";
    import { GFXFramebuffer, IGFXFramebufferInfo } from "cocos/gfx/framebuffer";
    import { GFXInputAssembler, IGFXInputAssemblerInfo } from "cocos/gfx/input-assembler";
    import { GFXPipelineLayout, IGFXPipelineLayoutInfo } from "cocos/gfx/pipeline-layout";
    import { GFXPipelineState, IGFXPipelineStateInfo } from "cocos/gfx/pipeline-state";
    import { GFXQueue, IGFXQueueInfo } from "cocos/gfx/queue";
    import { GFXRenderPass, IGFXRenderPassInfo } from "cocos/gfx/render-pass";
    import { GFXSampler, IGFXSamplerInfo } from "cocos/gfx/sampler";
    import { GFXShader, IGFXShaderInfo } from "cocos/gfx/shader";
    import { GFXTexture, IGFXTextureInfo } from "cocos/gfx/texture";
    import { GFXTextureView, IGFXTextureViewInfo } from "cocos/gfx/texture-view";
    import { GFXWindow, IGFXWindowInfo } from "cocos/gfx/window";
    export enum GFXAPI {
        UNKNOWN = 0,
        WEBGL = 1,
        WEBGL2 = 2
    }
    export enum GFXFeature {
        COLOR_FLOAT = 0,
        COLOR_HALF_FLOAT = 1,
        TEXTURE_FLOAT = 2,
        TEXTURE_HALF_FLOAT = 3,
        TEXTURE_FLOAT_LINEAR = 4,
        TEXTURE_HALF_FLOAT_LINEAR = 5,
        FORMAT_R11G11B10F = 6,
        FORMAT_D24S8 = 7,
        FORMAT_ETC1 = 8,
        FORMAT_ETC2 = 9,
        FORMAT_DXT = 10,
        FORMAT_PVRTC = 11,
        MSAA = 12,
        COUNT = 13
    }
    export interface IGFXDeviceInfo {
        canvasElm: HTMLElement;
        isAntialias?: boolean;
        isPremultipliedAlpha?: boolean;
        debug?: boolean;
        devicePixelRatio?: number;
        nativeWidth?: number;
        nativeHeight?: number;
    }
    export abstract class GFXDevice {
        readonly canvas: HTMLCanvasElement;
        readonly canvas2D: HTMLCanvasElement;
        readonly gfxAPI: GFXAPI;
        readonly queue: GFXQueue;
        readonly devicePixelRatio: number;
        readonly width: number;
        readonly height: number;
        readonly nativeWidth: number;
        readonly nativeHeight: number;
        readonly mainWindow: GFXWindow;
        readonly commandAllocator: GFXCommandAllocator;
        readonly renderer: string;
        readonly vendor: string;
        readonly maxVertexAttributes: number;
        readonly maxVertexUniformVectors: number;
        readonly maxFragmentUniformVectors: number;
        readonly maxTextureUnits: number;
        readonly maxVertexTextureUnits: number;
        readonly maxUniformBufferBindings: number;
        readonly maxUniformBlockSize: number;
        readonly maxCombinedUniformBlocks: number;
        readonly depthBits: number;
        readonly stencilBits: number;
        readonly colorFormat: GFXFormat;
        readonly depthStencilFormat: GFXFormat;
        readonly macros: Map<string, string>;
        readonly numDrawCalls: number;
        readonly numTris: number;
        protected _canvas: HTMLCanvasElement | null;
        protected _canvas2D: HTMLCanvasElement | null;
        protected _gfxAPI: GFXAPI;
        protected _deviceName: string;
        protected _renderer: string;
        protected _vendor: string;
        protected _version: string;
        protected _features: boolean[];
        protected _queue: GFXQueue | null;
        protected _devicePixelRatio: number;
        protected _width: number;
        protected _height: number;
        protected _nativeWidth: number;
        protected _nativeHeight: number;
        protected _mainWindow: GFXWindow | null;
        protected _cmdAllocator: GFXCommandAllocator | null;
        protected _maxVertexAttributes: number;
        protected _maxVertexUniformVectors: number;
        protected _maxFragmentUniformVectors: number;
        protected _maxTextureUnits: number;
        protected _maxVertexTextureUnits: number;
        protected _maxUniformBufferBindings: number;
        protected _maxUniformBlockSize: number;
        protected _maxCombinedUniformBlocks: number;
        protected _depthBits: number;
        protected _stencilBits: number;
        protected _colorFmt: GFXFormat;
        protected _depthStencilFmt: GFXFormat;
        protected _shaderIdGen: number;
        protected _macros: Map<string, string>;
        protected _numDrawCalls: number;
        protected _numTris: number;
        abstract initialize(info: IGFXDeviceInfo): boolean;
        abstract destroy(): void;
        abstract resize(width: number, height: number): any;
        abstract createBuffer(info: IGFXBufferInfo): GFXBuffer;
        abstract createTexture(info: IGFXTextureInfo): GFXTexture;
        abstract createTextureView(info: IGFXTextureViewInfo): GFXTextureView;
        abstract createSampler(info: IGFXSamplerInfo): GFXSampler;
        abstract createBindingLayout(info: IGFXBindingLayoutInfo): GFXBindingLayout;
        abstract createShader(info: IGFXShaderInfo): GFXShader;
        abstract createInputAssembler(info: IGFXInputAssemblerInfo): GFXInputAssembler;
        abstract createRenderPass(info: IGFXRenderPassInfo): GFXRenderPass;
        abstract createFramebuffer(info: IGFXFramebufferInfo): GFXFramebuffer;
        abstract createPipelineLayout(info: IGFXPipelineLayoutInfo): GFXPipelineLayout;
        abstract createPipelineState(info: IGFXPipelineStateInfo): GFXPipelineState;
        abstract createCommandAllocator(info: IGFXCommandAllocatorInfo): GFXCommandAllocator;
        abstract createCommandBuffer(info: IGFXCommandBufferInfo): GFXCommandBuffer;
        abstract createQueue(info: IGFXQueueInfo): GFXQueue;
        abstract createWindow(info: IGFXWindowInfo): GFXWindow;
        abstract present(): any;
        abstract copyBuffersToTexture(buffers: ArrayBuffer[], texture: GFXTexture, regions: GFXBufferTextureCopy[]): any;
        abstract copyTexImagesToTexture(texImages: TexImageSource[], texture: GFXTexture, regions: GFXBufferTextureCopy[]): any;
        abstract copyFramebufferToBuffer(srcFramebuffer: GFXFramebuffer, dstBuffer: ArrayBuffer, regions: GFXBufferTextureCopy[]): any;
        abstract blitFramebuffer(src: GFXFramebuffer, dst: GFXFramebuffer, srcRect: IGFXRect, dstRect: IGFXRect, filter: GFXFilter): any;
        hasFeature(feature: GFXFeature): boolean;
        genShaderId(): number;
        defineMacro(macro: string, value?: string): void;
    }
}
declare module "cocos/assets/asset-enum" {
    /**
     * The texture pixel format, default value is RGBA8888,
     * you should note that textures loaded by normal image files (png, jpg) can only support RGBA8888 format,
     * other formats are supported by compressed file types or raw data.
     * @enum {number}
     */
    export enum PixelFormat {
        /**
         * 16-bit texture without Alpha channel
         */
        RGB565 = 46,
        /**
         * 16-bit textures: RGB5A1
         */
        RGB5A1 = 48,
        /**
         * 16-bit textures: RGBA4444
         */
        RGBA4444 = 49,
        /**
         * 24-bit texture: RGB888
         */
        RGB888 = 24,
        /**
         * 32-bit texture: RGBA8888
         */
        RGBA8888 = 35,
        /**
         * 32-bit float texture: RGBA32F
         */
        RGBA32F = 43,
        /**
         * 8-bit textures used as masks
         */
        A8 = 1,
        /**
         * 8-bit intensity texture
         */
        I8 = 2,
        /**
         * 16-bit textures used as masks
         */
        AI8 = 3,
        /**
         * rgb 2 bpp pvrtc
         */
        RGB_PVRTC_2BPPV1 = 86,
        /**
         * rgba 2 bpp pvrtc
         */
        RGBA_PVRTC_2BPPV1 = 87,
        /**
         * rgb 4 bpp pvrtc
         */
        RGB_PVRTC_4BPPV1 = 88,
        /**
         * rgba 4 bpp pvrtc
         */
        RGBA_PVRTC_4BPPV1 = 89,
        /**
         * rgb etc1
         */
        RGB_ETC1 = 75,
        /**
         * rgb etc2
         */
        RGB_ETC2 = 76,
        /**
         * rgba etc2
         */
        RGBA_ETC2 = 80
    }
    /**
     * The texture wrap mode.
     * @enum {number}
     */
    export enum WrapMode {
        /**
         * Specifies that the repeat warp mode will be used.
         */
        REPEAT = 0,
        /**
         * Specifies that the clamp to edge warp mode will be used.
         */
        CLAMP_TO_EDGE = 2,
        /**
         * Specifies that the mirrored repeat warp mode will be used.
         */
        MIRRORED_REPEAT = 1,
        /**
         * Specifies that the  clamp to border wrap mode will be used.
         */
        CLAMP_TO_BORDER = 3
    }
    /**
     * The texture filter mode
     * @enum {number}
     */
    export enum Filter {
        NONE = 0,
        /**
         * Specifies linear filtering.
         */
        LINEAR = 2,
        /**
         * Specifies nearest filtering.
         */
        NEAREST = 1
    }
}
declare module "cocos/assets/image-asset" {
    import { Asset } from "cocos/assets/asset";
    import { PixelFormat } from "cocos/assets/asset-enum";
    export interface IMemoryImageSource {
        _data: ArrayBufferView | null;
        _compressed: boolean;
        width: number;
        height: number;
        format: number;
    }
    export type ImageSource = HTMLCanvasElement | HTMLImageElement | IMemoryImageSource;
    /**
     * Class ImageAsset.
     */
    export class ImageAsset extends Asset {
        _nativeAsset: ImageSource;
        readonly data: ArrayBufferView | HTMLCanvasElement | HTMLImageElement | null;
        readonly width: number;
        readonly height: number;
        readonly format: PixelFormat;
        /**
         * !#en
         * The url of the texture, this could be empty if the texture wasn't created via a file.
         * !#zh
         * 图像文件的 url，当图像不是由文件创建时值可能为空
         */
        readonly url: string;
        private static extnames;
        private _nativeData;
        private _url;
        private _exportedExts;
        private _format;
        /**
         * @param nativeAsset
         */
        constructor(nativeAsset?: ImageSource);
        reset(data: ImageSource): void;
        _serialize(): string;
        _deserialize(data: string, handle: any): void;
        _onDataComplete(): void;
    }
}
declare module "cocos/renderer/core/sampler-lib" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXSampler } from "cocos/gfx/sampler";
    export enum SamplerInfoIndex {
        minFilter = 0,
        magFilter = 1,
        mipFilter = 2,
        addressU = 3,
        addressV = 4,
        addressW = 5,
        maxAnisotropy = 6,
        cmpFunc = 7,
        minLOD = 8,
        maxLOD = 9,
        mipLODBias = 10,
        borderColor = 11,
        total = 15
    }
    class SamplerLib {
        protected _cache: Record<string, GFXSampler>;
        getSampler(device: GFXDevice, info: number[]): GFXSampler;
    }
    export const samplerLib: SamplerLib;
}
declare module "cocos/assets/texture-base" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXTexture, IGFXTextureInfo } from "cocos/gfx/texture";
    import { GFXTextureView, IGFXTextureViewInfo } from "cocos/gfx/texture-view";
    import { Asset } from "cocos/assets/asset";
    import { Filter, PixelFormat, WrapMode } from "cocos/assets/asset-enum";
    import { ImageAsset } from "cocos/assets/image-asset";
    export class TextureBase extends Asset {
        /**
         * !#en
         * Texture width, in pixels.
         * For 2D texture, the width of texture is equal to its very first mipmap's width;
         * For Cubemap texture, the width of texture is equal to its every sides's very first mipmaps's width.
         * !#zh
         * 贴图像素宽度
         */
        readonly width: number;
        /**
         * !#en
         * Texture height, in pixels.
         * For 2D texture, the height of texture is equal to its very first mipmap's height;
         * For Cubemap texture, the height of texture is equal to its every sides's very first mipmaps's height.
         * !#zh
         * 贴图像素高度
         */
        readonly height: number;
        static PixelFormat: typeof PixelFormat;
        static WrapMode: typeof WrapMode;
        static Filter: typeof Filter;
        /**
         *
         * @param texture
         */
        static _isCompressed(texture: TextureBase): boolean;
        protected _format: number;
        protected _premultiplyAlpha: boolean;
        protected _flipY: boolean;
        protected _minFilter: number;
        protected _magFilter: number;
        protected _mipFilter: number;
        protected _wrapS: number;
        protected _wrapT: number;
        protected _wrapR: number;
        protected _anisotropy: number;
        protected _texture: GFXTexture | null;
        protected _textureView: GFXTextureView | null;
        private _potientialWidth;
        private _potientialHeight;
        private _mipmapLevel;
        private _id;
        private _samplerInfo;
        protected constructor(flipY?: boolean);
        create(width: number, height: number, format?: PixelFormat, mipmapLevel?: number): void;
        /**
         * Gets the underlying texture object.
         * @deprecated Use getGfxTexture() instead.
         */
        getImpl(): GFXTexture | null;
        getId(): string;
        /**
         * !#en
         * Pixel format of the texture.
         * !#zh 获取纹理的像素格式。
         * @return
         */
        getPixelFormat(): number;
        /**
         * !#en
         * Whether or not the texture has their Alpha premultiplied.
         * !#zh 检查纹理在上传 GPU 时预乘选项是否开启。
         * @return
         */
        hasPremultipliedAlpha(): boolean;
        /**
         * !#en Anisotropy of the texture.
         * !#zh 获取纹理的各向异性。
         * @return
         */
        getAnisotropy(): number;
        /**
         * !#en Sets the wrap s and wrap t options. <br/>
         * If the texture size is NPOT (non power of 2), then in can only use gl.CLAMP_TO_EDGE in gl.TEXTURE_WRAP_{S,T}.
         * !#zh 设置纹理包装模式。
         * 若纹理贴图尺寸是 NPOT（non power of 2），则只能使用 Texture2D.WrapMode.CLAMP_TO_EDGE。
         * @param wrapS
         * @param wrapT
         * @param wrapR
         */
        setWrapMode(wrapS: WrapMode, wrapT: WrapMode, wrapR?: WrapMode): void;
        /**
         * !#en Sets the minFilter and magFilter options
         * !#zh 设置纹理贴图缩小和放大过滤器算法选项。
         * @param minFilter
         * @param magFilter
         */
        setFilters(minFilter: Filter, magFilter: Filter): void;
        /**
         * !#en Sets the mipFilter options
         * !#zh 设置纹理Mipmap过滤算法选项。
         * @param mipFilter
         */
        setMipFilter(mipFilter: Filter): void;
        /**
         * !#en
         * Sets the flipY options
         * !#zh 设置贴图的纵向翻转选项。
         * @param flipY
         */
        setFlipY(flipY: boolean): void;
        /**
         * !#en
         * Sets the premultiply alpha options
         * !#zh 设置贴图的预乘选项。
         * @param premultiply
         */
        setPremultiplyAlpha(premultiply: boolean): void;
        /**
         * !#en Sets the anisotropy of the texture
         * !#zh 设置贴图的各向异性。
         * @param anisotropy
         */
        setAnisotropy(anisotropy: number): void;
        destroy(): boolean;
        getGFXTexture(): GFXTexture | null;
        getGFXTextureView(): GFXTextureView | null;
        getGFXSamplerInfo(): number[];
        /**
         * @return
         */
        _serialize(exporting?: any): any;
        /**
         *
         * @param data
         */
        _deserialize(serializedData: any, handle: any): void;
        /**
         * Updates mipmaps at level 0.
         */
        updateImage(): void;
        /**
         * Updates mipmaps at specified range of levels.
         * @param firstLevel The first level from which the sources update.
         * @description
         * If the range specified by [firstLevel, firstLevel + sources.length) exceeds
         * the actually range of mipmaps this texture contains, only overlaped mipmaps are updated.
         * Use this method if your mipmap data are modified.
         */
        updateMipmaps(firstLevel?: number, count?: number): void;
        ensureLoadImage(): void;
        protected _getGlobalDevice(): GFXDevice | null;
        protected _assignImage(image: ImageAsset, level: number, arrayIndex?: number): void;
        protected _uploadData(source: HTMLCanvasElement | HTMLImageElement | ArrayBuffer, level: number, arrayIndex?: number): void;
        protected _getTextureCreateInfo(): IGFXTextureInfo;
        protected _getTextureViewCreateInfo(): IGFXTextureViewInfo;
        protected _recreateTexture(): void;
        private _destroyTexture;
    }
}
declare module "cocos/assets/texture-util" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { ImageAsset, ImageSource } from "cocos/assets/image-asset";
    /**
     * cc.textureUtil is a singleton object, it can load cc.Texture2D asynchronously
     * @class textureUtil
     * @static
     */
    export function loadImage(url: string, cb: any, target: any): any;
    export function cacheImage(url: string, image: ImageSource): ImageAsset | undefined;
    export function postLoadImage(imageAsset: ImageAsset, callback?: Function): void;
}
declare module "cocos/assets/texture-2d" {
    import { ImageAsset } from "cocos/assets/image-asset";
    import { TextureBase } from "cocos/assets/texture-base";
    /**
     * Represents a 2-dimension texture.
     */
    export class Texture2D extends TextureBase {
        /**
         * Gets the mipmap images.
         * Note that the result do not contains the auto generated mipmaps.
         */
        /**
        * Sets the mipmaps images.
        */
        mipmaps: ImageAsset[];
        /**
         * Gets the mipmap image at level 0.
         */
        /**
        * Sets the mipmap images as a single mipmap image.
        */
        image: ImageAsset | null;
        _mipmaps: ImageAsset[];
        private _unfinished;
        constructor();
        onLoaded(): void;
        /**
         * Returns the string representation of this texture.
         */
        toString(): string;
        /**
         * Updates mipmaps at specified range of levels.
         * @param firstLevel The first level from which the sources update.
         * @description
         * If the range specified by [firstLevel, firstLevel + sources.length) exceeds
         * the actually range of mipmaps this texture contains, only overlaped mipmaps are updated.
         * Use this method if your mipmap data are modified.
         */
        updateMipmaps(firstLevel?: number, count?: number): void;
        directUpdate(source: HTMLImageElement | HTMLCanvasElement | ArrayBuffer, level?: number): void;
        /**
         * !#en
         * HTMLElement Object getter, available only on web.
         * !#zh 获取当前贴图对应的 HTML Image 或 Canvas 对象，只在 Web 平台下有效。
         * @method getHtmlElementObj
         * @return {HTMLImageElement|HTMLCanvasElement}
         * @deprecated Use this.image.data instead.
         */
        getHtmlElementObj(): HTMLCanvasElement | HTMLImageElement | null;
        /**
         * !#en
         * Destory this texture and immediately release its video memory. (Inherit from cc.Object.destroy)<br>
         * After destroy, this object is not usable any more.
         * You can use cc.isValid(obj) to check whether the object is destroyed before accessing it.
         * !#zh
         * 销毁该贴图，并立即释放它对应的显存。（继承自 cc.Object.destroy）<br/>
         * 销毁后，该对象不再可用。您可以在访问对象之前使用 cc.isValid(obj) 来检查对象是否已被销毁。
         */
        destroy(): boolean;
        /**
         * !#en
         * Description of cc.Texture2D.
         * !#zh cc.Texture2D 描述。
         */
        description(): string;
        /**
         * !#en
         * Release texture, please use destroy instead.
         * !#zh 释放纹理，请使用 destroy 替代。
         * @deprecated Since v2.0, use destroy instead.
         */
        releaseTexture(): void;
        _serialize(exporting?: any): any;
        _deserialize(serializedData: any, handle: any): void;
        /**
         * !#en If a loading scene (or prefab) is marked as `asyncLoadAssets`, all the image asset of the Texture2D which
         * associated by user's custom Components in the scene, will not preload automatically.
         * These image asset will be load when render component is going to render the Texture2D.
         * You can call this method if you want to load the texture early.
         * !#zh 当加载中的场景或 Prefab 被标记为 `asyncLoadAssets` 时，用户在场景中由自定义组件关联到的所有 Texture2D 的贴图都不会被提前加载。
         * 只有当 渲染 组件要渲染这些 Texture2D 时，才会检查贴图是否加载。如果你希望加载过程提前，你可以手工调用这个方法。
         *
         * @method ensureLoadImage
         * @example
         * if (texture.loaded) {
         *     this._onTextureLoaded();
         * }
         * else {
         *     texture.once('load', this._onTextureLoaded, this);
         *     texture.ensureLoadImage();
         * }
         */
        ensureLoadImage(): void;
        protected _onImageLoaded(): void;
        protected _assetReady(): void;
    }
    export interface ITexture2DSerializeData {
        base: string;
        mipmaps: string[];
    }
}
declare module "cocos/assets/sprite-frame" {
    import { Rect, Size, Vec2 } from "cocos/core/value-types/index";
    import { ImageAsset } from "cocos/assets/image-asset";
    import { Texture2D } from "cocos/assets/texture-2d";
    export interface IUV {
        u: number;
        v: number;
    }
    interface IVertices {
        x: any;
        y: any;
        triangles: any;
        nu: number[];
        u: number[];
        nv: number[];
        v: number[];
    }
    interface ISpriteFrameOriginal {
        texture: Texture2D;
        x: number;
        y: number;
    }
    /**
     * !#en
     * A cc.SpriteFrame has:<br/>
     *  - texture: A cc.Texture2D that will be used by render components<br/>
     *  - rectangle: A rectangle of the texture
     *
     * !#zh
     * 一个 SpriteFrame 包含：<br/>
     *  - 纹理：会被渲染组件使用的 Texture2D 对象。<br/>
     *  - 矩形：在纹理中的矩形区域。
     *
     * @class SpriteFrame
     * @extends Asset
     * @uses EventTarget
     * @example
     * // load a cc.SpriteFrame with image path (Recommend)
     * var self = this;
     * var url = "test assets/PurpleMonster";
     * cc.loader.loadRes(url, cc.SpriteFrame, function (err, spriteFrame) {
     *  var node = new cc.Node("New Sprite");
     *  var sprite = node.addComponent(cc.Sprite);
     *  sprite.spriteFrame = spriteFrame;
     *  node.parent = self.node
     * });
     */
    export class SpriteFrame extends Texture2D {
        /**
         * !#en Top border of the sprite
         * !#zh sprite 的顶部边框
         * @property insetTop
         * @type {Number}
         * @default 0
         */
        insetTop: number;
        /**
         * !#en Bottom border of the sprite
         * !#zh sprite 的底部边框
         * @property insetBottom
         * @type {Number}
         * @default 0
         */
        insetBottom: number;
        /**
         * !#en Left border of the sprite
         * !#zh sprite 的左边边框
         * @property insetLeft
         * @type {Number}
         * @default 0
         */
        insetLeft: number;
        /**
         * !#en Right border of the sprite
         * !#zh sprite 的左边边框
         * @property insetRight
         * @type {Number}
         * @default 0
         */
        insetRight: number;
        atlasUuid: string;
        readonly original: ISpriteFrameOriginal | null;
        vertices: IVertices | null;
        uv: number[];
        uvSliced: IUV[];
        private _rect;
        private _offset;
        private _originalSize;
        private _rotated;
        private _capInsets;
        private _original;
        private _atlasUuid;
        /**
         * !#en
         * Constructor of SpriteFrame class.
         * !#zh
         * SpriteFrame 类的构造函数。
         * @method constructor
         * @param {String|Texture2D} [filename]
         * @param {Rect} [rect]
         * @param {Boolean} [rotated] - Whether the frame is rotated in the texture
         * @param {Vec2} [offset] - The offset of the frame in the texture
         * @param {Size} [originalSize] - The size of the frame in the texture
         */
        constructor();
        /**
         * !#en Returns whether the texture have been loaded
         * !#zh 返回是否已加载纹理
         */
        textureLoaded(): boolean;
        /**
         * !#en Returns whether the sprite frame is rotated in the texture.
         * !#zh 获取 SpriteFrame 是否旋转
         */
        isRotated(): boolean;
        /**
         * !#en Set whether the sprite frame is rotated in the texture.
         * !#zh 设置 SpriteFrame 是否旋转
         * @param value
         */
        setRotated(rotated: boolean): void;
        /**
         * !#en Returns the rect of the sprite frame in the texture.
         * !#zh 获取 SpriteFrame 的纹理矩形区域
         */
        getRect(out?: Rect): Rect;
        /**
         * !#en Sets the rect of the sprite frame in the texture.
         * !#zh 设置 SpriteFrame 的纹理矩形区域
         */
        setRect(rect: Rect): void;
        /**
         * !#en Returns the original size of the trimmed image.
         * !#zh 获取修剪前的原始大小
         */
        getOriginalSize(out?: Size): Size;
        /**
         * !#en Sets the original size of the trimmed image.
         * !#zh 设置修剪前的原始大小
         */
        setOriginalSize(size: Size): void;
        _setBorder(l: number, b: number, r: number, t: number): void;
        /**
         * !#en Returns the texture of the frame.
         * !#zh 获取使用的纹理实例
         * @method getTexture
         * @return {Texture2D}
         */
        /**
         * !#en Returns the offset of the frame in the texture.
         * !#zh 获取偏移量
         */
        getOffset(out?: Vec2): Vec2;
        /**
         * !#en Sets the offset of the frame in the texture.
         * !#zh 设置偏移量
         * @param offsets
         */
        setOffset(offsets: Vec2): void;
        /**
         * !#en Clone the sprite frame.
         * !#zh 克隆 SpriteFrame
         * @method clone
         * @return {SpriteFrame}
         */
        clone(): SpriteFrame;
        checkRect(texture: ImageAsset): void;
        _calculateSlicedUV(): void;
        setDynamicAtlasFrame(frame: SpriteFrame): void;
        resetDynamicAtlasFrame(): void;
        _calculateUV(): void;
        _serialize(exporting?: any): any;
        _deserialize(serializeData: any, handle: any): void;
        protected _assetReady(): void;
    }
}
declare module "cocos/assets/sprite-atlas" {
    import { Asset } from "cocos/assets/asset";
    import { SpriteFrame } from "cocos/assets/sprite-frame";
    interface ISpriteFrameList {
        [key: string]: SpriteFrame | null;
    }
    export class SpriteAtlas extends Asset {
        spriteFrames: ISpriteFrameList;
        /**
         * Returns the texture of the sprite atlas
         * @method getTexture
         * @returns {Texture2D}
         */
        getTexture(): import("index").ImageAsset | null;
        /**
         * Returns the sprite frame correspond to the given key in sprite atlas.
         * @method getSpriteFrame
         * @param {String} key
         * @returns {SpriteFrame}
         */
        getSpriteFrame(key: string): SpriteFrame | null;
        /**
         * Returns the sprite frames in sprite atlas.
         * @method getSpriteFrames
         * @returns {[SpriteFrame]}
         */
        getSpriteFrames(): (SpriteFrame | null)[];
        _serialize(): {
            name: string;
            spriteFrames: string[];
        };
        _deserialize(serializeData: any, handle: any): void;
    }
}
declare module "cocos/assets/CCTextAsset" {
    import { Asset } from "cocos/assets/asset";
    /**
     * !#en Class for text file.
     * !#zh 文本资源类。
     * @class TextAsset
     * @extends Asset
     */
    export default class TextAsset extends Asset {
        /**
         * @property {String} text - The text contents of the resource.
         */
        text: string;
        /**
         * Returns the text content of the asset.
         *
         * JavaScript calls the toString() method automatically when an asset is to be represented as a text value or when a texture is referred to in a string concatenation.
         *
         * @method toString
         * @return {String}
         */
        toString(): string;
    }
}
declare module "cocos/assets/CCJsonAsset" {
    import { Asset } from "cocos/assets/asset";
    /**
     * !#en
     * Class for JSON file. When the JSON file is loaded, this object is returned.
     * The parsed JSON object can be accessed through the `json` attribute in it.<br>
     * If you want to get the original JSON text, you should modify the extname to `.txt`
     * so that it is loaded as a `TextAsset` instead of a `JsonAsset`.
     *
     * !#zh
     * JSON 资源类。JSON 文件加载后，将会返回该对象。可以通过其中的 `json` 属性访问解析后的 JSON 对象。<br>
     * 如果你想要获得 JSON 的原始文本，那么应该修改源文件的后缀为 `.txt`，这样就会加载为一个 `TextAsset` 而不是 `JsonAsset`。
     *
     * @class JsonAsset
     * @extends Asset
     */
    export default class JsonAsset extends Asset {
        /**
         * @property json - The loaded JSON object.
         */
        json: object | null;
    }
}
declare module "cocos/core/utils/decode-uuid" {
    export default function decodeUuid(base64: any): any;
}
declare module "cocos/core/utils/text-utils" {
    export function isUnicodeCJK(ch: string): boolean;
    export function isUnicodeSpace(ch: string): boolean;
    export function safeMeasureText(ctx: CanvasRenderingContext2D, string: string): number;
    export function fragmentText(stringToken: string, allWidth: number, maxWidth: number, measureText: (string: string) => number): string[];
}
declare module "cocos/load-pipeline/CCLoader" {
    import AssetLoader from "cocos/load-pipeline/asset-loader";
    import Downloader from "cocos/load-pipeline/downloader";
    import Loader from "cocos/load-pipeline/loader";
    import Pipeline from "cocos/load-pipeline/pipeline";
    /**
     * Loader for resource loading process. It's a singleton object.
     * @class loader
     * @extends Pipeline
     * @static
     */
    class CCLoader extends Pipeline {
        /**
         * Gets a new XMLHttpRequest instance.
         * @method getXMLHttpRequest
         * @returns {XMLHttpRequest}
         */
        getXMLHttpRequest: any;
        assetLoader: AssetLoader;
        md5Pipe: null;
        downloader: Downloader;
        loader: Loader;
        onProgress: null;
        _assetTables: any;
        private _autoReleaseSetting;
        private _releasedAssetChecker_DEBUG;
        private _ownerQueue;
        constructor();
        init(director: any): void;
        /**
         * Add custom supported types handler or modify existing type handler for download process.
         * @example
         *  cc.loader.addDownloadHandlers({
         *      // This will match all url with `.scene` extension or all url with `scene` type
         *      'scene' : function (url, callback) {}
         *  });
         * @method addDownloadHandlers
         * @param {Object} extMap Custom supported types with corresponded handler
         */
        addDownloadHandlers(extMap: any): void;
        /**
         * Add custom supported types handler or modify existing type handler for load process.
         * @example
         *  cc.loader.addLoadHandlers({
         *      // This will match all url with `.scene` extension or all url with `scene` type
         *      'scene' : function (url, callback) {}
         *  });
         * @method addLoadHandlers
         * @param {Object} extMap Custom supported types with corresponded handler
         */
        addLoadHandlers(extMap: any): void;
        /**
         * Load resources with a progression callback and a complete callback.
         * The progression callback is the same as Pipeline's {{#crossLink "LoadingItems/onProgress:method"}}onProgress{{/crossLink}}
         * The complete callback is almost the same as Pipeline's {{#crossLink "LoadingItems/onComplete:method"}}onComplete{{/crossLink}}
         * The only difference is when user pass a single url as resources, the complete callback will set its result directly as the second parameter.
         *
         * @example
         * cc.loader.load('a.png', function (err, tex) {
         *     cc.log('Result should be a texture: ' + (tex instanceof cc.Texture2D));
         * });
         *
         * cc.loader.load('http://example.com/a.png', function (err, tex) {
         *     cc.log('Should load a texture from external url: ' + (tex instanceof cc.Texture2D));
         * });
         *
         * cc.loader.load({url: 'http://example.com/getImageREST?file=a.png', type: 'png'}, function (err, tex) {
         *     cc.log('Should load a texture from RESTful API by specify the type: ' + (tex instanceof cc.Texture2D));
         * });
         *
         * cc.loader.load(['a.png', 'b.json'], function (errors, results) {
         *     if (errors) {
         *         for (var i = 0; i < errors.length; i++) {
         *             cc.log('Error url [' + errors[i] + ']: ' + results.getError(errors[i]));
         *         }
         *     }
         *     var aTex = results.getContent('a.png');
         *     var bJsonObj = results.getContent('b.json');
         * });
         *
         * @method load
         * @param {String|String[]|Object} resources - Url list in an array
         * @param {Function} [progressCallback] - Callback invoked when progression change
         * @param {Number} progressCallback.completedCount - The number of the items that are already completed
         * @param {Number} progressCallback.totalCount - The total number of the items
         * @param {Object} progressCallback.item - The latest item which flow out the pipeline
         * @param {Function} [completeCallback] - Callback invoked when all resources loaded
         * @typescript
         * load(resources: string|string[]|{uuid?: string, url?: string, type?: string}, completeCallback?: Function): void
         * load(resources: string|string[]|{uuid?: string, url?: string, type?: string}, progressCallback: (completedCount: number, totalCount: number, item: any) => void, completeCallback: Function|null): void
         */
        load(resources: any, progressCallback: any, completeCallback: any): any;
        flowInDeps(owner: any, urlList: any, callback: any): any[];
        /**
         * Load resources from the "resources" folder inside the "assets" folder of your project.<br>
         * <br>
         * Note: All asset URLs in Creator use forward slashes, URLs using backslashes will not work.
         *
         * @method loadRes
         * @param {String} url - Url of the target resource.
         *                       The url is relative to the "resources" folder, extensions must be omitted.
         * @param {Function} [type] - Only asset of type will be loaded if this argument is supplied.
         * @param {Function} [progressCallback] - Callback invoked when progression change.
         * @param {Number} progressCallback.completedCount - The number of the items that are already completed.
         * @param {Number} progressCallback.totalCount - The total number of the items.
         * @param {Object} progressCallback.item - The latest item which flow out the pipeline.
         * @param {Function} [completeCallback] - Callback invoked when the resource loaded.
         * @param {Error} completeCallback.error - The error info or null if loaded successfully.
         * @param {Object} completeCallback.resource - The loaded resource if it can be found otherwise returns null.
         *
         * @example
         *
         * // load the prefab (project/assets/resources/misc/character/cocos) from resources folder
         * cc.loader.loadRes('misc/character/cocos', function (err, prefab) {
         *     if (err) {
         *         cc.error(err.message || err);
         *         return;
         *     }
         *     cc.log('Result should be a prefab: ' + (prefab instanceof cc.Prefab));
         * });
         *
         * // load the sprite frame of (project/assets/resources/imgs/cocos.png) from resources folder
         * cc.loader.loadRes('imgs/cocos', cc.SpriteFrame, function (err, spriteFrame) {
         *     if (err) {
         *         cc.error(err.message || err);
         *         return;
         *     }
         *     cc.log('Result should be a sprite frame: ' + (spriteFrame instanceof cc.SpriteFrame));
         * });
         * @typescript
         * loadRes(url: string, type: typeof cc.Asset, progressCallback: (completedCount: number, totalCount: number, item: any) => void, completeCallback: ((error: Error, resource: any) => void)|null): void
         * loadRes(url: string, type: typeof cc.Asset, completeCallback: (error: Error, resource: any) => void): void
         * loadRes(url: string, type: typeof cc.Asset): void
         * loadRes(url: string, progressCallback: (completedCount: number, totalCount: number, item: any) => void, completeCallback: ((error: Error, resource: any) => void)|null): void
         * loadRes(url: string, completeCallback: (error: Error, resource: any) => void): void
         * loadRes(url: string): void
         */
        loadRes(url: any, type: any, mount: any, progressCallback: any, completeCallback: any): void;
        /**
         * Load all assets in a folder inside the "assets/resources" folder of your project.<br>
         * <br>
         * Note: All asset URLs in Creator use forward slashes, URLs using backslashes will not work.
         *
         * @method loadResDir
         * @param {String} url - Url of the target folder.
         *                       The url is relative to the "resources" folder, extensions must be omitted.
         * @param {Function} [type] - Only asset of type will be loaded if this argument is supplied.
         * @param {Function} [progressCallback] - Callback invoked when progression change.
         * @param {Number} progressCallback.completedCount - The number of the items that are already completed.
         * @param {Number} progressCallback.totalCount - The total number of the items.
         * @param {Object} progressCallback.item - The latest item which flow out the pipeline.
         * @param {Function} [completeCallback] - A callback which is called when all assets have been loaded, or an error occurs.
         * @param {Error} completeCallback.error - If one of the asset failed, the complete callback is immediately called
         *                                         with the error. If all assets are loaded successfully, error will be null.
         * @param {Asset[]|Array} completeCallback.assets - An array of all loaded assets.
         *                                             If nothing to load, assets will be an empty array.
         * @param {String[]} completeCallback.urls - An array that lists all the URLs of loaded assets.
         *
         * @example
         *
         * // load the texture (resources/imgs/cocos.png) and the corresponding sprite frame
         * cc.loader.loadResDir('imgs/cocos', function (err, assets) {
         *     if (err) {
         *         cc.error(err);
         *         return;
         *     }
         *     var texture = assets[0];
         *     var spriteFrame = assets[1];
         * });
         *
         * // load all textures in "resources/imgs/"
         * cc.loader.loadResDir('imgs', cc.Texture2D, function (err, textures) {
         *     var texture1 = textures[0];
         *     var texture2 = textures[1];
         * });
         *
         * // load all JSONs in "resources/data/"
         * cc.loader.loadResDir('data', function (err, objects, urls) {
         *     var data = objects[0];
         *     var url = urls[0];
         * });
         * @typescript
         * loadResDir(url: string, type: typeof cc.Asset, progressCallback: (completedCount: number, totalCount: number, item: any) => void, completeCallback: ((error: Error, resource: any[], urls: string[]) => void)|null): void
         * loadResDir(url: string, type: typeof cc.Asset, completeCallback: (error: Error, resource: any[], urls: string[]) => void): void
         * loadResDir(url: string, type: typeof cc.Asset): void
         * loadResDir(url: string, progressCallback: (completedCount: number, totalCount: number, item: any) => void, completeCallback: ((error: Error, resource: any[], urls: string[]) => void)|null): void
         * loadResDir(url: string, completeCallback: (error: Error, resource: any[], urls: string[]) => void): void
         * loadResDir(url: string): void
         */
        loadResDir(url: any, type: any, mount: any, progressCallback: any, completeCallback: any): void;
        /**
         * This method is like {{#crossLink "loader/loadRes:method"}}{{/crossLink}} except that it accepts array of url.
         *
         * @method loadResArray
         * @param {String[]} urls - Array of URLs of the target resource.
         *                          The url is relative to the "resources" folder, extensions must be omitted.
         * @param {Function} [type] - Only asset of type will be loaded if this argument is supplied.
         * @param {Function} [progressCallback] - Callback invoked when progression change.
         * @param {Number} progressCallback.completedCount - The number of the items that are already completed.
         * @param {Number} progressCallback.totalCount - The total number of the items.
         * @param {Object} progressCallback.item - The latest item which flow out the pipeline.
         * @param {Function} [completeCallback] - A callback which is called when all assets have been loaded, or an error occurs.
         * @param {Error} completeCallback.error - If one of the asset failed, the complete callback is immediately called
         *                                         with the error. If all assets are loaded successfully, error will be null.
         * @param {Asset[]|Array} completeCallback.assets - An array of all loaded assets.
         *                                                     If nothing to load, assets will be an empty array.
         * @example
         *
         * // load the SpriteFrames from resources folder
         * var spriteFrames;
         * var urls = ['misc/characters/character_01', 'misc/weapons/weapons_01'];
         * cc.loader.loadResArray(urls, cc.SpriteFrame, function (err, assets) {
         *     if (err) {
         *         cc.error(err);
         *         return;
         *     }
         *     spriteFrames = assets;
         *     // ...
         * });
         * @typescript
         * loadResArray(url: string[], type: typeof cc.Asset, progressCallback: (completedCount: number, totalCount: number, item: any) => void, completeCallback: ((error: Error, resource: any[]) => void)|null): void
         * loadResArray(url: string[], type: typeof cc.Asset, completeCallback: (error: Error, resource: any[]) => void): void
         * loadResArray(url: string[], type: typeof cc.Asset): void
         * loadResArray(url: string[], progressCallback: (completedCount: number, totalCount: number, item: any) => void, completeCallback: ((error: Error, resource: any[]) => void)|null): void
         * loadResArray(url: string[], completeCallback: (error: Error, resource: any[]) => void): void
         * loadResArray(url: string[]): void
         */
        loadResArray(urls: any, type: any, mount: any, progressCallback: any, completeCallback: any): void;
        /**
         * Get resource data by id. <br>
         * When you load resources with {{#crossLink "loader/load:method"}}{{/crossLink}} or {{#crossLink "loader/loadRes:method"}}{{/crossLink}},
         * the url will be the unique identity of the resource.
         * After loaded, you can acquire them by passing the url to this API.
         *
         * @method getRes
         * @param {String} url
         * @param {Function} [type] - Only asset of type will be returned if this argument is supplied.
         * @returns {*}
         */
        getRes(url: any, type: any): any;
        /**
         * Get total resources count in loader.
         * @returns {Number}
         */
        getResCount(): Number;
        /**
         * @en Get all resource dependencies of the requested asset in an array, including itself.
         * The owner parameter accept the following types: 1. The asset itself; 2. The resource url; 3. The asset's uuid.<br>
         * The returned array stores the dependencies with their uuids, after retrieve dependencies,
         * you can release them, access dependent assets by passing the uuid to {{#crossLink "loader/getRes:method"}}{{/crossLink}}, or other stuffs you want.<br>
         * For release all dependencies of an asset, please refer to {{#crossLink "loader/release:method"}}{{/crossLink}}
         * Here is some examples:
         * @zh 获取一个指定资源的所有依赖资源，包含它自身，并保存在数组中返回。owner 参数接收以下几种类型：1. 资源 asset 对象；2. 资源目录下的 url；3. 资源的 uuid。<br>
         * 返回的数组将仅保存依赖资源的 uuid，获取这些 uuid 后，你可以从 loader 释放这些资源；通过 {{#crossLink "loader/getRes:method"}}{{/crossLink}} 获取某个资源或者进行其他你需要的操作。<br>
         * 想要释放一个资源及其依赖资源，可以参考 {{#crossLink "loader/release:method"}}{{/crossLink}}。下面是一些示例代码：
         *
         * @example
         * // Release all dependencies of a loaded prefab
         * var deps = cc.loader.getDependsRecursively(prefab);
         * cc.loader.release(deps);
         * // Retrieve all dependent textures
         * var deps = cc.loader.getDependsRecursively('prefabs/sample');
         * var textures = [];
         * for (var i = 0; i < deps.length; ++i) {
         *     var item = cc.loader.getRes(deps[i]);
         *     if (item instanceof cc.Texture2D) {
         *         textures.push(item);
         *     }
         * }
         *
         * @method getDependsRecursively
         * @param {Asset|RawAsset|String} owner - The owner asset or the resource url or the asset's uuid
         * @returns {Array}
         */
        getDependsRecursively(owner: any): string[];
        /**
         * @en
         * Release the content of an asset or an array of assets by uuid.
         * Start from v1.3, this method will not only remove the cache of the asset in loader, but also clean up its content.
         * For example, if you release a texture, the texture asset and its gl texture data will be freed up.
         * In complexe project, you can use this function with {{#crossLink "loader/getDependsRecursively:method"}}{{/crossLink}} to free up memory in critical circumstances.
         * Notice, this method may cause the texture to be unusable, if there are still other nodes use the same texture, they may turn to black and report gl errors.
         * If you only want to remove the cache of an asset, please use {{#crossLink "pipeline/removeItem:method"}}{{/crossLink}}
         * @zh
         * 通过 id（通常是资源 url）来释放一个资源或者一个资源数组。
         * 从 v1.3 开始，这个方法不仅会从 loader 中删除资源的缓存引用，还会清理它的资源内容。
         * 比如说，当你释放一个 texture 资源，这个 texture 和它的 gl 贴图数据都会被释放。
         * 在复杂项目中，我们建议你结合 {{#crossLink "loader/getDependsRecursively:method"}}{{/crossLink}} 来使用，便于在设备内存告急的情况下更快地释放不再需要的资源的内存。
         * 注意，这个函数可能会导致资源贴图或资源所依赖的贴图不可用，如果场景中存在节点仍然依赖同样的贴图，它们可能会变黑并报 GL 错误。
         * 如果你只想删除一个资源的缓存引用，请使用 {{#crossLink "pipeline/removeItem:method"}}{{/crossLink}}
         *
         * @example
         * // Release a texture which is no longer need
         * cc.loader.release(texture);
         * // Release all dependencies of a loaded prefab
         * var deps = cc.loader.getDependsRecursively('prefabs/sample');
         * cc.loader.release(deps);
         * // If there is no instance of this prefab in the scene, the prefab and its dependencies like textures, sprite frames, etc, will be freed up.
         * // If you have some other nodes share a texture in this prefab, you can skip it in two ways:
         * // 1. Forbid auto release a texture before release
         * cc.loader.setAutoRelease(texture2d, false);
         * // 2. Remove it from the dependencies array
         * var deps = cc.loader.getDependsRecursively('prefabs/sample');
         * var index = deps.indexOf(texture2d._uuid);
         * if (index !== -1)
         *     deps.splice(index, 1);
         * cc.loader.release(deps);
         *
         * @method release
         * @param {Asset|RawAsset|String|Array} asset
         */
        release(asset: any): void;
        /**
         * @en Release the asset by its object. Refer to {{#crossLink "loader/release:method"}}{{/crossLink}} for detailed informations.
         * @zh 通过资源对象自身来释放资源。详细信息请参考 {{#crossLink "loader/release:method"}}{{/crossLink}}
         *
         * @method releaseAsset
         * @param {Asset} asset
         */
        releaseAsset(asset: any): void;
        /**
         * @en Release the asset loaded by {{#crossLink "loader/loadRes:method"}}{{/crossLink}}. Refer to {{#crossLink "loader/release:method"}}{{/crossLink}} for detailed informations.
         * @zh 释放通过 {{#crossLink "loader/loadRes:method"}}{{/crossLink}} 加载的资源。详细信息请参考 {{#crossLink "loader/release:method"}}{{/crossLink}}
         *
         * @method releaseRes
         * @param {String} url
         * @param {Function} [type] - Only asset of type will be released if this argument is supplied.
         */
        releaseRes(url: any, type: any, mount: any): void;
        /**
         * @en Release the all assets loaded by {{#crossLink "loader/loadResDir:method"}}{{/crossLink}}. Refer to {{#crossLink "loader/release:method"}}{{/crossLink}} for detailed informations.
         * @zh 释放通过 {{#crossLink "loader/loadResDir:method"}}{{/crossLink}} 加载的资源。详细信息请参考 {{#crossLink "loader/release:method"}}{{/crossLink}}
         *
         * @method releaseResDir
         * @param {String} url
         * @param {Function} [type] - Only asset of type will be released if this argument is supplied.
         */
        releaseResDir(url: any, type: any, mount: any): void;
        /**
         * @en Resource all assets. Refer to {{#crossLink "loader/release:method"}}{{/crossLink}} for detailed informations.
         * @zh 释放所有资源。详细信息请参考 {{#crossLink "loader/release:method"}}{{/crossLink}}
         *
         * @method releaseAll
         */
        releaseAll(): void;
        removeItem(key: any): boolean;
        /**
         * @en
         * Indicates whether to release the asset when loading a new scene.<br>
         * By default, when loading a new scene, all assets in the previous scene will be released or preserved
         * according to whether the previous scene checked the "Auto Release Assets" option.
         * On the other hand, assets dynamically loaded by using `cc.loader.loadRes` or `cc.loader.loadResDir`
         * will not be affected by that option, remain not released by default.<br>
         * Use this API to change the default behavior on a single asset, to force preserve or release specified asset when scene switching.<br>
         * <br>
         * See: {{#crossLink "loader/setAutoReleaseRecursively:method"}}cc.loader.setAutoReleaseRecursively{{/crossLink}}, {{#crossLink "loader/isAutoRelease:method"}}cc.loader.isAutoRelease{{/crossLink}}
         * @zh
         * 设置当场景切换时是否自动释放资源。<br>
         * 默认情况下，当加载新场景时，旧场景的资源根据旧场景是否勾选“Auto Release Assets”，将会被释放或者保留。
         * 而使用 `cc.loader.loadRes` 或 `cc.loader.loadResDir` 动态加载的资源，则不受场景设置的影响，默认不自动释放。<br>
         * 使用这个 API 可以在单个资源上改变这个默认行为，强制在切换场景时保留或者释放指定资源。<br>
         * <br>
         * 参考：{{#crossLink "loader/setAutoReleaseRecursively:method"}}cc.loader.setAutoReleaseRecursively{{/crossLink}}，{{#crossLink "loader/isAutoRelease:method"}}cc.loader.isAutoRelease{{/crossLink}}
         *
         * @example
         * // auto release the texture event if "Auto Release Assets" disabled in current scene
         * cc.loader.setAutoRelease(texture2d, true);
         * // don't release the texture even if "Auto Release Assets" enabled in current scene
         * cc.loader.setAutoRelease(texture2d, false);
         * // first parameter can be url
         * cc.loader.setAutoRelease(audioUrl, false);
         *
         * @method setAutoRelease
         * @param {Asset|String} assetOrUrlOrUuid - asset object or the raw asset's url or uuid
         * @param {Boolean} autoRelease - indicates whether should release automatically
         */
        setAutoRelease(assetOrUrlOrUuid: any, autoRelease: any): void;
        /**
         * @en
         * Indicates whether to release the asset and its referenced other assets when loading a new scene.<br>
         * By default, when loading a new scene, all assets in the previous scene will be released or preserved
         * according to whether the previous scene checked the "Auto Release Assets" option.
         * On the other hand, assets dynamically loaded by using `cc.loader.loadRes` or `cc.loader.loadResDir`
         * will not be affected by that option, remain not released by default.<br>
         * Use this API to change the default behavior on the specified asset and its recursively referenced assets, to force preserve or release specified asset when scene switching.<br>
         * <br>
         * See: {{#crossLink "loader/setAutoRelease:method"}}cc.loader.setAutoRelease{{/crossLink}}, {{#crossLink "loader/isAutoRelease:method"}}cc.loader.isAutoRelease{{/crossLink}}
         * @zh
         * 设置当场景切换时是否自动释放资源及资源引用的其它资源。<br>
         * 默认情况下，当加载新场景时，旧场景的资源根据旧场景是否勾选“Auto Release Assets”，将会被释放或者保留。
         * 而使用 `cc.loader.loadRes` 或 `cc.loader.loadResDir` 动态加载的资源，则不受场景设置的影响，默认不自动释放。<br>
         * 使用这个 API 可以在指定资源及资源递归引用到的所有资源上改变这个默认行为，强制在切换场景时保留或者释放指定资源。<br>
         * <br>
         * 参考：{{#crossLink "loader/setAutoRelease:method"}}cc.loader.setAutoRelease{{/crossLink}}，{{#crossLink "loader/isAutoRelease:method"}}cc.loader.isAutoRelease{{/crossLink}}
         *
         * @example
         * // auto release the SpriteFrame and its Texture event if "Auto Release Assets" disabled in current scene
         * cc.loader.setAutoReleaseRecursively(spriteFrame, true);
         * // don't release the SpriteFrame and its Texture even if "Auto Release Assets" enabled in current scene
         * cc.loader.setAutoReleaseRecursively(spriteFrame, false);
         * // don't release the Prefab and all the referenced assets
         * cc.loader.setAutoReleaseRecursively(prefab, false);
         *
         * @method setAutoReleaseRecursively
         * @param {Asset|String} assetOrUrlOrUuid - asset object or the raw asset's url or uuid
         * @param {Boolean} autoRelease - indicates whether should release automatically
         */
        setAutoReleaseRecursively(assetOrUrlOrUuid: any, autoRelease: any): void;
        /**
         * @en
         * Returns whether the asset is configured as auto released, despite how "Auto Release Assets" property is set on scene asset.<br>
         * <br>
         * See: {{#crossLink "loader/setAutoRelease:method"}}cc.loader.setAutoRelease{{/crossLink}}, {{#crossLink "loader/setAutoReleaseRecursively:method"}}cc.loader.setAutoReleaseRecursively{{/crossLink}}
         *
         * @zh
         * 返回指定的资源是否有被设置为自动释放，不论场景的“Auto Release Assets”如何设置。<br>
         * <br>
         * 参考：{{#crossLink "loader/setAutoRelease:method"}}cc.loader.setAutoRelease{{/crossLink}}，{{#crossLink "loader/setAutoReleaseRecursively:method"}}cc.loader.setAutoReleaseRecursively{{/crossLink}}
         * @method isAutoRelease
         * @param {Asset|String} assetOrUrl - asset object or the raw asset's url
         * @returns {Boolean}
         */
        isAutoRelease(assetOrUrl: any): boolean;
        _getResUuid(url: any, type: any, mount: any, quiet: any): any;
        private _getReferenceKey;
        private _urlNotFound;
        /**
         * @param {Function} [type]
         * @param {Function} [onProgress]
         * @param {Function} onComplete
         * @returns {Object} arguments
         * @returns {Function} arguments.type
         * @returns {Function} arguments.onProgress
         * @returns {Function} arguments.onComplete
         */
        private _parseLoadResArgs;
        private _loadResUuids;
    }
    const loader: CCLoader;
    export default loader;
}
declare module "cocos/assets/CCAssetLibrary" {
    const AssetLibrary: {
        /**
         * !#en Caches uuid to all loaded assets in scenes.
         *
         * !#zh 这里保存所有已经加载的场景资源，防止同一个资源在内存中加载出多份拷贝。
         *
         * 这里用不了WeakMap，在浏览器中所有加载过的资源都只能手工调用 unloadAsset 释放。
         *
         * 参考：
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap
         * https://github.com/TooTallNate/node-weak
         *
         * @property {object} _uuidToAsset
         * @private
         */
        _uuidToAsset: {};
        /**
         * @callback loadCallback
         * @param {String} error - null or the error info
         * @param {Asset} data - the loaded asset or null
         */
        /**
         * @method loadAsset
         * @param {String} uuid
         * @param {loadCallback} callback - the callback function once load finished
         * @param {Object} options
         * @param {Boolean} options.readMainCache - Default is true. If false, the asset and all its depends assets will reload and create new instances from library.
         * @param {Boolean} options.writeMainCache - Default is true. If true, the result will cache to AssetLibrary, and MUST be unload by user manually.
         * @param {Asset} options.existingAsset - load to existing asset, this argument is only available in editor
         * @private
         */
        loadAsset(uuid: any, callback: any, options: any): void;
        getLibUrlNoExt(uuid: any, inRawAssetsDir?: any): string;
        _queryAssetInfoInEditor(uuid: any, callback: any): void;
        _getAssetInfoInRuntime(uuid: any, result?: any): any;
        _uuidInSettings(uuid: any): boolean;
        /**
         * @method queryAssetInfo
         * @param {String} uuid
         * @param {Function} callback
         * @param {Error} callback.error
         * @param {String} callback.url - the url of raw asset or imported asset
         * @param {Boolean} callback.raw - indicates whether the asset is raw asset
         * @param {Function} callback.ctorInEditor - the actual type of asset, used in editor only
         */
        queryAssetInfo(uuid: any, callback: any): void;
        parseUuidInEditor(url: any): string | undefined;
        /**
         * @method loadJson
         * @param {String} json
         * @param {loadCallback} callback
         * @return {LoadingHandle}
         * @private
         */
        loadJson(json: any, callback: any): void;
        /**
         * Get the exists asset by uuid.
         *
         * @method getAssetByUuid
         * @param {String} uuid
         * @return {Asset} - the existing asset, if not loaded, just returns null.
         * @private
         */
        getAssetByUuid(uuid: any): any;
        /**
         * init the asset library
         *
         * @method init
         * @param {Object} options
         * @param {String} options.libraryPath - 能接收的任意类型的路径，通常在编辑器里使用绝对的，在网页里使用相对的。
         * @param {Object} options.mountPaths - mount point of actual urls for raw assets (only used in editor)
         * @param {Object} [options.rawAssets] - uuid to raw asset's urls (only used in runtime)
         * @param {String} [options.rawAssetsBase] - base of raw asset's urls (only used in runtime)
         * @param {String} [options.packedAssets] - packed assets (only used in runtime)
         */
        init(options: any): void;
    };
    export default AssetLibrary;
}
declare module "cocos/assets/font" {
    import { Asset } from "cocos/assets/asset";
    /**
     * !#en Class for Font handling.
     * !#zh 字体资源类。
     * @class Font
     * @extends Asset
     */
    export class Font extends Asset {
    }
}
declare module "cocos/assets/ttf-font" {
    import { Font } from "cocos/assets/font";
    /**
     * @module cc
     */
    /**
     * !#en Class for TTFFont handling.
     * !#zh TTF 字体资源类。
     * @class TTFFont
     * @extends Font
     *
     */
    export class TTFFont extends Font {
        _fontFamily: any;
        _nativeAsset: any;
    }
}
declare module "cocos/assets/bitmap-font" {
    import { Font } from "cocos/assets/font";
    import { SpriteFrame } from "cocos/assets/sprite-frame";
    export interface IConfig {
        [key: string]: any;
    }
    /**
     * !#en Class for BitmapFont handling.
     * !#zh 位图字体资源类。
     * @class BitmapFont
     * @extends Font
     */
    export class BitmapFont extends Font {
        fntDataStr: string;
        spriteFrame: SpriteFrame | null;
        fontSize: number;
        fntConfig: IConfig | null;
    }
}
declare module "cocos/assets/label-atlas" {
    import { BitmapFont } from "cocos/assets/bitmap-font";
    /**
     * @module cc
     */
    /**
     * !#en Class for LabelAtlas handling.
     * !#zh 艺术数字字体资源类。
     * @class LabelAtlas
     * @extends BitmapFont
     *
     */
    export class LabelAtlas extends BitmapFont {
    }
}
declare module "cocos/assets/index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export { RawAsset } from "cocos/assets/raw-asset";
    export { Asset } from "cocos/assets/asset";
    export { default as Prefab } from "cocos/assets/CCPrefab";
    export * from "cocos/assets/CCScripts";
    export { default as SceneAsset } from "cocos/assets/CCSceneAsset";
    export * from "cocos/assets/sprite-frame";
    export { SpriteAtlas } from "cocos/assets/sprite-atlas";
    export { default as TextAsset } from "cocos/assets/CCTextAsset";
    export { default as JsonAsset } from "cocos/assets/CCJsonAsset";
    export { default as AssetLibrary } from "cocos/assets/CCAssetLibrary";
    export { ImageAsset } from "cocos/assets/image-asset";
    export { Texture2D } from "cocos/assets/texture-2d";
    export { TTFFont } from "cocos/assets/ttf-font";
    export { LabelAtlas } from "cocos/assets/label-atlas";
    export { BitmapFont } from "cocos/assets/bitmap-font";
    export { Font } from "cocos/assets/font";
}
declare module "cocos/3d/misc/buffer-blob" {
    export class BufferBlob {
        private _arrayBufferOrPaddings;
        private _length;
        setNextAlignment(align: number): void;
        addBuffer(arrayBuffer: ArrayBuffer): number;
        getLength(): number;
        getCombined(): ArrayBuffer | SharedArrayBuffer;
    }
}
declare module "cocos/3d/assets/utils/buffer-view" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export interface IBufferView {
        offset: number;
        length: number;
        count: number;
        stride: number;
    }
}
declare module "cocos/3d/assets/mesh" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Asset } from "cocos/assets/asset";
    import { Vec3 } from "cocos/core/value-types/index";
    import { GFXBuffer } from "cocos/gfx/buffer";
    import { GFXAttributeName, GFXPrimitiveMode } from "cocos/gfx/define";
    import { IGFXAttribute } from "cocos/gfx/input-assembler";
    import { IBufferView } from "cocos/3d/assets/utils/buffer-view";
    export interface IVertexBundle {
        /**
         * The data view of this bundle.
         * This range of data is essentially mapped to a GPU vertex buffer.
         */
        view: IBufferView;
        /**
         * Attributes.
         */
        attributes: IGFXAttribute[];
    }
    /**
     * A primitive is a geometry constituted with a list of
     * same topology primitive graphic(such as points, lines or triangles).
     */
    export interface IPrimitive {
        /**
         * The vertex bundles that this primitive use.
         */
        vertexBundelIndices: number[];
        /**
         * This primitive's topology.
         */
        primitiveMode: GFXPrimitiveMode;
        indexView?: IBufferView;
        /**
         * Geometric info for raycast purposes.
         */
        geometricInfo?: {
            doubleSided?: boolean;
            view: IBufferView;
        };
    }
    /**
     * Describes a mesh.
     */
    export interface IMeshStruct {
        /**
         * The vertex bundles that this mesh owns.
         */
        vertexBundles: IVertexBundle[];
        /**
         * The primitives that this mesh owns.
         */
        primitives: IPrimitive[];
        /**
         * The min position of this mesh's vertices.
         */
        minPosition?: Vec3;
        /**
         * The max position of this mesh's vertices.
         */
        maxPosition?: Vec3;
    }
    export type IBArray = Uint8Array | Uint16Array | Uint32Array;
    export interface IGeometricInfo {
        positions: Float32Array;
        indices: IBArray;
        doubleSided?: boolean;
    }
    export interface IRenderingSubmesh {
        vertexBuffers: GFXBuffer[];
        indexBuffer: GFXBuffer | null;
        indirectBuffer?: GFXBuffer;
        attributes: IGFXAttribute[];
        primitiveMode: GFXPrimitiveMode;
        geometricInfo?: IGeometricInfo;
    }
    export class RenderingMesh {
        private _subMeshes;
        constructor(_subMeshes: IRenderingSubmesh[]);
        readonly subMeshes: IRenderingSubmesh[];
        readonly subMeshCount: number;
        getSubmesh(index: number): IRenderingSubmesh;
        clearSubMeshes(): void;
        destroy(): void;
    }
    export class Mesh extends Asset {
        _nativeAsset: ArrayBuffer;
        /**
         * Submeshes count of this mesh.
         * @deprecated Use this.renderingMesh.subMeshCount instead.
         */
        readonly subMeshCount: number;
        /**
         * Min position of this mesh.
         * @deprecated Use this.struct.minPosition instead.
         */
        readonly minPosition: Vec3 | undefined;
        /**
         * Max position of this mesh.
         * @deprecated Use this.struct.maxPosition instead.
         */
        readonly maxPosition: Vec3 | undefined;
        readonly struct: IMeshStruct;
        readonly data: Uint8Array | null;
        private _struct;
        private _data;
        private _initialized;
        private _renderingMesh;
        constructor();
        initialize(): void;
        /**
         * Destory this mesh and immediately release its GPU resources.
         */
        destroy(): any;
        destroyRenderingMesh(): void;
        /**
         * Assigns new mesh struct to this.
         * @param struct The new mesh's struct.
         * @param data The new mesh's data.
         */
        assign(struct: IMeshStruct, data: Uint8Array): void;
        /**
         * Gets the rendering mesh.
         */
        readonly renderingMesh: RenderingMesh;
        /**
         * !#en
         * Gets the specified submesh.
         * @param index Index of the specified submesh.
         * @deprecated Use this.renderingMesh.getSubmesh(index).inputAssembler instead.
         */
        getSubMesh(index: number): IRenderingSubmesh;
        merge(mesh: Mesh, validate?: boolean): boolean;
        validateMergingMesh(mesh: Mesh): boolean;
        readAttribute(primitiveIndex: number, attributeName: GFXAttributeName): Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | null;
        copyAttribute(primitiveIndex: number, attributeName: GFXAttributeName, buffer: ArrayBuffer, stride: number, offset: number): Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | null;
        readIndices(primitiveIndex: number): Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | null;
        copyIndices(primitiveIndex: number, typedArray: any): null | undefined;
        private _createVertexBuffers;
    }
}
declare module "cocos/3d/geom-utils/enums" {
    const _default: {
        SHAPE_RAY: number;
        SHAPE_LINE: number;
        SHAPE_SPHERE: number;
        SHAPE_AABB: number;
        SHAPE_OBB: number;
        SHAPE_PLANE: number;
        SHAPE_TRIANGLE: number;
        SHAPE_FRUSTUM: number;
        SHAPE_FRUSTUM_ACCURATE: number;
    };
    /**
     * Orders matter, it decides the priority when calling intersection functions
     */
    export default _default;
}
declare module "cocos/3d/geom-utils/aabb" {
    import { mat4, vec3 } from "cocos/core/vmath/index";
    export default class aabb {
        readonly type: number;
        /**
         * create a new aabb
         *
         * @param px - X coordinates for aabb's original point
         * @param py - Y coordinates for aabb's original point
         * @param pz - Z coordinates for aabb's original point
         * @param w - the half of aabb width
         * @param h - the half of aabb height
         * @param l - the half of aabb length
         * @returns the resulting aabb
         */
        static create(px?: number, py?: number, pz?: number, w?: number, h?: number, l?: number): aabb;
        /**
         * clone a new aabb
         *
         * @param a - the source aabb
         * @returns the cloned aabb
         */
        static clone(a: aabb): aabb;
        /**
         * copy the values from one aabb to another
         *
         * @param {aabb} out the receiving aabb
         * @param {aabb} a the source aabb
         * @return {aabb}
         */
        static copy(out: any, a: any): any;
        /**
         * create a new aabb from two corner points
         *
         * @param out - the receiving aabb
         * @param minPos - lower corner position of the aabb
         * @param maxPos - upper corner position of the aabb
         * @returns the resulting aabb
         */
        static fromPoints(out: aabb, minPos: vec3, maxPos: vec3): aabb;
        /**
         * Set the components of a aabb to the given values
         *
         * @param {aabb} out the receiving aabb
         * @param {number} px X coordinates for aabb's original point
         * @param {number} py Y coordinates for aabb's original point
         * @param {number} pz Z coordinates for aabb's original point
         * @param {number} w the half of aabb width
         * @param {number} h the half of aabb height
         * @param {number} l the half of aabb length
         * @return {aabb} out
         * @function
         */
        static set(out: any, px: any, py: any, pz: any, w: any, h: any, l: any): any;
        static merge(out: aabb, a: aabb, b: aabb): aabb;
        static transform(out: aabb, a: aabb, matrix: mat4): void;
        center: vec3;
        halfExtents: vec3;
        protected _type: number;
        constructor(px?: number, py?: number, pz?: number, w?: number, h?: number, l?: number);
        /**
         * Get the bounding points of this shape
         * @param {vec3} minPos
         * @param {vec3} maxPos
         */
        getBoundary(minPos: vec3, maxPos: vec3): void;
        /**
         * Transform this shape
         * @param m - the transform matrix
         * @param out - the target shape
         */
        transform(m: any, pos: any, rot: any, scale: any, out: any): void;
        clone(): aabb;
        copy(a: aabb): any;
    }
}
declare module "cocos/3d/geom-utils/obb" {
    import { mat3, mat4, quat, vec3 } from "cocos/core/vmath/index";
    export default class obb {
        /**
         * create a new obb
         *
         * @param px X coordinates for obb's original point
         * @param py Y coordinates for obb's original point
         * @param pz Z coordinates for obb's original point
         * @param hw the half of obb width
         * @param hh the half of obb height
         * @param hl the half of obb length
         * @param ox_1 orientation matrix coefficient
         * @param ox_2 orientation matrix coefficient
         * @param ox_3 orientation matrix coefficient
         * @param oy_1 orientation matrix coefficient
         * @param oy_2 orientation matrix coefficient
         * @param oy_3 orientation matrix coefficient
         * @param oz_1 orientation matrix coefficient
         * @param oz_2 orientation matrix coefficient
         * @param oz_3 orientation matrix coefficient
         * @return
         */
        static create(px: number, py: number, pz: number, hw: number, hh: number, hl: number, ox_1: number, ox_2: number, ox_3: number, oy_1: number, oy_2: number, oy_3: number, oz_1: number, oz_2: number, oz_3: number): obb;
        /**
         * clone a new obb
         *
         * @param a the source obb
         * @return
         */
        static clone(a: obb): obb;
        /**
         * copy the values from one obb to another
         *
         * @param out the receiving obb
         * @param a the source obb
         * @return
         */
        static copy(out: obb, a: obb): obb;
        /**
         * create a new obb from two corner points
         *
         * @param out the receiving obb
         * @param minPos lower corner position of the obb
         * @param maxPos upper corner position of the obb
         * @return
         */
        static fromPoints(out: obb, minPos: vec3, maxPos: vec3): obb;
        /**
         * Set the components of a obb to the given values
         *
         * @param out the receiving obb
         * @param px X coordinates for obb's original point
         * @param py Y coordinates for obb's original point
         * @param pz Z coordinates for obb's original point
         * @param hw the half of obb width
         * @param hh the half of obb height
         * @param hl the half of obb length
         * @param ox_1 orientation matrix coefficient
         * @param ox_2 orientation matrix coefficient
         * @param ox_3 orientation matrix coefficient
         * @param oy_1 orientation matrix coefficient
         * @param oy_2 orientation matrix coefficient
         * @param oy_3 orientation matrix coefficient
         * @param oz_1 orientation matrix coefficient
         * @param oz_2 orientation matrix coefficient
         * @param oz_3 orientation matrix coefficient
         * @return out
         */
        static set(out: obb, px: number, py: number, pz: number, hw: number, hh: number, hl: number, ox_1: number, ox_2: number, ox_3: number, oy_1: number, oy_2: number, oy_3: number, oz_1: number, oz_2: number, oz_3: number): obb;
        center: vec3;
        halfExtents: vec3;
        orientation: mat3;
        private _type;
        constructor(px?: number, py?: number, pz?: number, hw?: number, hh?: number, hl?: number, ox_1?: number, ox_2?: number, ox_3?: number, oy_1?: number, oy_2?: number, oy_3?: number, oz_1?: number, oz_2?: number, oz_3?: number);
        /**
         * Get the bounding points of this shape
         * @param minPos
         * @param maxPos
         */
        getBoundary(minPos: vec3, maxPos: vec3): void;
        /**
         * Transform this shape
         * @param m the transform matrix
         * @param pos the position part of the transform
         * @param rot the rotation part of the transform
         * @param scale the scale part of the transform
         * @param [out] the target shape
         */
        transform(m: mat4, pos: vec3, rot: quat, scale: vec3, out?: obb): void;
    }
}
declare module "cocos/3d/geom-utils/distance" {
    import { plane } from "cocos/3d/geom-utils/index";
    import { vec3 } from "cocos/core/vmath/index";
    import aabb from "cocos/3d/geom-utils/aabb";
    import obb from "cocos/3d/geom-utils/obb";
    /**
     * the distance between a point and a plane
     *
     * @param {vec3} point
     * @param {plane} plane
     * @return
     */
    export function point_plane(point: vec3, plane_: plane): number;
    /**
     * the closest point on plane to a given point
     *
     * @param out the result point
     * @param point
     * @param plane
     * @return
     */
    export function pt_point_plane(out: vec3, point: vec3, plane_: plane): vec3;
    /**
     * the closest point on aabb to a given point
     *
     * @param {vec3} out the result point
     * @param {vec3} point
     * @param {aabb} aabb
     * @return {vec3}
     */
    export let pt_point_aabb: (out: vec3, point: vec3, aabb_: aabb) => vec3;
    /**
     * the closest point on obb to a given point
     *
     * @param {vec3} out the result point
     * @param {vec3} point
     * @param {obb} obb
     * @return {vec3}
     */
    export let pt_point_obb: (out: vec3, point: vec3, obb_: obb) => vec3;
}
declare module "cocos/3d/geom-utils/intersect" {
    const intersect: {
        ray_sphere: (ray: any, sphere: any) => number;
        ray_aabb: (ray: any, aabb: any) => number;
        ray_obb: (ray: any, obb: any) => number;
        ray_plane: (ray: any, plane: any) => number;
        ray_triangle: (ray: any, triangle: any, doubleSided: any) => number;
        line_plane: (line: any, plane: any) => number;
        line_triangle: (line: any, triangle: any, outPt: any) => 1 | 0;
        line_quad: (p: any, q: any, a: any, b: any, c: any, d: any, outPt: any) => 1 | 0;
        sphere_sphere: (sphere0: any, sphere1: any) => boolean;
        sphere_aabb: (sphere: any, aabb: any) => boolean;
        sphere_obb: (sphere: any, obb: any) => boolean;
        sphere_plane: (sphere: any, plane: any) => 1 | -1 | 0;
        sphere_frustum: (sphere: any, frustum: any) => 1 | 0;
        sphere_frustum_accurate: (sphere: any, frustum: any) => 1 | 0;
        aabb_aabb: (aabb1: any, aabb2: any) => boolean;
        aabb_obb: (aabb: any, obb: any) => 1 | 0;
        aabb_plane: (aabb: any, plane: any) => 1 | -1 | 0;
        aabb_frustum: (aabb: any, frustum: any) => 1 | 0;
        aabb_frustum_accurate: (aabb: any, frustum: any) => 1 | 0;
        obb_obb: (obb1: any, obb2: any) => 1 | 0;
        obb_plane: (obb: any, plane: any) => 1 | -1 | 0;
        obb_frustum: (obb: any, frustum: any) => 1 | 0;
        obb_frustum_accurate: (obb: any, frustum: any) => 1 | 0;
        obb_point: (obb: any, point: any) => boolean;
        resolve(g1: any, g2: any, outPt?: null): any;
    };
    export default intersect;
}
declare module "cocos/3d/geom-utils/line" {
    import { vec3 } from "cocos/core/vmath/index";
    export default class line {
        /**
         * create a new line
         *
         * @param sx start X component
         * @param sy start Y component
         * @param sz start Z component
         * @param ex end X component
         * @param ey end Y component
         * @param ez end Z component
         * @return
         */
        static create(sx: number, sy: number, sz: number, ex: number, ey: number, ez: number): line;
        /**
         * Creates a new line initialized with values from an existing line
         *
         * @param a line to clone
         * @return a new line
         */
        static clone(a: line): line;
        /**
         * Copy the values from one line to another
         *
         * @param out the receiving line
         * @param a the source line
         * @return out
         */
        static copy(out: line, a: line): line;
        /**
         * create a line from two points
         *
         * @param out the receiving line
         * @param start line start
         * @param end target position
         * @return out
         */
        static fromPoints(out: line, start: vec3, end: vec3): line;
        /**
         * Set the components of a vec3 to the given values
         *
         * @param out the receiving vector
         * @param sx start X component
         * @param sy start Y component
         * @param sz start Z component
         * @param ex end X component
         * @param ey end Y component
         * @param ez end Z component
         * @return out
         */
        static set(out: line, sx: number, sy: number, sz: number, ex: number, ey: number, ez: number): line;
        /**
         * create line from 2 points
         *
         * @param a
         * @return
         */
        static magnitude(a: line): number;
        /**
         * Alias of {@link line.magnitude}.
         */
        static mag(a: line): number;
        s: vec3;
        e: vec3;
        private _type;
        constructor(sx?: number, sy?: number, sz?: number, ex?: number, ey?: number, ez?: number);
    }
}
declare module "cocos/3d/geom-utils/plane" {
    import { vec3, mat4 } from "cocos/core/vmath/index";
    export default class plane {
        /**
         * create a new plane
         *
         * @param nx normal X component
         * @param ny normal Y component
         * @param nz normal Z component
         * @param d distance to the origin
         * @return
         */
        static create(nx: number, ny: number, nz: number, d: number): plane;
        /**
         * clone a new plane
         *
         * @param p a the source plane
         * @return
         */
        static clone(p: plane): plane;
        /**
         * copy the values from one plane to another
         *
         * @param out the receiving plane
         * @param p the source plane
         * @return
         */
        static copy(out: plane, p: plane): plane;
        /**
         * create a plane from three points
         *
         * @param out the receiving plane
         * @param a
         * @param b
         * @param c
         * @return
         */
        static fromPoints(out: plane, a: vec3, b: vec3, c: vec3): plane;
        /**
         * Set the components of a plane to the given values
         *
         * @param out the receiving plane
         * @param nx X component of n
         * @param ny Y component of n
         * @param nz Z component of n
         * @param d
         * @return out
         */
        static set(out: plane, nx: number, ny: number, nz: number, d: number): plane;
        /**
         * create plane from normal and point
         *
         * @param out the receiving plane
         * @param normal
         * @param point
         * @return out
         */
        static fromNormalAndPoint(out: plane, normal: vec3, point: vec3): plane;
        /**
         * normalize a plane
         *
         * @param out the receiving plane
         * @param a plane to normalize
         * @return out
         */
        static normalize(out: plane, a: plane): plane;
        transform: (mat: mat4) => void;
        n: vec3;
        d: number;
        private _type;
        constructor(nx?: number, ny?: number, nz?: number, d?: number);
    }
}
declare module "cocos/3d/geom-utils/ray" {
    import { vec3 } from "cocos/core/vmath/index";
    export default class ray {
        /**
         * create a new ray
         *
         * @param {number} ox origin X component
         * @param {number} oy origin Y component
         * @param {number} oz origin Z component
         * @param {number} dx dir X component
         * @param {number} dy dir Y component
         * @param {number} dz dir Z component
         * @return {ray}
         */
        static create(ox?: number, oy?: number, oz?: number, dx?: number, dy?: number, dz?: number): ray;
        /**
         * Creates a new ray initialized with values from an existing ray
         *
         * @param {ray} a ray to clone
         * @return {ray} a new ray
         */
        static clone(a: any): ray;
        /**
         * Copy the values from one ray to another
         *
         * @param {ray} out the receiving ray
         * @param {ray} a the source ray
         * @return {ray} out
         */
        static copy(out: any, a: any): any;
        /**
         * create a ray from two points
         *
         * @param {ray} out the receiving ray
         * @param {vec3} origin ray origin
         * @param {vec3} target target position
         * @return {ray} out
         */
        static fromPoints(out: any, origin: any, target: any): any;
        /**
         * Set the components of a ray to the given values
         *
         * @param {ray} out the receiving ray
         * @param {number} ox origin X component
         * @param {number} oy origin Y component
         * @param {number} oz origin Z component
         * @param {number} dx dir X component
         * @param {number} dy dir Y component
         * @param {number} dz dir Z component
         * @return {ray} out
         */
        static set(out: any, ox: any, oy: any, oz: any, dx: any, dy: any, dz: any): any;
        o: vec3;
        d: vec3;
        private _type;
        constructor(ox?: number, oy?: number, oz?: number, dx?: number, dy?: number, dz?: number);
    }
}
declare module "cocos/3d/geom-utils/triangle" {
    import { vec3 } from "cocos/core/vmath/index";
    export default class triangle {
        /**
         * create a new triangle
         *
         * @param {number} ax
         * @param {number} ay
         * @param {number} az
         * @param {number} bx
         * @param {number} by
         * @param {number} bz
         * @param {number} cx
         * @param {number} cy
         * @param {number} cz
         * @return {triangle}
         */
        static create(ax?: number, ay?: number, az?: number, bx?: number, by?: number, bz?: number, cx?: number, cy?: number, cz?: number): triangle;
        /**
         * clone a new triangle
         *
         * @param {triangle} t the source plane
         * @return {triangle}
         */
        static clone(t: any): triangle;
        /**
         * copy the values from one triangle to another
         *
         * @param {triangle} out the receiving triangle
         * @param {triangle} t the source triangle
         * @return {triangle}
         */
        static copy(out: any, t: any): any;
        /**
         * Create a triangle from three points
         *
         * @param {triangle} out the receiving triangle
         * @param {vec3} a
         * @param {vec3} b
         * @param {vec3} c
         * @return {triangle}
         */
        static fromPoints(out: any, a: any, b: any, c: any): any;
        /**
         * Set the components of a triangle to the given values
         *
         * @param {triangle} out the receiving plane
         * @param {number} ax X component of a
         * @param {number} ay Y component of a
         * @param {number} az Z component of a
         * @param {number} bx X component of b
         * @param {number} by Y component of b
         * @param {number} bz Z component of b
         * @param {number} cx X component of c
         * @param {number} cy Y component of c
         * @param {number} cz Z component of c
         * @return {plane}
         * @function
         */
        static set(out: any, ax: any, ay: any, az: any, bx: any, by: any, bz: any, cx: any, cy: any, cz: any): any;
        a: vec3;
        b: vec3;
        c: vec3;
        private _type;
        constructor(ax?: number, ay?: number, az?: number, bx?: number, by?: number, bz?: number, cx?: number, cy?: number, cz?: number);
    }
}
declare module "cocos/3d/geom-utils/sphere" {
    import { vec3 } from "cocos/core/vmath/index";
    export default class sphere {
        /**
         * create a new sphere
         *
         * @return {plane}
         */
        static create(cx: any, cy: any, cz: any, r: any): sphere;
        /**
         * clone a new sphere
         *
         * @param {sphere} p the source sphere
         * @return {sphere}
         */
        static clone(p: any): sphere;
        /**
         * copy the values from one sphere to another
         *
         * @param {sphere} out the receiving sphere
         * @param {sphere} p the source sphere
         * @return {sphere}
         */
        static copy(out: any, p: any): any;
        /**
         * create a new bounding sphere from two corner points
         *
         * @param {sphere} out the receiving sphere
         * @param {vec3} minPos lower corner of the original shape
         * @param {vec3} maxPos upper corner of the original shape
         * @return {sphere}
         */
        static fromPoints(out: any, minPos: any, maxPos: any): any;
        /**
         * Set the components of a sphere to the given values
         *
         * @param {sphere} out the receiving sphere
         * @param {number} cx X component of c
         * @param {number} cy Y component of c
         * @param {number} cz Z component of c
         * @param {number} r
         * @return {sphere} out
         * @function
         */
        static set(out: any, cx: any, cy: any, cz: any, r: any): any;
        c: vec3;
        r: number;
        private _type;
        constructor(cx?: number, cy?: number, cz?: number, r?: number);
        clone(): sphere;
        copy(a: sphere): any;
        /**
         * Get the bounding points of this shape
         * @param {vec3} minPos
         * @param {vec3} maxPos
         */
        getBoundary(minPos: any, maxPos: any): void;
        /**
         * Transform this shape
         * @param {mat4} m the transform matrix
         * @param {vec3} pos the position part of the transform
         * @param {quat} rot the rotation part of the transform
         * @param {vec3} scale the scale part of the transform
         * @param {sphere} [out] the target shape
         */
        transform(m: any, pos: any, rot: any, scale: any, out: any): void;
    }
}
declare module "cocos/3d/geom-utils/frustum" {
    import { mat4, vec3 } from "cocos/core/vmath/index";
    import plane from "cocos/3d/geom-utils/plane";
    export class frustum {
        /**
         * Set whether to use accurate intersection testing function on this frustum
         */
        accurate: boolean;
        /**
         * create a new frustum
         *
         * @return {frustum}
         */
        static create(): frustum;
        static createOrtho: (out: frustum, width: number, height: number, near: number, far: number, transform: mat4) => void;
        /**
         * Clone a frustum
         */
        static clone(f: frustum): frustum;
        /**
         * Copy the values from one frustum to another
         */
        static copy(out: frustum, f: frustum): frustum;
        planes: plane[];
        vertices: vec3[];
        private _type;
        constructor();
        /**
         * Update the frustum information according to the given transform matrix.
         * Note that the resulting planes are not normalized under normal mode.
         *
         * @param {mat4} m the view-projection matrix
         * @param {mat4} inv the inverse view-projection matrix
         */
        update(m: mat4, inv: mat4): void;
        transform(mat: mat4): void;
    }
}
declare module "cocos/3d/memop/circular-pool" {
    export default class CircularPool<T = {}> {
        private _cursor;
        private _data;
        constructor(fn: () => T, size: number);
        request(): T;
    }
}
declare module "cocos/3d/memop/timsort" {
    /**
     * Sort an array in the range [lo, hi) using TimSort.
     *
     * @param {array} array - The array to sort.
     * @param {number} lo - First element in the range (inclusive).
     * @param {number} hi - Last element in the range.
     * @param {function=} compare - Item comparison function. Default is alphabetical.
     */
    export default function (array: any, lo: any, hi: any, compare: any): void;
}
declare module "cocos/3d/memop/fixed-array" {
    export default class FixedArray<T = {}> {
        private _count;
        private _data;
        constructor(size: number);
        _resize(size: number): void;
        readonly length: number;
        readonly data: (T | undefined)[];
        reset(): void;
        push(val: any): void;
        pop(): T | undefined;
        fastRemove(idx: any): void;
        indexOf(val: any): number;
        sort(cmp: any): void;
    }
}
declare module "cocos/3d/memop/linked-array" {
    interface INode {
        _prev: INode;
        _next: INode;
    }
    type NodeAllocator = () => INode;
    export default class LinkedArray<T = {}> {
        private _fn;
        private _count;
        private _head;
        private _tail;
        private _pool;
        constructor(fn: NodeAllocator, size: number);
        readonly head: INode | null;
        readonly tail: INode | null;
        readonly length: number;
        add(): INode;
        remove(node: any): void;
        forEach(fn: any, binder: any): void;
    }
}
declare module "cocos/3d/memop/recycle-pool" {
    export default class RecyclePool<T = any> {
        private _fn;
        private _count;
        private _data;
        constructor(fn: () => T, size: number);
        readonly length: number;
        readonly data: T[];
        reset(): void;
        resize(size: number): void;
        add(): T;
        removeAt(idx: number): void;
        sort(compare: (a: T, b: T) => number): void;
    }
}
declare module "cocos/3d/memop/typed-array-pool" {
    const _default_1: {
        alloc_int8(n: any): Int8Array;
        alloc_uint8(n: any): Uint8Array;
        alloc_int16(n: any): Int16Array;
        alloc_uint16(n: any): Uint16Array;
        alloc_int32(n: any): Int32Array;
        alloc_uint32(n: any): Uint32Array;
        alloc_float32(n: any): Float32Array;
        alloc_float64(n: any): Float64Array;
        free(array: any): void;
        reset(): void;
    };
    export default _default_1;
}
declare module "cocos/3d/memop/index" {
    export { default as CircularPool } from "cocos/3d/memop/circular-pool";
    export { default as FixedArray } from "cocos/3d/memop/fixed-array";
    export { default as LinkedArray } from "cocos/3d/memop/linked-array";
    export { default as Pool } from "cocos/3d/memop/pool";
    export { default as RecyclePool } from "cocos/3d/memop/recycle-pool";
    export { default as TypedArrayPool } from "cocos/3d/memop/typed-array-pool";
}
declare module "cocos/3d/geom-utils/octree" {
    import { vec3 } from "cocos/core/vmath/index";
    import { FixedArray } from "cocos/3d/memop/index";
    import aabb from "cocos/3d/geom-utils/aabb";
    class OctreeBlock {
        minPos: vec3;
        maxPos: vec3;
        boundingBox: aabb;
        capacity: number;
        depth: number;
        maxDepth: number;
        blocks: null | OctreeBlock[];
        entries: FixedArray;
        private _getBoundingShape;
        constructor(minPos: any, maxPos: any, capacity: any, depth: any, maxDepth: any, getBoundingShape: any);
        addEntry(entry: any): void;
        removeEntry(entry: any): void;
        select(out: any, shape: any): void;
        frustumSelect(out: any, frustum: any): void;
    }
    /**
     * An octree acceleration data structure
     * @example
     * let octree = new Octree();
     * octree.build(models, model => {
     *   return model._boundingShape;
     * });
     * octree.select(enums.SHAPE_FRUSTUM, view._frustum);
     */
    export default class Octree {
        /**
         * Create sub blocks and populate them with given entries
         * @param {vec3} worldMin - min position of the parent bounding box
         * @param {vec3} worldMax - max position of the parent bounding box
         * @param {Array<Object>} entries - the entries to be inserted
         * @param {number} blockCapacity - maximum capacity for each block node
         * before it's been subdivided, might be exceeded if `maxDepth` is reached
         * @param {number} curDepth - depth before subdivided
         * @param {number} maxDepth - maximum depth of this tree
         * @param {function(entry: Object): Object} getBoundingShape - a function takes an entry and returns its primitive info
         * @return {OctreeBlock[]} the sub blocks
         */
        static createBlocks(worldMin: any, worldMax: any, entries: any, blockCapacity: any, curDepth: any, maxDepth: any, getBoundingShape: any): OctreeBlock[];
        blockCapacity: number;
        maxDepth: number;
        blocks: OctreeBlock[];
        dynamics: any[];
        private _selection;
        private _getBoundingShape;
        /**
         * Create a octree structure
         * @param {number} blockCapacity - maximum capacity for each block node
         * before it's been subdivided, might be exceeded if `maxDepth` is reached
         * @param {number} maxDepth - maximum depth of this tree
         */
        constructor(blockCapacity?: number, maxDepth?: number);
        /**
         * Build this octree from given entries.
         * Root Boundary is the bounding box of all the entries.
         * @param {Array<Object>} entries - a collection of entries to be queried later
         * @param {function(entry: Object): Object} getBoundingShape
         *  - a function takes an entry and returns its primitive info
         */
        build(entries: any, getBoundingShape: any): void;
        /**
         * Add an entry to this tree. Should be called after `build`.
         * @param {Object} entry - the new entry
         */
        addEntry(entry: any): void;
        /**
         * Remove an entry from this tree. Should be called after `build`.
         * @param {Object} entry - the entry to be removed
         */
        removeEntry(entry: any): void;
        /**
         * Select all the entries overlapping the given primitive
         * @param {Object} shape - the selecting primitive
         * @return {Set<Object>} the resulting set of entries
         */
        select(shape: any): Set<any>;
        /**
         * Specialized selection for frustums
         * @param {Object} frustum - the selecting frustum
         * @return {Set<Object>} the resulting set of entries
         */
        frustumSelect(frustum: any): Set<any>;
    }
}
declare module "cocos/core/data/index" {
    /****************************************************************************
     Copyright (c) 2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import * as _decorator from "cocos/core/data/class-decorator";
    export { _decorator };
    export { default as CCClass } from "cocos/core/data/class";
    export { CCObject } from './object';
    export { default as deserialize } from "cocos/core/data/deserialize";
    export { default as instantiate } from "cocos/core/data/instantiate";
}
declare module "cocos/3d/geom-utils/curve" {
    export class Keyframe {
        time: number;
        value: number;
        inTangent: number;
        outTangent: number;
    }
    export class OptimizedKey {
        index: number;
        time: number;
        endTime: number;
        coefficient: Float32Array;
        constructor();
        evaluate(T: number): number;
    }
    export function evalOptCurve(t: number, coefs: Float32Array | number[]): number;
    export class AnimationCurve {
        keyFrames: Keyframe[] | null;
        preWrapMode: number;
        postWrapMode: number;
        private cachedKey;
        private static defaultKF;
        constructor(keyFrames?: Keyframe[] | null);
        addKey(keyFrame: Keyframe): void;
        evaluate_slow(time: number): number;
        evaluate(time: number): number;
        calcOptimizedKey(optKey: OptimizedKey, leftIndex: number, rightIndex: number): void;
        private findIndex;
    }
}
declare module "cocos/3d/geom-utils/index" {
    export { default as enums } from "cocos/3d/geom-utils/enums";
    import * as distance from "cocos/3d/geom-utils/distance";
    export { distance };
    export { default as intersect } from "cocos/3d/geom-utils/intersect";
    export { default as line } from "cocos/3d/geom-utils/line";
    export { default as plane } from "cocos/3d/geom-utils/plane";
    export { default as ray } from "cocos/3d/geom-utils/ray";
    export { default as triangle } from "cocos/3d/geom-utils/triangle";
    export { default as sphere } from "cocos/3d/geom-utils/sphere";
    export { default as aabb } from "cocos/3d/geom-utils/aabb";
    export { default as obb } from "cocos/3d/geom-utils/obb";
    export { frustum } from "cocos/3d/geom-utils/frustum";
    export { default as Octree } from "cocos/3d/geom-utils/octree";
    export { Keyframe, AnimationCurve } from "cocos/3d/geom-utils/curve";
}
declare module "cocos/core/utils/murmurhash2_gc" {
    /**
     * JS Implementation of MurmurHash2
     *
     * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
     * @see http://github.com/garycourt/murmurhash-js
     * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
     * @see http://sites.google.com/site/murmurhash/
     *
     * @param {string} str ASCII only
     * @param {number} seed Positive integer only
     * @return {number} 32-bit positive integer hash
     */
    export function murmurhash2_32_gc(str: string, seed: number): number;
}
declare module "cocos/renderer/utils" {
    export function createIA(device: any, data: any): any;
}
declare module "cocos/renderer/config" {
    const _default_2: {
        addStage(name: any): void;
        stageID(name: any): any;
        stageIDs(nameList: any): number;
    };
    export default _default_2;
}
declare module "cocos/renderer/core/constants" {
    export enum RenderQueue {
        OPAQUE = 0,
        TRANSPARENT = 1,
        OVERLAY = 2
    }
    export enum PassStage {
        DEFAULT = 1,
        FORWARD = 2,
        SHADOWCAST = 4
    }
}
declare module "cocos/pipeline/pass-phase" {
    export const getPhaseID: (phaseName: string) => number;
}
declare module "cocos/renderer/core/program-lib" {
    import { IDefineInfo, IShaderInfo } from "cocos/3d/assets/effect-asset";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXShader } from "cocos/gfx/shader";
    import { RenderPipeline } from "cocos/pipeline/render-pipeline";
    import { IDefineMap } from "cocos/renderer/core/pass";
    interface IDefineRecord extends IDefineInfo {
        _map: (value: any) => number;
        _offset: number;
    }
    interface IProgramInfo extends IShaderInfo {
        id: number;
        defines: IDefineRecord[];
        globalsInited: boolean;
        localsInited: boolean;
    }
    export interface IDefineValue {
        name: string;
        result: string | number;
    }
    class ProgramLib {
        protected _templates: Record<string, IProgramInfo>;
        protected _cache: Record<string, GFXShader>;
        constructor();
        /**
         * @example:
         *   // this object is auto-generated from your actual shaders
         *   let program = {
         *     name: 'foobar',
         *     glsl1: { vert: '// shader source', frag: '// shader source' },
         *     glsl3: { vert: '// shader source', frag: '// shader source' },
         *     defines: [
         *       { name: 'shadow', type: 'boolean', defines: [] },
         *       { name: 'lightCount', type: 'number', range: [1, 4], defines: [] }
         *     ],
         *     blocks: [{ name: 'Constants', binding: 0, members: [
         *       { name: 'color', type: 'vec4', count: 1, size: 16 }], defines: [], size: 16 }
         *     ],
         *     samplers: [],
         *     dependencies: { 'USE_NORMAL_TEXTURE': 'OES_standard_derivatives' },
         *   };
         *   programLib.define(program);
         */
        define(prog: IShaderInfo): void;
        getTemplate(name: string): IProgramInfo;
        /**
         * Does this library has the specified program?
         */
        hasProgram(name: string): boolean;
        getKey(name: string, defines: IDefineMap): number;
        destroyShaderByDefines(defines: IDefineMap): void;
        getShaderInstaceName(name: string, defines: IDefineMap, defs?: IDefineValue[]): string;
        getGFXShader(device: GFXDevice, name: string, defines: IDefineMap, pipeline: RenderPipeline): GFXShader;
    }
    export const programLib: ProgramLib;
}
declare module "cocos/renderer/scene/camera" {
    import { frustum, ray } from "cocos/3d/geom-utils/index";
    import { Mat4, Rect, Vec3 } from "cocos/core/value-types/index";
    import { vec3 } from "cocos/core/vmath/index";
    import { RenderView } from "cocos/pipeline/render-view";
    import { Node } from "cocos/scene-graph/node";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    export enum CameraProjection {
        ORTHO = 0,
        PERSPECTIVE = 1
    }
    export enum CameraAperture {
        F1_8 = 0,
        F2_0 = 1,
        F2_2 = 2,
        F2_5 = 3,
        F2_8 = 4,
        F3_2 = 5,
        F3_5 = 6,
        F4_0 = 7,
        F4_5 = 8,
        F5_0 = 9,
        F5_6 = 10,
        F6_3 = 11,
        F7_1 = 12,
        F8_0 = 13,
        F9_0 = 14,
        F10_0 = 15,
        F11_0 = 16,
        F13_0 = 17,
        F14_0 = 18,
        F16_0 = 19,
        F18_0 = 20,
        F20_0 = 21,
        F22_0 = 22
    }
    export enum CameraISO {
        ISO100 = 0,
        ISO200 = 1,
        ISO400 = 2,
        ISO800 = 3
    }
    export enum CameraShutter {
        D1 = 0,
        D2 = 1,
        D4 = 2,
        D8 = 3,
        D15 = 4,
        D30 = 5,
        D60 = 6,
        D125 = 7,
        D250 = 8,
        D500 = 9,
        D1000 = 10,
        D2000 = 11,
        D4000 = 12
    }
    export interface ICameraInfo {
        name: string;
        node: Node;
        projection: number;
        targetDisplay: number;
        priority: number;
        pipeline?: string;
        isUI?: boolean;
        flows?: string[];
    }
    export class Camera {
        private _scene;
        private _name;
        private _enabled;
        private _proj;
        private _isWindowSize;
        private _width;
        private _height;
        private _screenScale;
        private _aspect;
        private _orthoHeight;
        private _fov;
        private _nearClip;
        private _farClip;
        private _clearStencil;
        private _clearDepth;
        private _clearFlag;
        private _clearColor;
        private _viewport;
        private _isProjDirty;
        private _matView;
        private _matProj;
        private _matViewProj;
        private _matViewProjInv;
        private _frustum;
        private _forward;
        private _position;
        private _node;
        private _view;
        private _visibility;
        private _priority;
        private _aperture;
        private _apertureValue;
        private _shutter;
        private _shutterValue;
        private _iso;
        private _isoValue;
        private _ec;
        private _exposure;
        constructor(scene: RenderScene, info: ICameraInfo);
        destroy(): void;
        resize(width: number, height: number): void;
        setFixedSize(width: number, height: number): void;
        update(): void;
        getSplitFrustum(out: frustum, nearClip: number, farClip: number): void;
        screenScale: any;
        enabled: any;
        readonly view: RenderView;
        node: Node;
        readonly isWindowSize: boolean;
        orthoHeight: any;
        projectionType: any;
        viewport: Rect;
        fov: any;
        nearClip: any;
        farClip: any;
        clearColor: any;
        clearDepth: any;
        clearStencil: any;
        clearFlag: any;
        readonly scene: RenderScene;
        readonly name: string;
        readonly width: number;
        readonly height: number;
        readonly aspect: number;
        readonly matView: Mat4;
        readonly matProj: Mat4;
        readonly matViewProj: Mat4;
        readonly matViewProjInv: Mat4;
        readonly frustum: frustum;
        readonly forward: Vec3;
        readonly position: Vec3;
        visibility: any;
        priority: number;
        aperture: CameraAperture;
        readonly apertureValue: number;
        shutter: CameraShutter;
        readonly shutterValue: number;
        iso: CameraISO;
        readonly isoValue: number;
        ec: number;
        readonly exposure: number;
        changeTargetDisplay(val: number): void;
        /**
         * transform a screen position to a world space ray
         */
        screenPointToRay(out: ray, x: number, y: number): ray;
        /**
         * transform a screen position to world space
         */
        screenToWorld(out: vec3, screenPos: vec3): vec3;
        /**
         * transform a world space position to screen space
         */
        worldToScreen(out: vec3, worldPos: vec3): vec3;
        private updateExposure;
    }
}
declare module "cocos/pipeline/render-view" {
    import { Root } from "cocos/core/root";
    import { GFXWindow } from "cocos/gfx/window";
    import { Camera } from "cocos/renderer/scene/camera";
    import { RenderFlow } from "cocos/pipeline/render-flow";
    export enum RenderViewPriority {
        GENERAL = 100
    }
    export interface IRenderViewInfo {
        camera: Camera;
        name: string;
        priority: number;
        isUI: boolean;
        flows?: string[];
    }
    export interface IRenderTargetInfo {
        width?: number;
        height?: number;
    }
    export class RenderView {
        readonly name: string;
        window: GFXWindow | null;
        priority: number;
        visibility: any;
        readonly camera: Camera;
        readonly isEnable: boolean;
        readonly isUI: boolean;
        readonly flows: RenderFlow[];
        static registerCreateFunc(root: Root): void;
        private _root;
        private _name;
        private _window;
        private _priority;
        private _visibility;
        private _camera;
        private _isEnable;
        private _isUI;
        private _flows;
        private constructor();
        initialize(info: IRenderViewInfo): boolean;
        destroy(): void;
        enable(isEnable: boolean): void;
    }
}
declare module "cocos/pipeline/render-stage" {
    import { GFXCommandBuffer } from "cocos/gfx/command-buffer";
    import { IGFXColor, IGFXRect } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXFramebuffer } from "cocos/gfx/framebuffer";
    import { GFXPipelineState } from "cocos/gfx/pipeline-state";
    import { Pass } from "cocos/renderer/index";
    import { RenderFlow } from "cocos/pipeline/render-flow";
    import { RenderPipeline } from "cocos/pipeline/render-pipeline";
    import { RenderView } from "cocos/pipeline/render-view";
    export interface IRenderStageInfo {
        name?: string;
        priority: number;
        framebuffer?: GFXFramebuffer;
    }
    export abstract class RenderStage {
        readonly flow: RenderFlow;
        readonly pipeline: RenderPipeline;
        readonly priority: number;
        readonly framebuffer: GFXFramebuffer | null;
        protected _flow: RenderFlow;
        protected _pipeline: RenderPipeline;
        protected _device: GFXDevice;
        protected _name: string;
        protected _priority: number;
        protected _framebuffer: GFXFramebuffer | null;
        protected _cmdBuff: GFXCommandBuffer | null;
        protected _clearColors: IGFXColor[];
        protected _clearDepth: number;
        protected _clearStencil: number;
        protected _renderArea: IGFXRect;
        protected _pass: Pass | null;
        protected _pso: GFXPipelineState | null;
        constructor(flow: RenderFlow);
        abstract initialize(info: IRenderStageInfo): boolean;
        abstract destroy(): any;
        abstract render(view: RenderView): any;
        abstract resize(width: number, height: number): any;
        abstract rebuild(): any;
        setClearColor(color: IGFXColor): void;
        setClearColors(colors: IGFXColor[]): void;
        setClearDepth(depth: number): void;
        setClearStencil(stencil: number): void;
        setRenderArea(width: number, height: number): void;
    }
}
declare module "cocos/pipeline/render-flow" {
    import { Material } from "cocos/3d/assets/material";
    import { GFXDevice } from "cocos/gfx/device";
    import { RenderPipeline } from "cocos/pipeline/render-pipeline";
    import { IRenderStageInfo, RenderStage } from "cocos/pipeline/render-stage";
    import { RenderView } from "cocos/pipeline/render-view";
    export interface IRenderFlowInfo {
        name?: string;
        priority: number;
    }
    export abstract class RenderFlow {
        readonly device: GFXDevice;
        readonly pipeline: RenderPipeline;
        readonly name: string;
        readonly priority: number;
        readonly stages: RenderStage[];
        readonly material: Material;
        protected _device: GFXDevice;
        protected _pipeline: RenderPipeline;
        protected _name: string;
        protected _priority: number;
        protected _stages: RenderStage[];
        protected _material: Material;
        constructor(pipeline: RenderPipeline);
        abstract initialize(info: IRenderFlowInfo): boolean;
        abstract destroy(): any;
        abstract rebuild(): any;
        resize(width: number, height: number): void;
        render(view: RenderView): void;
        createStage<T extends RenderStage>(clazz: new (flow: RenderFlow) => T, info: IRenderStageInfo): RenderStage | null;
        destroyStages(): void;
    }
}
declare module "cocos/pipeline/render-pipeline" {
    import { Root } from "cocos/core/root";
    import { GFXBuffer } from "cocos/gfx/buffer";
    import { GFXFormat } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXFramebuffer } from "cocos/gfx/framebuffer";
    import { GFXInputAssembler } from "cocos/gfx/input-assembler";
    import { GFXRenderPass } from "cocos/gfx/render-pass";
    import { GFXTexture } from "cocos/gfx/texture";
    import { GFXTextureView } from "cocos/gfx/texture-view";
    import { Camera, Model } from "cocos/renderer/index";
    import { IDefineMap } from "cocos/renderer/core/pass";
    import { IRenderObject, UBOGlobal } from "cocos/pipeline/define";
    import { IInternalBindingInst } from "cocos/pipeline/define";
    import { IRenderFlowInfo, RenderFlow } from "cocos/pipeline/render-flow";
    import { RenderView } from "cocos/pipeline/render-view";
    export interface IRenderPipelineInfo {
        enablePostProcess?: boolean;
        enableHDR?: boolean;
        enableMSAA?: boolean;
        enableSMAA?: boolean;
    }
    export abstract class RenderPipeline {
        readonly root: Root;
        readonly device: GFXDevice;
        readonly name: string;
        readonly renderObjects: IRenderObject[];
        readonly flows: RenderFlow[];
        readonly usePostProcess: boolean;
        readonly isHDRSupported: boolean;
        readonly isHDR: boolean;
        readonly shadingScale: number;
        lightMeterScale: number;
        readonly depthStencilTexView: GFXTextureView;
        readonly curShadingTexView: GFXTextureView;
        readonly prevShadingTexView: GFXTextureView;
        readonly curShadingFBO: GFXFramebuffer;
        readonly prevShadingFBO: GFXFramebuffer;
        readonly msaaShadingFBO: GFXFramebuffer;
        readonly useMSAA: boolean;
        readonly useSMAA: boolean;
        readonly smaaEdgeTexView: GFXTextureView;
        readonly smaaEdgeFBO: GFXFramebuffer;
        readonly smaaBlendTexView: GFXTextureView;
        readonly smaaBlendFBO: GFXFramebuffer;
        readonly quadIA: GFXInputAssembler;
        readonly globalBindings: Map<string, IInternalBindingInst>;
        readonly defaultTexture: GFXTexture;
        readonly fpScale: number;
        readonly fpScaleInv: number;
        readonly macros: IDefineMap;
        readonly defaultGlobalUBOData: Float32Array;
        protected _root: Root;
        protected _device: GFXDevice;
        protected _name: string;
        protected _renderObjects: IRenderObject[];
        protected _renderPasses: Map<number, GFXRenderPass>;
        protected _flows: RenderFlow[];
        protected _isHDRSupported: boolean;
        protected _isHDR: boolean;
        protected _lightMeterScale: number;
        protected _shadingPass: GFXRenderPass | null;
        protected _fboCount: number;
        protected _msaaShadingTex: GFXTexture | null;
        protected _msaaShadingTexView: GFXTextureView | null;
        protected _msaaDepthStencilTex: GFXTexture | null;
        protected _msaaDepthStencilTexView: GFXTextureView | null;
        protected _msaaShadingFBO: GFXFramebuffer | null;
        protected _colorFmt: GFXFormat;
        protected _depthStencilFmt: GFXFormat;
        protected _shadingTextures: GFXTexture[];
        protected _shadingTexViews: GFXTextureView[];
        protected _depthStencilTex: GFXTexture | null;
        protected _depthStencilTexView: GFXTextureView | null;
        protected _shadingFBOs: GFXFramebuffer[];
        protected _shadingWidth: number;
        protected _shadingHeight: number;
        protected _shadingScale: number;
        protected _curIdx: number;
        protected _prevIdx: number;
        protected _usePostProcess: boolean;
        protected _useMSAA: boolean;
        protected _useSMAA: boolean;
        protected _smaaPass: GFXRenderPass | null;
        protected _smaaEdgeFBO: GFXFramebuffer | null;
        protected _smaaEdgeTex: GFXTexture | null;
        protected _smaaEdgeTexView: GFXTextureView | null;
        protected _smaaBlendFBO: GFXFramebuffer | null;
        protected _smaaBlendTex: GFXTexture | null;
        protected _smaaBlendTexView: GFXTextureView | null;
        protected _quadVB: GFXBuffer | null;
        protected _quadIB: GFXBuffer | null;
        protected _quadIA: GFXInputAssembler | null;
        protected _defaultUboGlobal: UBOGlobal;
        protected _globalBindings: Map<string, IInternalBindingInst>;
        protected _defaultTex: GFXTexture | null;
        protected _defaultTexView: GFXTextureView | null;
        protected _fpScale: number;
        protected _fpScaleInv: number;
        protected _macros: IDefineMap;
        constructor(root: Root);
        abstract initialize(info: IRenderPipelineInfo): boolean;
        abstract destroy(): any;
        rebuild(): void;
        resize(width: number, height: number): void;
        render(view: RenderView): void;
        swapFBOs(): void;
        addRenderPass(stage: number, renderPass: GFXRenderPass): void;
        getRenderPass(stage: number): GFXRenderPass | null;
        removeRenderPass(stage: number): void;
        clearRenderPasses(): void;
        createFlow<T extends RenderFlow>(clazz: new (pipeline: RenderPipeline) => T, info: IRenderFlowInfo): RenderFlow | null;
        destroyFlows(): void;
        getFlow(name: string): RenderFlow | null;
        protected _initialize(info: IRenderPipelineInfo): boolean;
        protected _destroy(): void;
        protected resizeFBOs(width: number, height: number): void;
        protected updateMacros(): void;
        protected createQuadInputAssembler(): boolean;
        protected destroyQuadInputAssembler(): void;
        protected createUBOs(): boolean;
        protected destroyUBOs(): void;
        protected updateUBOs(view: RenderView): void;
        protected sceneCulling(view: RenderView): void;
        protected addVisibleModel(model: Model, camera: Camera): void;
    }
}
declare module "cocos/renderer/core/pass" {
    import { IPassInfo, IPassStates, IShaderInfo } from "cocos/3d/assets/effect-asset";
    import { GFXBindingLayout, IGFXBinding } from "cocos/gfx/binding-layout";
    import { GFXBuffer } from "cocos/gfx/buffer";
    import { GFXDynamicState, GFXPrimitiveMode } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXPipelineLayout } from "cocos/gfx/pipeline-layout";
    import { GFXBlendState, GFXDepthStencilState, GFXPipelineState, GFXRasterizerState } from "cocos/gfx/pipeline-state";
    import { GFXRenderPass } from "cocos/gfx/render-pass";
    import { GFXSampler } from "cocos/gfx/sampler";
    import { GFXShader } from "cocos/gfx/shader";
    import { GFXTextureView } from "cocos/gfx/texture-view";
    import { RenderPassStage, RenderPriority } from "cocos/pipeline/define";
    export interface IDefineMap {
        [name: string]: number | boolean | string;
    }
    export interface IPassInfoFull extends IPassInfo {
        idxInTech: number;
        curDefs: IDefineMap;
        states: PassOverrides;
    }
    export type PassOverrides = RecursivePartial<IPassStates>;
    interface IBlock {
        buffer: ArrayBuffer;
        views: Float32Array[];
        dirty: boolean;
    }
    interface IPassResources {
        bindingLayout: GFXBindingLayout;
        pipelineLayout: GFXPipelineLayout;
        pipelineState: GFXPipelineState;
    }
    interface IPassDynamics {
        [type: string]: {
            dirty: boolean;
            value: number[];
        };
    }
    export class Pass {
        static getBindingTypeFromHandle: (handle: number) => number;
        static getTypeFromHandle: (handle: number) => number;
        static getBindingFromHandle: (handle: number) => number;
        static getIndexFromHandle: (handle: number) => number;
        protected _buffers: Record<number, GFXBuffer>;
        protected _samplers: Record<number, GFXSampler>;
        protected _textureViews: Record<number, GFXTextureView>;
        protected _resources: IPassResources[];
        protected _idxInTech: number;
        protected _programName: string;
        protected _priority: RenderPriority;
        protected _primitive: GFXPrimitiveMode;
        protected _stage: RenderPassStage;
        protected _bindings: IGFXBinding[];
        protected _bs: GFXBlendState;
        protected _dss: GFXDepthStencilState;
        protected _rs: GFXRasterizerState;
        protected _dynamicStates: GFXDynamicState[];
        protected _dynamics: IPassDynamics;
        protected _customizations: string[];
        protected _handleMap: Record<string, number>;
        protected _blocks: IBlock[];
        protected _shaderInfo: IShaderInfo;
        protected _defines: IDefineMap;
        protected _phase: number;
        protected _device: GFXDevice;
        protected _renderPass: GFXRenderPass | null;
        protected _shader: GFXShader | null;
        constructor(device: GFXDevice);
        initialize(info: IPassInfoFull): void;
        getHandle(name: string): number;
        getBinding(name: string): number;
        setUniform(handle: number, value: any): void;
        setUniformArray(handle: number, value: any[]): void;
        bindBuffer(binding: number, value: GFXBuffer): void;
        bindTextureView(binding: number, value: GFXTextureView): void;
        bindSampler(binding: number, value: GFXSampler): void;
        setDynamicState(state: GFXDynamicState, value: any): void;
        overridePipelineStates(original: IPassInfo, overrides: PassOverrides): void;
        update(): void;
        destroy(): void;
        tryCompile(defineOverrides?: IDefineMap): boolean;
        createPipelineState(): GFXPipelineState | null;
        destroyPipelineState(pipelineStates: GFXPipelineState): void;
        serializePipelineStates(): string;
        protected _fillinPipelineInfo(info: PassOverrides): void;
        readonly idxInTech: number;
        readonly programName: string;
        readonly priority: RenderPriority;
        readonly primitive: GFXPrimitiveMode;
        readonly stage: RenderPassStage;
        readonly phase: number;
        readonly bindings: IGFXBinding[];
        readonly blendState: GFXBlendState;
        readonly depthStencilState: GFXDepthStencilState;
        readonly rasterizerState: GFXRasterizerState;
        readonly dynamics: IPassDynamics;
        readonly customizations: string[];
        readonly shader: GFXShader;
    }
}
declare module "cocos/renderer/scene/light" {
    import { Vec3 } from "cocos/core/value-types/index";
    import { Node } from "cocos/scene-graph/node";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    export function ColorTemperatureToRGB(rgb: Vec3, kelvin: number): void;
    export enum LightType {
        DIRECTIONAL = 0,
        SPHERE = 1,
        SPOT = 2,
        UNKNOWN = 3
    }
    export const nt2lm: (size: number) => number;
    export class Light {
        enabled: any;
        color: Vec3;
        useColorTemperature: boolean;
        colorTemperature: number;
        readonly colorTemperatureRGB: Vec3;
        node: any;
        readonly type: LightType;
        readonly name: string;
        protected _enabled: boolean;
        protected _color: Vec3;
        protected _useColorTemp: boolean;
        protected _colorTemp: number;
        protected _colorTempRGB: Vec3;
        protected _scene: RenderScene;
        protected _node: Node;
        protected _type: LightType;
        protected _name: string;
        constructor(scene: RenderScene, name: string, node: Node);
        update(): void;
    }
}
declare module "cocos/renderer/models/particle-batch-model" {
    import { Material } from "cocos/3d/assets/material";
    import { Mesh } from "cocos/3d/assets/mesh";
    import { IGFXAttribute } from "cocos/gfx/input-assembler";
    import { Node } from "cocos/scene-graph/index";
    import { Model } from "cocos/renderer/scene/model";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    export default class ParticleBatchModel extends Model {
        private _capacity;
        private _vertAttrs;
        private _vertSize;
        private _vBuffer;
        private _vertAttrsFloatCount;
        private _vdataF32;
        private _vdataUint32;
        private _iaInfo;
        private _iaInfoBuffer;
        private _subMeshData;
        private _mesh;
        private _vertCount;
        private _indexCount;
        constructor(scene: RenderScene, node: Node);
        setCapacity(capacity: number): void;
        setVertexAttributes(mesh: Mesh | null, attrs: IGFXAttribute[]): void;
        _createSubMeshData(): ArrayBuffer;
        setSubModelMaterial(idx: number, mat: Material | null): void;
        addParticleVertexData(index: number, pvdata: any[]): void;
        updateIA(count: number): void;
        clear(): void;
        destroy(): void;
        private destroySubMeshData;
    }
}
declare module "cocos/3d/assets/skeleton" {
    import { Asset } from "cocos/assets/asset";
    import { Node } from "cocos/scene-graph/node";
    /**
     * CLASS Skeleton
     * The skeleton class represent a kind of deformation.
     * A skeleton consists of a forest hierachy of nodes.
     * Some of the nodes, called joints, have special meanings.
     * Skeletons are not mutable, but they can be instantiated
     * to produce a skeleton instance. Skeleton instances can be modified,
     * for example, be animated.
     */
    export default class Skeleton extends Asset {
        /**
         * The path of joints.
         */
        private _joints;
        /**
         * The inverse bind matrices of joints.
         */
        private _bindposes;
        /**
         * Gets the bind pose matrices of joints.
         */
        /**
        * Sets the bind pose matrices of joints.
        */
        bindposes: Node[];
        /**
         * Gets the paths of joints.
         */
        /**
        * Sets the paths of joints.
        */
        joints: string[];
    }
}
declare module "cocos/renderer/models/skinning-model" {
    import Skeleton from "cocos/3d/assets/skeleton";
    import { vec3, quat } from "cocos/core/vmath/index";
    import { GFXDevice } from "cocos/gfx/device";
    import { Node } from "cocos/scene-graph/node";
    import { Pass } from "cocos/renderer/core/pass";
    import { Model } from "cocos/renderer/scene/model";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    export enum JointStorageKind {
        textureRGBA8 = 0,
        textureRGBA32F = 1,
        uniform = 2
    }
    export class SkinningModel extends Model {
        private _binded;
        constructor(scene: RenderScene, node: Node);
        isTextureStorage(): boolean | null;
        bindSkeleton(skeleton: Skeleton): void;
        updateJointData(iMatrix: number, pos: vec3, rot: quat, scale: vec3): void;
        commitJointMatrices(): void;
        protected _doCreatePSO(pass: Pass): import("cocos/gfx/pipeline-state").GFXPipelineState;
        private _destroyJointStorage;
    }
    export function selectStorageKind(device: GFXDevice): JointStorageKind;
}
declare module "cocos/renderer/index" {
    export { createIA } from "cocos/renderer/utils";
    const addStage: (name: any) => void;
    export { addStage };
    export { RenderQueue, PassStage } from "cocos/renderer/core/constants";
    export { Pass } from "cocos/renderer/core/pass";
    export { Effect } from "cocos/renderer/core/effect";
    export { programLib } from "cocos/renderer/core/program-lib";
    import { samplerLib } from "cocos/renderer/core/sampler-lib";
    export { samplerLib };
    export { Light } from "cocos/renderer/scene/light";
    export { Camera } from "cocos/renderer/scene/camera";
    export { Model } from "cocos/renderer/scene/model";
    export { default as ParticleBatchModel } from "cocos/renderer/models/particle-batch-model";
    export { SkinningModel } from "cocos/renderer/models/skinning-model";
}
declare module "cocos/renderer/scene/submodel" {
    import { Material } from "cocos/3d/assets/material";
    import { IRenderingSubmesh } from "cocos/3d/assets/mesh";
    import { GFXCommandBuffer } from "cocos/gfx/command-buffer";
    import { GFXInputAssembler } from "cocos/gfx/input-assembler";
    import { GFXPipelineState } from "cocos/gfx/pipeline-state";
    import { RenderPriority } from "cocos/pipeline/define";
    import { Pass } from "cocos/renderer/core/pass";
    export class SubModel {
        protected _subMeshObject: IRenderingSubmesh | null;
        protected _inputAssembler: GFXInputAssembler | null;
        private _material;
        private _cmdBuffers;
        private _psos;
        private _castShadow;
        private _priority;
        constructor();
        initialize(subMesh: IRenderingSubmesh, mat: Material, psos: GFXPipelineState[]): void;
        destroy(): void;
        priority: RenderPriority;
        subMeshData: IRenderingSubmesh;
        psos: GFXPipelineState[];
        material: Material | null;
        readonly inputAssembler: GFXInputAssembler | null;
        castShadow: boolean;
        updateCommandBuffer(): void;
        protected recordCommandBuffer(index: number): void;
        readonly passes: Pass[];
        readonly commandBuffers: GFXCommandBuffer[];
    }
}
declare module "cocos/pipeline/define" {
    import { GFXBuffer } from "cocos/gfx/buffer";
    import { GFXCommandBuffer } from "cocos/gfx/command-buffer";
    import { GFXBindingType } from "cocos/gfx/define";
    import { GFXSampler } from "cocos/gfx/sampler";
    import { GFXUniformBlock, GFXUniformSampler } from "cocos/gfx/shader";
    import { GFXTextureView } from "cocos/gfx/texture-view";
    import { Model } from "cocos/renderer/index";
    import { SubModel } from "cocos/renderer/scene/submodel";
    export const PIPELINE_FLOW_FORWARD: string;
    export const PIPELINE_FLOW_SMAA: string;
    export const PIPELINE_FLOW_TONEMAP: string;
    export enum RenderPassStage {
        DEFAULT = 100
    }
    export enum RenderPriority {
        MIN = 0,
        MAX = 255,
        DEFAULT = 128
    }
    export interface IRenderObject {
        model: Model;
        depth: number;
    }
    export interface IRenderPass {
        hash: number;
        depth: number;
        shaderId: number;
        subModel: SubModel;
        cmdBuff: GFXCommandBuffer;
    }
    export interface IRenderQueueDesc {
        isTransparent: boolean;
        phases: number;
        sortFunc: (a: IRenderPass, b: IRenderPass) => number;
    }
    export enum UniformBinding {
        UBO_GLOBAL,
        UBO_SHADOW,
        UBO_LOCAL,
        UBO_FORWARD_LIGHTS,
        UBO_SKINNING,
        UBO_SKINNING_TEXTURE_CASE,
        UBO_UI,
        SAMPLER_JOINTS
    }
    export class UBOGlobal {
        static TIME_OFFSET: number;
        static SCREEN_SIZE_OFFSET: number;
        static SCREEN_SCALE_OFFSET: number;
        static NATIVE_SIZE_OFFSET: number;
        static MAT_VIEW_OFFSET: number;
        static MAT_VIEW_INV_OFFSET: number;
        static MAT_PROJ_OFFSET: number;
        static MAT_PROJ_INV_OFFSET: number;
        static MAT_VIEW_PROJ_OFFSET: number;
        static MAT_VIEW_PROJ_INV_OFFSET: number;
        static CAMERA_POS_OFFSET: number;
        static EXPOSURE_OFFSET: number;
        static MAIN_LIT_DIR_OFFSET: number;
        static MAIN_LIT_COLOR_OFFSET: number;
        static AMBIENT_SKY_OFFSET: number;
        static AMBIENT_GROUND_OFFSET: number;
        static COUNT: number;
        static SIZE: number;
        static BLOCK: GFXUniformBlock;
        view: Float32Array;
    }
    export class UBOShadow {
        static MAT_LIGHT_PLANE_PROJ_OFFSET: number;
        static SHADOW_COLOR_OFFSET: number;
        static COUNT: number;
        static SIZE: number;
        static BLOCK: GFXUniformBlock;
        view: Float32Array;
    }
    export const localBindingsDesc: Map<string, IInternalBindingDesc>;
    export class UBOLocal {
        static MAT_WORLD_OFFSET: number;
        static MAT_WORLD_IT_OFFSET: number;
        static COUNT: number;
        static SIZE: number;
        static BLOCK: GFXUniformBlock;
        view: Float32Array;
    }
    export class UBOForwardLight {
        static MAX_SPHERE_LIGHTS: number;
        static MAX_SPOT_LIGHTS: number;
        static SPHERE_LIGHT_POS_OFFSET: number;
        static SPHERE_LIGHT_SIZE_RANGE_OFFSET: number;
        static SPHERE_LIGHT_COLOR_OFFSET: number;
        static SPOT_LIGHT_POS_OFFSET: number;
        static SPOT_LIGHT_SIZE_RANGE_ANGLE_OFFSET: number;
        static SPOT_LIGHT_DIR_OFFSET: number;
        static SPOT_LIGHT_COLOR_OFFSET: number;
        static COUNT: number;
        static SIZE: number;
        static BLOCK: GFXUniformBlock;
        view: Float32Array;
    }
    export const JointUniformCapacity = 30;
    export class UBOSkinning {
        static MAT_JOINT_OFFSET: number;
        static COUNT: number;
        static SIZE: number;
        static BLOCK: GFXUniformBlock;
    }
    export class UBOSkinningTextureCase {
        static JOINTS_TEXTURE_SIZE_OFFSET: number;
        static COUNT: number;
        static SIZE: number;
        static BLOCK: GFXUniformBlock;
    }
    export const UNIFORM_JOINTS_TEXTURE: GFXUniformSampler;
    export interface IInternalBindingDesc {
        type: GFXBindingType;
        blockInfo?: GFXUniformBlock;
        samplerInfo?: GFXUniformSampler;
    }
    export interface IInternalBindingInst extends IInternalBindingDesc {
        buffer?: GFXBuffer;
        sampler?: GFXSampler;
        textureView?: GFXTextureView;
    }
}
declare module "cocos/3d/assets/effect-asset" {
    import { Asset } from "cocos/assets/asset";
    import { GFXDynamicState, GFXPrimitiveMode, GFXType } from "cocos/gfx/define";
    import { GFXBlendState, GFXDepthStencilState, GFXRasterizerState } from "cocos/gfx/pipeline-state";
    import { RenderPassStage } from "cocos/pipeline/define";
    export interface IPropertyInfo {
        type: number;
        value?: number[] | string;
        sampler?: number[];
    }
    export interface IPassStates {
        priority?: number;
        primitive?: GFXPrimitiveMode;
        stage?: RenderPassStage;
        rasterizerState?: GFXRasterizerState;
        depthStencilState?: GFXDepthStencilState;
        blendState?: GFXBlendState;
        dynamics?: GFXDynamicState[];
        customizations?: string[];
        phase?: string;
    }
    export interface IPassInfo extends IPassStates {
        program: string;
        switch?: string;
        properties?: Record<string, IPropertyInfo>;
    }
    export interface ITechniqueInfo {
        passes: IPassInfo[];
        name?: string;
    }
    export interface IBlockMember {
        size: number;
        name: string;
        type: GFXType;
        count: number;
    }
    export interface IBlockInfo {
        defines: string[];
        size: number;
        binding: number;
        name: string;
        members: IBlockMember[];
    }
    export interface ISamplerInfo {
        defines: string[];
        binding: number;
        name: string;
        type: GFXType;
        count: number;
    }
    export interface IDefineInfo {
        name: string;
        type: string;
        range?: number[];
        options?: string[];
        defines?: string[];
    }
    export interface IBuiltinInfo {
        blocks: string[];
        samplers: string[];
    }
    export interface IShaderInfo {
        name: string;
        hash: number;
        glsl3: {
            vert: string;
            frag: string;
        };
        glsl1: {
            vert: string;
            frag: string;
        };
        builtins: {
            globals: IBuiltinInfo;
            locals: IBuiltinInfo;
        };
        defines: IDefineInfo[];
        blocks: IBlockInfo[];
        samplers: ISamplerInfo[];
        dependencies: Record<string, string>;
    }
    export class EffectAsset extends Asset {
        static register(asset: EffectAsset): void;
        static remove(name: string): void;
        static get(name: string): EffectAsset | null;
        static getAll(): Record<string, EffectAsset>;
        protected static _effects: Record<string, EffectAsset>;
        techniques: ITechniqueInfo[];
        shaders: IShaderInfo[];
        onLoaded(): void;
    }
}
declare module "cocos/renderer/core/effect" {
    import { EffectAsset } from "cocos/3d/assets/effect-asset";
    import { IDefineMap, Pass, PassOverrides } from "cocos/renderer/core/pass";
    export interface IEffectInfo {
        techIdx: number;
        defines: IDefineMap[];
        states: PassOverrides[];
    }
    export class Effect {
        static getPassesInfo(effect: EffectAsset, techIdx: number): import("cocos/3d/assets/effect-asset").IPassInfo[];
        static parseEffect(effect: EffectAsset, info: IEffectInfo): Pass[];
    }
}
declare module "cocos/3d/framework/renderable-component" {
    import { Component } from "cocos/components/component";
    import { Material } from "cocos/3d/assets/material";
    export class RenderableComponent extends Component {
        protected _materials: Array<Material | null>;
        protected _unfinished: number;
        constructor();
        sharedMaterials: (Material | null)[];
        /**
         * @en The material of the model
         * @zh 模型材质
         * @type {Material[]}
         */
        materials: (Material | null)[];
        /**
         * @en Returns the material corresponding to the sequence number
         * @zh 返回相对应序号的材质
         * @param {Number} idx - Look for the material list number
         */
        getMaterial(idx: number, inEditor?: boolean): Material | null;
        getSharedMaterial(idx: number): Material | null;
        material: Material | null;
        readonly sharedMaterial: Material | null;
        setMaterial(material: Material | null, index: number, notify?: boolean): void;
        protected _onMaterialModified(index: number, material: Material | null): void;
        protected _onRebuildPSO(index: number, material: Material | null): void;
        protected _clearMaterials(): void;
        protected _ensureLoadMaterial(): void;
        protected _onMaterialLoaded(): void;
        protected _assetReady(): void;
        protected onLoad(): void;
        protected onEnable(): void;
    }
}
declare module "cocos/3d/assets/material" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Asset } from "cocos/assets/asset";
    import { IDefineMap, Pass, PassOverrides } from "cocos/renderer/core/pass";
    import { RenderableComponent } from "cocos/3d/framework/renderable-component";
    import { EffectAsset } from "cocos/3d/assets/effect-asset";
    export interface IMaterialInfo {
        technique?: number;
        defines?: IDefineMap | IDefineMap[];
        states?: PassOverrides | PassOverrides[];
        effectAsset?: EffectAsset | null;
        effectName?: string;
    }
    export class Material extends Asset {
        static getInstantiatedMaterial(mat: Material, rndCom: RenderableComponent, inEditor: boolean): Material;
        protected _effectAsset: EffectAsset | null;
        protected _techIdx: number;
        protected _defines: IDefineMap[];
        protected _states: PassOverrides[];
        protected _props: Array<Record<string, any>>;
        protected _passes: Pass[];
        protected _owner: RenderableComponent | null;
        protected _hash: number;
        private _unfinished;
        private _unfinishedProp;
        readonly effectAsset: EffectAsset | null;
        readonly effectName: string;
        readonly technique: number;
        readonly passes: Pass[];
        readonly hash: number;
        constructor();
        initialize(info: IMaterialInfo): void;
        destroy(): void;
        /**
         * Convenient setter provided for quick material setup.
         * pass.setUniform should be used instead
         * if you need to do per-frame property update.
         */
        setProperty(name: string, val: any, passIdx?: number): void;
        getProperty(name: string, passIdx?: number): any;
        copy(mat: Material): void;
        recompileShaders(defineOverrides: IDefineMap | IDefineMap[]): void;
        overridePipelineStates(overrides: PassOverrides, passIdx?: number): void;
        onLoaded(): void;
        ensureLoadTexture(): void;
        protected _prepareInfo(patch: object | object[], cur: object[]): void;
        protected _update(keepProps?: boolean): void;
        protected _uploadProperty(pass: Pass, name: string, val: any): boolean;
        protected _assetReady(): void;
        protected _onTextureLoaded(): void;
        protected _onPassesChange(): void;
    }
}
declare module "cocos/renderer/scene/model" {
    import { Material } from "cocos/3d/assets/material";
    import { IRenderingSubmesh } from "cocos/3d/assets/mesh";
    import { aabb } from "cocos/3d/geom-utils/index";
    import { Vec3 } from "cocos/core/value-types/index";
    import { GFXBuffer } from "cocos/gfx/buffer";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXPipelineState } from "cocos/gfx/pipeline-state";
    import { IInternalBindingInst, UBOLocal } from "cocos/pipeline/define";
    import { Node } from "cocos/scene-graph/node";
    import { Pass } from "cocos/renderer/core/pass";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    import { SubModel } from "cocos/renderer/scene/submodel";
    /**
     * A representation of a model
     */
    export class Model {
        scene: RenderScene;
        readonly id: number;
        readonly subModelNum: number;
        readonly inited: boolean;
        enabled: any;
        /**
         * Get the hosting node of this camera
         * @returns the hosting node
         */
        /**
        * Set the hosting node of this model
        * @param {Node} node the hosting node
        */
        node: Node;
        readonly worldBounds: aabb | null;
        readonly modelBounds: aabb | null;
        viewID: number;
        /**
         * Set the user key
         * @param {number} key
         */
        userKey: number;
        readonly uboLocal: UBOLocal;
        readonly localUBO: GFXBuffer | null;
        readonly localBindings: Map<string, IInternalBindingInst>;
        protected _type: string;
        protected _device: GFXDevice;
        protected _scene: RenderScene;
        protected _node: Node;
        protected _id: number;
        protected _enabled: boolean;
        protected _viewID: number;
        protected _cameraID: number;
        protected _userKey: number;
        protected _worldBounds: aabb | null;
        protected _modelBounds: aabb | null;
        protected _subModels: SubModel[];
        protected _matPSORecord: Map<Material, GFXPipelineState[]>;
        protected _matRefCount: Map<Material, number>;
        protected _uboLocal: UBOLocal;
        protected _localUBO: GFXBuffer | null;
        protected _localBindings: Map<string, IInternalBindingInst>;
        protected _inited: boolean;
        protected _uboUpdated: boolean;
        /**
         * Setup a default empty model
         */
        constructor(scene: RenderScene, node: Node);
        destroy(): void;
        getSubModel(idx: number): SubModel;
        updateTransform(): void;
        _resetUBOUpdateFlag(): void;
        updateUBOs(): void;
        /**
         * Create the bounding shape of this model
         * @param {vec3} minPos the min position of the model
         * @param {vec3} maxPos the max position of the model
         */
        createBoundingShape(minPos?: Vec3, maxPos?: Vec3): void;
        initSubModel(idx: number, subMeshData: IRenderingSubmesh, mat: Material): void;
        setSubModelMesh(idx: number, subMeshData: IRenderingSubmesh): void;
        setSubModelMaterial(idx: number, mat: Material | null): void;
        onPipelineChange(): void;
        protected createPipelineState(mat: Material): GFXPipelineState[];
        protected destroyPipelineState(mat: Material, pso: GFXPipelineState[]): void;
        protected _doCreatePSO(pass: Pass): GFXPipelineState;
        protected onSetLocalBindings(mat: Material): void;
        protected initLocalBindings(mat: Material | null): void;
        private allocatePSO;
        private releasePSO;
    }
}
declare module "cocos/renderer/scene/customization-manager" {
    import { Model } from "cocos/renderer/scene/model";
    export type CustomCallback = (m: Model) => void;
    export interface ICustomization {
        onAttach?: CustomCallback;
        onDetach?: CustomCallback;
    }
    class Customization {
        protected _onAttach?: CustomCallback;
        protected _onDetach?: CustomCallback;
        protected _models: Record<number, number>;
        constructor(info: ICustomization);
        attach(model: Model): void;
        detach(model: Model): void;
    }
    class CustomizationManager {
        protected _customs: Record<string, Customization>;
        register(name: string, info: ICustomization): void;
        attach(name: string, model: Model): void;
        detach(name: string, model: Model): void;
    }
    export const customizationManager: CustomizationManager;
}
declare module "cocos/3d/assets/texture-cube" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Texture2D } from "cocos/assets/index";
    import { ImageAsset } from "cocos/assets/image-asset";
    import { TextureBase } from "cocos/assets/texture-base";
    interface ITextureCubeMipmap {
        front: ImageAsset;
        back: ImageAsset;
        left: ImageAsset;
        right: ImageAsset;
        top: ImageAsset;
        bottom: ImageAsset;
    }
    export class TextureCube extends TextureBase {
        /**
         * Gets the mipmap images.
         * Note that the result do not contains the auto generated mipmaps.
         */
        /**
        * Sets the mipmaps images.
        */
        mipmaps: ITextureCubeMipmap[];
        /**
         * Gets the mipmap image at level 0.
         */
        /**
        * Sets the mipmap images as a single mipmap image.
        */
        image: ITextureCubeMipmap | null;
        /**
         * convenient util for cubemap creation (even with custom mipmaps)
         * @param texture - texture asset array containing six faces in a row
         * @param out - the resulting texture cube asset
         */
        static fromTexture2DArray(textures: Texture2D[], out?: TextureCube): TextureCube;
        _mipmaps: ITextureCubeMipmap[];
        private _unfinished;
        constructor();
        onLoaded(): void;
        /**
         * Updates mipmaps at specified range of levels.
         * @param firstLevel The first level from which the sources update.
         * @description
         * If the range specified by [firstLevel, firstLevel + sources.length) exceeds
         * the actually range of mipmaps this texture contains, only overlaped mipmaps are updated.
         * Use this method if your mipmap data are modified.
         */
        updateMipmaps(firstLevel?: number, count?: number): void;
        /**
         * !#en
         * Destory this texture and immediately release its video memory. (Inherit from cc.Object.destroy)<br>
         * After destroy, this object is not usable any more.
         * You can use cc.isValid(obj) to check whether the object is destroyed before accessing it.
         * !#zh
         * 销毁该贴图，并立即释放它对应的显存。（继承自 cc.Object.destroy）<br/>
         * 销毁后，该对象不再可用。您可以在访问对象之前使用 cc.isValid(obj) 来检查对象是否已被销毁。
         */
        destroy(): boolean;
        /**
         * !#en
         * Release texture, please use destroy instead.
         * !#zh 释放纹理，请使用 destroy 替代。
         * @deprecated Since v2.0.
         */
        releaseTexture(): void;
        _serialize(): {
            base: any;
            mipmaps: {
                front: string;
                back: string;
                left: string;
                right: string;
                top: string;
                bottom: string;
            }[];
        };
        _deserialize(serializedData: ITextureCubeSerializeData, handle: any): void;
        ensureLoadImage(): void;
        protected _getTextureCreateInfo(): import("cocos/gfx/texture").IGFXTextureInfo;
        protected _getTextureViewCreateInfo(): import("cocos/gfx/texture-view").IGFXTextureViewInfo;
        protected _onImageLoaded(): void;
        protected _assetReady(): void;
    }
    interface ITextureCubeSerializeData {
        base: string;
        mipmaps: Array<{
            front: string;
            back: string;
            left: string;
            right: string;
            top: string;
            bottom: string;
        }>;
    }
}
declare module "cocos/3d/builtin/init" {
    import { Asset } from "cocos/assets/asset";
    import { GFXDevice } from "cocos/gfx/device";
    class BuiltinResMgr {
        protected _device: GFXDevice | null;
        protected _resources: Record<string, Asset>;
        initBuiltinRes(device: GFXDevice): void;
        get<T extends Asset>(uuid: string): T;
    }
    const builtinResMgr: BuiltinResMgr;
    export { builtinResMgr };
}
declare module "cocos/3d/builtin/index" {
    export * from "cocos/3d/builtin/init";
    export { default as effects } from "cocos/3d/builtin/effects";
}
declare module "cocos/renderer/scene/directional-light" {
    import { Vec3 } from "cocos/core/value-types/index";
    import { Node } from "cocos/scene-graph/index";
    import { Light } from "cocos/renderer/scene/light";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    export class DirectionalLight extends Light {
        protected _dir: Vec3;
        protected _illum: number;
        direction: Vec3;
        illuminance: number;
        constructor(scene: RenderScene, name: string, node: Node);
        update(): void;
    }
}
declare module "cocos/renderer/scene/sphere-light" {
    import { aabb } from "cocos/3d/geom-utils/index";
    import { Vec3 } from "cocos/core/value-types/index";
    import { Node } from "cocos/scene-graph/index";
    import { Light } from "cocos/renderer/scene/light";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    export class SphereLight extends Light {
        readonly position: Vec3;
        size: number;
        range: number;
        luminance: number;
        readonly aabb: aabb;
        protected _size: number;
        protected _range: number;
        protected _luminance: number;
        protected _pos: Vec3;
        protected _aabb: aabb;
        constructor(scene: RenderScene, name: string, node: Node);
        update(): void;
    }
}
declare module "cocos/renderer/scene/spot-light" {
    import { aabb, frustum } from "cocos/3d/geom-utils/index";
    import { Vec3 } from "cocos/core/value-types/index";
    import { Node } from "cocos/scene-graph/node";
    import { Light } from "cocos/renderer/scene/light";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    export class SpotLight extends Light {
        protected _dir: Vec3;
        protected _size: number;
        protected _range: number;
        protected _luminance: number;
        protected _spotAngle: number;
        protected _pos: Vec3;
        protected _aabb: aabb;
        protected _frustum: frustum;
        protected _angle: number;
        readonly position: Vec3;
        size: number;
        range: number;
        luminance: number;
        readonly direction: Vec3;
        spotAngle: number;
        readonly aabb: aabb;
        readonly frustum: frustum;
        constructor(scene: RenderScene, name: string, node: Node);
        update(): void;
    }
}
declare module "cocos/pipeline/culling" {
    import { frustum } from "cocos/3d/geom-utils/index";
    import { Camera, Light, Model } from "cocos/renderer/index";
    import { DirectionalLight } from "cocos/renderer/scene/directional-light";
    import { SphereLight } from "cocos/renderer/scene/sphere-light";
    import { SpotLight } from "cocos/renderer/scene/spot-light";
    export function cullLight(light: Light, model: Model): boolean;
    export function cullDirectionalLight(light: DirectionalLight, model: Model): boolean;
    export function cullSphereLight(light: SphereLight, model: Model): boolean;
    export function cullSpotLight(light: SpotLight, model: Model): boolean;
    export const cullSceneWithDirectionalLight: (out: Model[], modelToCull: Model[], sceneCamera: Camera, light: DirectionalLight, near: number, far: number, nearBias: number) => void;
    export const calcDirectionalLightCullFrustum: (out: frustum, sceneCamera: Camera, light: DirectionalLight, near: number, far: number, nearBias: number) => void;
}
declare module "cocos/pipeline/ppfx/smaa-blend-stage" {
    import { RenderFlow } from "cocos/pipeline/render-flow";
    import { IRenderStageInfo, RenderStage } from "cocos/pipeline/render-stage";
    import { RenderView } from "cocos/pipeline/render-view";
    export class SMAABlendStage extends RenderStage {
        private _areaTexImage;
        private _searchTexImage;
        private _areaTexAsset;
        private _searchTexAsset;
        private _hEdgeTexSampler;
        private _hAreaTexSampler;
        private _hSearchTexSampler;
        private _isAreaImageLoaded;
        private _isSearchImageLoaded;
        private _isLoaded;
        private _bindingLayout;
        constructor(flow: RenderFlow);
        initialize(info: IRenderStageInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
        rebuild(): void;
        render(view: RenderView): void;
        private bindTextures;
        private getAreaTexEncode;
        private getSearchTexEncode;
    }
}
declare module "cocos/pipeline/ppfx/smaa-edge-stage" {
    import { RenderFlow } from "cocos/pipeline/render-flow";
    import { IRenderStageInfo, RenderStage } from "cocos/pipeline/render-stage";
    import { RenderView } from "cocos/pipeline/render-view";
    export class SMAAEdgeStage extends RenderStage {
        private _hTexSampler;
        private _bindingLayout;
        constructor(flow: RenderFlow);
        initialize(info: IRenderStageInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
        rebuild(): void;
        render(view: RenderView): void;
    }
}
declare module "cocos/pipeline/ppfx/smaa-flow" {
    import { IRenderFlowInfo, RenderFlow } from "cocos/pipeline/render-flow";
    import { RenderPipeline } from "cocos/pipeline/render-pipeline";
    export class SMAAEdgeFlow extends RenderFlow {
        constructor(pipeline: RenderPipeline);
        initialize(info: IRenderFlowInfo): boolean;
        destroy(): void;
        rebuild(): void;
    }
}
declare module "cocos/pipeline/ppfx/tonemap-stage" {
    import { RenderFlow } from "cocos/pipeline/render-flow";
    import { IRenderStageInfo, RenderStage } from "cocos/pipeline/render-stage";
    import { RenderView } from "cocos/pipeline/render-view";
    export class ToneMapStage extends RenderStage {
        private _hTexSampler;
        private _hBlendTexSampler;
        private _bindingLayout;
        constructor(flow: RenderFlow);
        initialize(info: IRenderStageInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
        rebuild(): void;
        render(view: RenderView): void;
    }
}
declare module "cocos/pipeline/ppfx/tonemap-flow" {
    import { IRenderFlowInfo, RenderFlow } from "cocos/pipeline/render-flow";
    import { RenderPipeline } from "cocos/pipeline/render-pipeline";
    export class ToneMapFlow extends RenderFlow {
        constructor(pipeline: RenderPipeline);
        initialize(info: IRenderFlowInfo): boolean;
        destroy(): void;
        rebuild(): void;
    }
}
declare module "cocos/core/memop/cached-array" {
    export class CachedArray<T> {
        array: T[];
        length: number;
        private cache;
        private _compareFn;
        constructor(length: number, compareFn?: (a: T, b: T) => number);
        push(item: T): void;
        pop(): T | undefined;
        get(idx: number): T;
        clear(): void;
        sort(): void;
        concat(array: CachedArray<T>): void;
        append(array: T[]): void;
    }
}
declare module "cocos/pipeline/render-queue" {
    import { CachedArray } from "cocos/core/memop/cached-array";
    import { GFXCommandBuffer } from "cocos/gfx/command-buffer";
    import { IRenderObject, IRenderPass, IRenderQueueDesc } from "cocos/pipeline/define";
    export function opaqueCompareFn(a: IRenderPass, b: IRenderPass): number;
    export function transparentCompareFn(a: IRenderPass, b: IRenderPass): number;
    export class RenderQueue {
        queue: CachedArray<IRenderPass>;
        cmdBuffs: CachedArray<GFXCommandBuffer>;
        cmdBuffCount: number;
        private _passDesc;
        constructor(desc: IRenderQueueDesc);
        clear(): void;
        insertRenderPass(renderObj: IRenderObject, modelIdx: number, passIdx: number): boolean;
        sort(): void;
    }
}
declare module "cocos/pipeline/ui/ui-stage" {
    import { RenderFlow } from "cocos/pipeline/render-flow";
    import { IRenderStageInfo, RenderStage } from "cocos/pipeline/render-stage";
    import { RenderView } from "cocos/pipeline/render-view";
    export class UIStage extends RenderStage {
        private _uiQueue;
        constructor(flow: RenderFlow);
        initialize(info: IRenderStageInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
        rebuild(): void;
        render(view: RenderView): void;
    }
}
declare module "cocos/pipeline/ui/ui-flow" {
    import { IRenderFlowInfo, RenderFlow } from "cocos/pipeline/render-flow";
    import { RenderPipeline } from "cocos/pipeline/render-pipeline";
    import { RenderView } from "cocos/pipeline/render-view";
    export class UIFlow extends RenderFlow {
        constructor(pipeline: RenderPipeline);
        initialize(info: IRenderFlowInfo): boolean;
        destroy(): void;
        rebuild(): void;
        render(view: RenderView): void;
    }
}
declare module "cocos/pipeline/pipeline-funcs" {
    import { IGFXColor } from "cocos/gfx/define";
    export function SRGBToLinear(gamma: IGFXColor): IGFXColor;
    export function LinearToSRGB(linear: IGFXColor): IGFXColor;
}
declare module "cocos/pipeline/forward/forward-stage" {
    import { RenderFlow } from "cocos/pipeline/render-flow";
    import { IRenderStageInfo, RenderStage } from "cocos/pipeline/render-stage";
    import { RenderView } from "cocos/pipeline/render-view";
    export class ForwardStage extends RenderStage {
        private _opaqueQueue;
        private _transparentQueue;
        constructor(flow: RenderFlow);
        initialize(info: IRenderStageInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
        rebuild(): void;
        render(view: RenderView): void;
    }
}
declare module "cocos/pipeline/forward/forward-flow" {
    import { IRenderFlowInfo, RenderFlow } from "cocos/pipeline/render-flow";
    import { RenderPipeline } from "cocos/pipeline/render-pipeline";
    export enum ForwardStagePriority {
        FORWARD = 0
    }
    export class ForwardFlow extends RenderFlow {
        constructor(pipeline: RenderPipeline);
        initialize(info: IRenderFlowInfo): boolean;
        destroy(): void;
        rebuild(): void;
    }
}
declare module "cocos/pipeline/forward/forward-pipeline" {
    import { Root } from "cocos/core/root";
    import { GFXBuffer } from "cocos/gfx/buffer";
    import { UBOForwardLight } from "cocos/pipeline/define";
    import { IRenderPipelineInfo, RenderPipeline } from "cocos/pipeline/render-pipeline";
    import { RenderView } from "cocos/pipeline/render-view";
    export enum ForwardFlowPriority {
        FORWARD = 0,
        UI = 10
    }
    export class ForwardPipeline extends RenderPipeline {
        protected _uboLights: UBOForwardLight;
        protected _lightsUBO: GFXBuffer | null;
        private _validLights;
        private _lightIndexOffset;
        private _lightIndices;
        readonly lightsUBO: GFXBuffer;
        constructor(root: Root);
        initialize(info: IRenderPipelineInfo): boolean;
        destroy(): void;
        rebuild(): void;
        protected updateUBOs(view: RenderView): void;
        protected sceneCulling(view: RenderView): void;
        private cullLightPerModel;
        private sortLight;
    }
}
declare module "cocos/gfx/vertex-format-sample" {
    import { GFXAttributeName, GFXFormat } from "cocos/gfx/define";
    const vfmt: {
        name: GFXAttributeName;
        format: GFXFormat;
    }[];
    export { vfmt, };
}
declare module "cocos/renderer/ui/ui-batch-model" {
    import { GFXInputAssembler } from "cocos/gfx/input-assembler";
    import { Model } from "cocos/renderer/scene/model";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    import { UIDrawBatch } from "cocos/renderer/ui/ui";
    export class UIBatchModel extends Model {
        private _subModel;
        constructor(scene: RenderScene);
        updateTransform(): void;
        updateUBOs(): void;
        initialize(ia: GFXInputAssembler, batch: UIDrawBatch): void;
        destroy(): void;
    }
}
declare module "cocos/renderer/ui/ui-material" {
    import { Material } from "cocos/3d/assets/material";
    import { GFXPipelineState } from "cocos/gfx/pipeline-state";
    import { Pass } from "cocos/renderer/core/pass";
    export interface IUIMaterialInfo {
        material: Material;
    }
    export class UIMaterial {
        readonly material: Material;
        readonly pass: Pass;
        protected _material: Material | null;
        protected _pass: Pass | null;
        private _psos;
        constructor();
        initialize(info: IUIMaterialInfo): boolean;
        getPipelineState(): GFXPipelineState;
        revertPipelineState(pso: GFXPipelineState): void;
        destroy(): void;
    }
}
declare module "cocos/renderer/ui/ui" {
    import { CanvasComponent, IAssembler, MeshBuffer, UIComponent } from "cocos/3d/index";
    import { Material } from "cocos/3d/assets/material";
    import { Root } from "cocos/core/root";
    import { GFXBindingLayout } from "cocos/gfx/binding-layout";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXPipelineState } from "cocos/gfx/pipeline-state";
    import { GFXTextureView } from "cocos/gfx/texture-view";
    import { Camera } from "cocos/renderer/scene/camera";
    import { Model } from "cocos/renderer/scene/model";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    import { UIMaterial } from "cocos/renderer/ui/ui-material";
    export class UIDrawBatch {
        camera: Camera | null;
        bufferBatch: MeshBuffer | null;
        model: Model | null;
        material: Material | null;
        texView: GFXTextureView | null;
        firstIdx: number;
        idxCount: number;
        pipelineState: GFXPipelineState | null;
        bindingLayout: GFXBindingLayout | null;
        destroy(ui: UI): void;
        clear(ui: UI): void;
    }
    /**
     * @zh
     * UI 渲染流程
     */
    export class UI {
        private _root;
        readonly renderScene: RenderScene;
        readonly currBufferBatch: MeshBuffer | null;
        debugScreen: CanvasComponent | null;
        device: GFXDevice;
        private _screens;
        private _debugScreen;
        private _bufferBatchPool;
        private _drawBatchPool;
        private _cmdBuff;
        private _scene;
        private _attributes;
        private _meshBuffers;
        private _meshBufferUseCount;
        private _uiMaterials;
        private _batches;
        private _sortChildList;
        private _uiModelPool;
        private _modelInUse;
        private _emptyMaterial;
        private _currMeshBuffer;
        private _currMaterial;
        private _currTexView;
        private _currCanvas;
        constructor(_root: Root);
        initialize(): boolean;
        destroy(): void;
        getRenderSceneGetter(): () => any;
        _getUIMaterial(mat: Material): UIMaterial;
        _removeUIMaterial(hash: number): void;
        /**
         * @zh
         * 添加屏幕组件管理。
         *
         * @param comp - 屏幕组件。
         */
        addScreen(comp: CanvasComponent): void;
        /**
         * @zh
         * 通过屏幕编号获得屏幕组件。
         *
         * @param visibility - 屏幕编号。
         */
        getScreen(visibility: number): CanvasComponent | null;
        /**
         * @zh
         * 移除屏幕组件管理。
         *
         * @param comp - 被移除的屏幕。
         */
        removeScreen(comp: CanvasComponent): void;
        update(dt: number): void;
        render(): void;
        /**
         * @zh
         * UI 渲染组件数据提交流程。
         *
         * @param comp - 当前执行组件。
         * @param frame - 当前执行组件贴图。
         * @param assembler - 当前组件渲染数据组装器。
         */
        commitComp(comp: UIComponent, frame?: GFXTextureView | null, assembler?: IAssembler): void;
        /**
         * @zh
         * UI 渲染数据合批
         */
        autoMergeBatches(): void;
        /**
         * @zh
         * 跳过默认合批操作，执行强制合批。
         *
         * @param material - 当前批次的材质。
         * @param sprite - 当前批次的精灵帧。
         */
        forceMergeBatches(material: Material, sprite: GFXTextureView | null): void;
        private _deleteUIMaterial;
        private _destroyUIMaterials;
        private _walk;
        private _defineNodeOrder;
        private _renderScreens;
        private _recursiveScreenNode;
        private _reset;
        private _createMeshBuffer;
        private _requireBufferBatch;
    }
}
declare module "cocos/core/root" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXWindow, IGFXWindowInfo } from "cocos/gfx/window";
    import { RenderPipeline } from "cocos/pipeline/render-pipeline";
    import { IRenderViewInfo, RenderView } from "cocos/pipeline/render-view";
    import { IRenderSceneInfo, RenderScene } from "cocos/renderer/scene/render-scene";
    import { UI } from "cocos/renderer/ui/ui";
    export let _createSceneFun: any;
    export let _createViewFun: any;
    export interface IRootInfo {
        enableHDR?: boolean;
    }
    export interface ISceneInfo {
        name: string;
    }
    export class Root {
        readonly device: GFXDevice;
        readonly mainWindow: GFXWindow | null;
        readonly curWindow: GFXWindow | null;
        readonly windows: GFXWindow[];
        readonly pipeline: RenderPipeline;
        readonly ui: UI;
        readonly scenes: RenderScene[];
        readonly views: RenderView[];
        readonly cumulativeTime: number;
        readonly frameTime: number;
        readonly frameCount: number;
        readonly fps: number;
        _createSceneFun: any;
        _createViewFun: any;
        private _device;
        private _windows;
        private _mainWindow;
        private _curWindow;
        private _pipeline;
        private _ui;
        private _scenes;
        private _views;
        private _time;
        private _frameTime;
        private _fpsTime;
        private _frameCount;
        private _fps;
        constructor(device: GFXDevice);
        initialize(info: IRootInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
        activeWindow(window: GFXWindow): void;
        resetCumulativeTime(): void;
        frameMove(deltaTime: number): void;
        createWindow(info: IGFXWindowInfo): GFXWindow | null;
        destroyWindow(window: GFXWindow): void;
        destroyWindows(): void;
        createScene(info: IRenderSceneInfo): RenderScene;
        destroyScene(scene: RenderScene): void;
        destroyScenes(): void;
        createView(info: IRenderViewInfo): RenderView;
        destroyView(view: RenderView): void;
        destroyViews(): void;
    }
}
declare module "cocos/scene-graph/layers" {
    /**
     * Entity layer system
     */
    export class Layers {
        static Default: number;
        static IgnoreRaycast: number;
        static Gizmos: number;
        static Editor: number;
        static All: number;
        static RaycastMask: number;
        /**
         * Add a new layer
         * @param {string} name name of the new layer
         * @return {number} new layer's index
         */
        static addLayer(name: string): number | undefined;
        /**
         * Make a layer mask accepting nothing but the listed layers
         * @param {number[]} includes layers accepted by the mask
         * @return {number} the specified layer mask
         */
        static makeInclusiveMask(includes: number[]): number;
        /**
         * Make a layer mask accepting everything but the listed layers
         * @param {number[]} excludes layers rejected by the mask
         * @return {number} the specified layer mask
         */
        static makeExclusiveMask(excludes: number[]): number;
        /**
         * Check a layer is accepted by the mask or not
         * @param {number} layer the layer number to be tested
         * @param {number} mask the testing layer mask
         * @return {boolean} true if accepted
         */
        static check(layer: number, mask: number): boolean;
        private static _nextAvailable;
    }
}
declare module "cocos/renderer/scene/ambient" {
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    export class Ambient {
        static SUN_ILLUM: number;
        static SKY_ILLUM: number;
        enabled: any;
        skyColor: Float32Array;
        skyIllum: number;
        groundAlbedo: Float32Array;
        protected _enabled: boolean;
        protected _skyColor: Float32Array;
        protected _skyIllum: number;
        protected _groundAlbedo: Float32Array;
        protected _scene: RenderScene;
        constructor(scene: RenderScene);
        update(): void;
    }
}
declare module "cocos/renderer/scene/planar-shadow" {
    import { Color, Mat4, Vec3 } from "cocos/core/value-types/index";
    import { DirectionalLight } from "cocos/renderer/scene/directional-light";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    import { SphereLight } from "cocos/renderer/scene/sphere-light";
    export class PlanarShadow {
        enabled: boolean;
        normal: Vec3;
        distance: number;
        shadowColor: Color;
        readonly matLight: Mat4;
        readonly data: Float32Array;
        protected _scene: RenderScene;
        protected _enabled: boolean;
        protected _normal: Vec3;
        protected _distance: number;
        protected _matLight: Mat4;
        protected _data: Float32Array;
        constructor(scene: RenderScene);
        updateSphereLight(light: SphereLight): void;
        updateDirLight(light: DirectionalLight): void;
    }
}
declare module "cocos/scene-graph/find" {
    import { Node } from "cocos/scene-graph/node";
    /**
     * Finds a node by hierarchy path, the path is case-sensitive.
     * It will traverse the hierarchy by splitting the path using '/' character.
     * This function will still returns the node even if it is inactive.
     * It is recommended to not use this function every frame instead cache the result at startup.
     */
    export function find(path: string, referenceNode?: Node): Node | null;
}
declare module "cocos/3d/primitive/define" {
    import { GFXPrimitiveMode } from "cocos/gfx/define";
    import { IGFXAttribute } from "cocos/gfx/input-assembler";
    export interface IGeometryOptions {
        /**
         * Whether to include normal. Default to true.
         */
        includeNormal: boolean;
        /**
         * Whether to include uv. Default to true.
         */
        includeUV: boolean;
    }
    export function applyDefaultGeometryOptions<GeometryOptions = IGeometryOptions>(options?: RecursivePartial<IGeometryOptions>): GeometryOptions;
    export interface IGeometry {
        /**
         * Vertex positions.
         */
        positions: number[];
        /**
         * Min position.
         */
        minPos?: {
            x: number;
            y: number;
            z: number;
        };
        /**
         * Max position.
         */
        maxPos?: {
            x: number;
            y: number;
            z: number;
        };
        /**
         * Bounding sphere radius.
         */
        boundingRadius?: number;
        /**
         * Gemetry indices, if one needs indexed-draw.
         */
        indices?: number[];
        /**
         * Vertex normals.
         */
        normals?: number[];
        /**
         * Texture coordinates.
         */
        uvs?: number[];
        /**
         * Vertex colors.
         */
        colors?: number[];
        /**
         * Topology of the geometry vertices. Default is TRIANGLE_LIST.
         */
        primitiveMode?: GFXPrimitiveMode;
        /**
         * whether rays casting from the back face of this geometry could collide with it
         */
        doubleSided?: boolean;
        /**
         * specify vertex attributes, use (positions|normals|uvs|colors) as keys
         */
        attributes?: IGFXAttribute[];
    }
}
declare module "cocos/3d/misc/utils" {
    export { find } from "cocos/scene-graph/find";
    import { Skeleton } from "cocos/3d/assets/index";
    import { Mesh } from "cocos/3d/assets/mesh";
    import { aabb } from "cocos/3d/geom-utils/index";
    import { IGeometry } from "cocos/3d/primitive/define";
    /**
     * save a color buffer to a PPM file
     */
    export function toPPM(buffer: Uint8Array, w: number, h: number): string;
    export interface ICreateMeshOptions {
        calculateBounds?: boolean;
    }
    export function createMesh(geometry: IGeometry, out?: Mesh, options?: ICreateMeshOptions): Mesh;
    export function calculateBoneSpaceBounds(mesh: Mesh, skeleton: Skeleton): (aabb | null)[];
}
declare module "cocos/3d/primitive/utils" {
    import { IGeometry } from "cocos/3d/primitive/define";
    /**
     * @deprecated
     */
    export function wireframe(indices: number[]): number[];
    /**
     * @deprecated
     */
    export function invWinding(indices: number[]): number[];
    /**
     * @deprecated
     */
    export function toWavefrontOBJ(primitive: IGeometry, scale?: number): string;
    /**
     * @deprecated
     */
    export function normals(positions: number[], normals: number[], length?: number): any[];
}
declare module "cocos/3d/primitive/box" {
    import { IGeometry, IGeometryOptions } from "cocos/3d/primitive/define";
    interface IBoxOptions extends RecursivePartial<IGeometryOptions> {
        /**
         * Box extent on X-axis.
         */
        width?: number;
        /**
         * Box extent on Y-axis.
         */
        height?: number;
        /**
         * Box extent on Z-axis.
         */
        length?: number;
        /**
         * Segment count on X-axis.
         */
        widthSegments?: number;
        /**
         * Segment count on Y-axis.
         */
        heightSegments?: number;
        /**
         * Segment count on Z-axis.
         */
        lengthSegments?: number;
    }
    /**
     * This function generates a box with specified extents and centered at origin,
     * but may be repositioned through `center` option).
     * @param options Options.
     */
    export default function box(options?: IBoxOptions): IGeometry;
}
declare module "cocos/3d/primitive/cylinder" {
    import { IGeometry, IGeometryOptions } from "cocos/3d/primitive/define";
    export interface ICylinderOptions extends IGeometryOptions {
        radialSegments: number;
        heightSegments: number;
        capped: boolean;
        arc: number;
    }
    export default function (radiusTop?: number, radiusBottom?: number, height?: number, opts?: RecursivePartial<ICylinderOptions>): IGeometry;
}
declare module "cocos/3d/primitive/cone" {
    import { ICylinderOptions } from "cocos/3d/primitive/cylinder";
    type IConeOptions = ICylinderOptions;
    export default function (radius?: number, height?: number, opts?: RecursivePartial<IConeOptions>): import("cocos/3d/primitive").IGeometry;
}
declare module "cocos/3d/primitive/plane" {
    import { IGeometry, IGeometryOptions } from "cocos/3d/primitive/define";
    interface IPlaneOptions extends RecursivePartial<IGeometryOptions> {
        /**
         * Plane extent on X-axis.
         */
        width: number;
        /**
         * Plane extent on Z-axis.
         */
        length: number;
        /**
         * Segment count on X-axis.
         */
        widthSegments: number;
        /**
         * Segment count on Z-axis.
         */
        lengthSegments: number;
    }
    /**
     * This function generates a plane on XOZ plane with positive Y direction.
     * @param options Options.
     */
    export default function (options?: IPlaneOptions): IGeometry;
}
declare module "cocos/3d/primitive/quad" {
    import { IGeometry, IGeometryOptions } from "cocos/3d/primitive/define";
    /**
     * Generate a quad with width and height both to 1, centered at origin.
     * @param options Options.
     */
    export default function quad(options?: IGeometryOptions): IGeometry;
}
declare module "cocos/3d/primitive/sphere" {
    import { IGeometry, IGeometryOptions } from "cocos/3d/primitive/define";
    interface ISphereOptions extends IGeometryOptions {
        segments: number;
    }
    export default function (radius?: number, opts?: RecursivePartial<ISphereOptions>): IGeometry;
}
declare module "cocos/3d/primitive/torus" {
    import { vec3 } from "cocos/core/vmath/index";
    import { IGeometryOptions } from "cocos/3d/primitive/define";
    interface ITorusOptions extends IGeometryOptions {
        radialSegments: number;
        tubularSegments: number;
        arc: number;
    }
    export default function (radius?: number, tube?: number, opts?: RecursivePartial<ITorusOptions>): {
        positions: number[];
        normals: number[];
        uvs: number[];
        indices: number[];
        minPos: vec3;
        maxPos: vec3;
        boundingRadius: number;
    };
}
declare module "cocos/3d/primitive/capsule" {
    import { vec3 } from "cocos/core/vmath/index";
    export interface ICapsuteOptions {
        sides: number;
        heightSegments: number;
        capped: boolean;
        arc: number;
    }
    export default function (radiusTop?: number, radiusBottom?: number, height?: number, opts?: RecursivePartial<ICapsuteOptions>): {
        positions: number[];
        normals: number[];
        uvs: number[];
        indices: number[];
        minPos: vec3;
        maxPos: vec3;
        boundingRadius: number;
    };
}
declare module "cocos/3d/primitive/circle" {
    import { IGeometry, IGeometryOptions } from "cocos/3d/primitive/define";
    interface ICircleOptions extends IGeometryOptions {
        segments: number;
    }
    /**
     * Generate a circle with radius 1, centered at origin.
     * @param options Options.
     */
    export default function circle(options?: RecursivePartial<ICircleOptions> | ICircleOptions): IGeometry;
}
declare module "cocos/3d/primitive/transform" {
    import { IGeometry } from "cocos/3d/primitive/define";
    export function translate(geometry: IGeometry, offset: {
        x?: number;
        y?: number;
        z?: number;
    }): IGeometry;
    export function scale(geometry: IGeometry, value: {
        x?: number;
        y?: number;
        z?: number;
    }): IGeometry;
    export function wireframed(geometry: IGeometry): IGeometry;
}
declare module "cocos/3d/primitive/index" {
    export * from "cocos/3d/primitive/utils";
    export * from "cocos/3d/primitive/define";
    export { default as box } from "cocos/3d/primitive/box";
    export { default as cone } from "cocos/3d/primitive/cone";
    export { default as cylinder } from "cocos/3d/primitive/cylinder";
    export { default as plane } from "cocos/3d/primitive/plane";
    export { default as quad } from "cocos/3d/primitive/quad";
    export { default as sphere } from "cocos/3d/primitive/sphere";
    export { default as torus } from "cocos/3d/primitive/torus";
    export { default as capsule } from "cocos/3d/primitive/capsule";
    export { default as circle } from "cocos/3d/primitive/circle";
    export { translate, scale, wireframed } from "cocos/3d/primitive/transform";
}
declare module "cocos/renderer/scene/skybox" {
    import { Material } from "cocos/3d/assets/material";
    import { TextureCube } from "cocos/3d/assets/texture-cube";
    import { Model } from "cocos/renderer/scene/model";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    export class Skybox extends Model {
        cubemap: TextureCube | null;
        isRGBE: boolean;
        protected _default: TextureCube;
        protected _cubemap: TextureCube;
        protected _isRGBE: boolean;
        protected _material: Material;
        constructor(scene: RenderScene);
        protected _initMaterial(): void;
        protected _updateBindingLayout(): void;
    }
}
declare module "cocos/renderer/scene/render-scene" {
    import { ray } from "cocos/3d/geom-utils/index";
    import { Root } from "cocos/core/root";
    import { Node } from "cocos/scene-graph/node";
    import { Ambient } from "cocos/renderer/scene/ambient";
    import { Camera, ICameraInfo } from "cocos/renderer/scene/camera";
    import { DirectionalLight } from "cocos/renderer/scene/directional-light";
    import { Model } from "cocos/renderer/scene/model";
    import { PlanarShadow } from "cocos/renderer/scene/planar-shadow";
    import { Skybox } from "cocos/renderer/scene/skybox";
    import { SphereLight } from "cocos/renderer/scene/sphere-light";
    import { SpotLight } from "cocos/renderer/scene/spot-light";
    export interface IRenderSceneInfo {
        name: string;
    }
    export interface ISceneNodeInfo {
        name: string;
        isStatic?: boolean;
    }
    export interface IRaycastResult {
        node: Node;
        distance: number;
    }
    export class RenderScene {
        readonly root: Root;
        readonly name: string;
        readonly cameras: Camera[];
        readonly ambient: Ambient;
        readonly skybox: Skybox;
        readonly planarShadow: PlanarShadow;
        readonly defaultMainLightNode: Node;
        readonly mainLight: DirectionalLight;
        readonly sphereLights: SphereLight[];
        readonly spotLights: SpotLight[];
        readonly models: Model[];
        static registerCreateFunc(root: Root): void;
        private _root;
        private _name;
        private _cameras;
        private _ambient;
        private _skybox;
        private _planarShadow;
        private _mainLight;
        private _defaultMainLightNode;
        private _sphereLights;
        private _spotLights;
        private _models;
        private _modelId;
        constructor(root: Root);
        initialize(info: IRenderSceneInfo): boolean;
        destroy(): void;
        createCamera(info: ICameraInfo): Camera;
        destroyCamera(camera: Camera): void;
        destroyCameras(): void;
        createSphereLight(name: string, node: Node): SphereLight | null;
        destroySphereLight(light: SphereLight): void;
        createSpotLight(name: string, node: Node): SpotLight | null;
        destroySpotLight(light: SpotLight): void;
        destroyPointLights(): void;
        destroySpotLights(): void;
        createModel<T extends Model>(clazz: new (scene: RenderScene, node: Node) => T, node: Node): T;
        destroyModel(model: Model): void;
        destroyModels(): void;
        onPipelineChange(): void;
        generateModelId(): number;
        /**
         * Cast a ray into the scene, record all the intersected models in the result array
         * @param worldRay - the testing ray
         * @param mask - the layer mask to filter the models
         * @returns the results array
         */
        raycast(worldRay: ray, mask?: number): IRaycastResult[];
    }
}
declare module "cocos/components/component" {
    import { CCObject } from '../core/data/object';
    import { Node } from "cocos/scene-graph/index";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    import { Rect } from "cocos/core/index";
    /**
     * !#en
     * Base class for everything attached to Node(Entity).<br/>
     * <br/>
     * NOTE: Not allowed to use construction parameters for Component's subclasses,
     *       because Component is created by the engine.
     * !#zh
     * 所有附加到节点的基类。<br/>
     * <br/>
     * 注意：不允许使用组件的子类构造参数，因为组件是由引擎创建的。
     *
     * @class Component
     * @extends Object
     */
    class Component extends CCObject {
        name: string;
        /**
         * !#en The uuid for editor.
         * !#zh 组件的 uuid，用于编辑器。
         * @property uuid
         * @type {String}
         * @readOnly
         * @example
         * cc.log(comp.uuid);
         */
        readonly uuid: string;
        readonly __scriptAsset: null;
        /**
         * !#en indicates whether this component is enabled or not.
         * !#zh 表示该组件自身是否启用。
         * @property enabled
         * @type {Boolean}
         * @default true
         * @example
         * comp.enabled = true;
         * cc.log(comp.enabled);
         */
        enabled: boolean;
        /**
         * !#en indicates whether this component is enabled and its node is also active in the hierarchy.
         * !#zh 表示该组件是否被启用并且所在的节点也处于激活状态。
         * @property enabledInHierarchy
         * @type {Boolean}
         * @readOnly
         * @example
         * cc.log(comp.enabledInHierarchy);
         */
        readonly enabledInHierarchy: boolean;
        /**
         * !#en Returns a value which used to indicate the onLoad get called or not.
         * !#zh 返回一个值用来判断 onLoad 是否被调用过，不等于 0 时调用过，等于 0 时未调用。
         * @property _isOnLoadCalled
         * @type {Number}
         * @readOnly
         * @example
         * cc.log(this._isOnLoadCalled > 0);
         */
        readonly _isOnLoadCalled: number;
        static system: null;
        /**
         * !#en The node this component is attached to. A component is always attached to a node.
         * !#zh 该组件被附加到的节点。组件总会附加到一个节点。
         * @property node
         * @type {Node}
         * @example
         * cc.log(comp.node);
         */
        node: Node;
        /**
         * @property _enabled
         * @type {Boolean}
         * @private
         */
        _enabled: boolean;
        _sceneGetter: null | (() => RenderScene);
        /**
         * For internal usage.
         */
        _id: string;
        /**
         * Register all related EventTargets,
         * all event callbacks will be removed in _onPreDestroy
         */
        private _eventTargets;
        constructor();
        _getRenderScene(): RenderScene;
        /**
         * !#en Adds a component class to the node. You can also add component to node by passing in the name of the script.
         * !#zh 向节点添加一个指定类型的组件类，你还可以通过传入脚本的名称来添加组件。
         * @example
         * var sprite = node.addComponent(cc.Sprite);
         */
        addComponent<T extends Component>(classConstructor: Constructor<T>): T | null;
        /**
         * !#en Adds a component class to the node. You can also add component to node by passing in the name of the script.
         * !#zh 向节点添加一个指定类型的组件类，你还可以通过传入脚本的名称来添加组件。
         * @example
         * var test = node.addComponent("Test");
         */
        addComponent(className: string): Component | null;
        /**
         * !#en
         * Returns the component of supplied type if the node has one attached, null if it doesn't.<br/>
         * You can also get component in the node by passing in the name of the script.
         * !#zh
         * 获取节点上指定类型的组件，如果节点有附加指定类型的组件，则返回，如果没有则为空。<br/>
         * 传入参数也可以是脚本的名称。
         * @example
         * // get sprite component.
         * var sprite = node.getComponent(cc.Sprite);
         */
        getComponent<T extends Component>(classConstructor: Constructor<T>): T | null;
        /**
         * !#en
         * Returns the component of supplied type if the node has one attached, null if it doesn't.<br/>
         * You can also get component in the node by passing in the name of the script.
         * !#zh
         * 获取节点上指定类型的组件，如果节点有附加指定类型的组件，则返回，如果没有则为空。<br/>
         * 传入参数也可以是脚本的名称。
         * @example
         * // get custom test calss.
         * var test = node.getComponent("Test");
         */
        getComponent(className: string): Component | null;
        /**
         * !#en Returns all components of supplied type in the node.
         * !#zh 返回节点上指定类型的所有组件。
         * @example
         * var sprites = node.getComponents(cc.Sprite);
         */
        getComponents<T extends Component>(classConstructor: Constructor<T>): T[];
        /**
         * !#en Returns all components of supplied type in the node.
         * !#zh 返回节点上指定类型的所有组件。
         * @example
         * var tests = node.getComponents("Test");
         */
        getComponents(className: string): Component[];
        /**
         * !#en Returns the component of supplied type in any of its children using depth first search.
         * !#zh 递归查找所有子节点中第一个匹配指定类型的组件。
         * @example
         * var sprite = node.getComponentInChildren(cc.Sprite);
         */
        getComponentInChildren<T extends Component>(classConstructor: Constructor<T>): T | null;
        /**
         * !#en Returns the component of supplied type in any of its children using depth first search.
         * !#zh 递归查找所有子节点中第一个匹配指定类型的组件。
         * @example
         * var Test = node.getComponentInChildren("Test");
         */
        getComponentInChildren(className: string): Component | null;
        /**
         * !#en Returns all components of supplied type in self or any of its children.
         * !#zh 递归查找自身或所有子节点中指定类型的组件
         * @example
         * var sprites = node.getComponentsInChildren(cc.Sprite);
         */
        getComponentsInChildren<T extends Component>(classConstructor: Constructor<T>): T[];
        /**
         * !#en Returns all components of supplied type in self or any of its children.
         * !#zh 递归查找自身或所有子节点中指定类型的组件
         * @example
         * var tests = node.getComponentsInChildren("Test");
         */
        getComponentsInChildren(className: string): Component[];
        destroy(): any;
        _onPreDestroy(): void;
        _instantiate(cloned: any): any;
        /**
         * !#en
         * Schedules a custom selector.<br/>
         * If the selector is already scheduled, then the interval parameter will be updated without scheduling it again.
         * !#zh
         * 调度一个自定义的回调函数。<br/>
         * 如果回调函数已调度，那么将不会重复调度它，只会更新时间间隔参数。
         * @method schedule
         * @param {function} callback The callback function
         * @param {Number} [interval=0]  Tick interval in seconds. 0 means tick every frame.
         * @param {Number} [repeat=cc.macro.REPEAT_FOREVER]    The selector will be executed (repeat + 1) times, you can use cc.macro.REPEAT_FOREVER for tick infinitely.
         * @param {Number} [delay=0]     The amount of time that the first tick will wait before execution.
         * @example
         * var timeCallback = function (dt) {
         *   cc.log("time: " + dt);
         * }
         * this.schedule(timeCallback, 1);
         */
        schedule(callback: any, interval: any, repeat: any, delay: any): void;
        /**
         * !#en Schedules a callback function that runs only once, with a delay of 0 or larger.
         * !#zh 调度一个只运行一次的回调函数，可以指定 0 让回调函数在下一帧立即执行或者在一定的延时之后执行。
         * @method scheduleOnce
         * @see cc.Node#schedule
         * @param {function} callback  A function wrapped as a selector
         * @param {Number} [delay=0]  The amount of time that the first tick will wait before execution.
         * @example
         * var timeCallback = function (dt) {
         *   cc.log("time: " + dt);
         * }
         * this.scheduleOnce(timeCallback, 2);
         */
        scheduleOnce(callback: any, delay: any): void;
        /**
         * !#en Unschedules a custom callback function.
         * !#zh 取消调度一个自定义的回调函数。
         * @method unschedule
         * @see cc.Node#schedule
         * @param {function} callback_fn  A function wrapped as a selector
         * @example
         * this.unschedule(_callback);
         */
        unschedule(callback_fn: any): void;
        /**
         * !#en
         * unschedule all scheduled callback functions: custom callback functions, and the 'update' callback function.<br/>
         * Actions are not affected by this method.
         * !#zh 取消调度所有已调度的回调函数：定制的回调函数以及 'update' 回调函数。动作不受此方法影响。
         * @method unscheduleAllCallbacks
         * @example
         * this.unscheduleAllCallbacks();
         */
        unscheduleAllCallbacks(): void;
        /**
         * !#en Update is called every frame, if the Component is enabled.<br/>
         * This is a lifecycle method. It may not be implemented in the super class.
         * You can only call its super class method inside it. It should not be called manually elsewhere.
         * !#zh 如果该组件启用，则每帧调用 update。<br/>
         * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。
         * @param dt - the delta time in seconds it took to complete the last frame
         */
        protected update?(dt: number): void;
        /**
         * !#en LateUpdate is called every frame, if the Component is enabled.<br/>
         * This is a lifecycle method. It may not be implemented in the super class.
         * You can only call its super class method inside it. It should not be called manually elsewhere.
         * !#zh 如果该组件启用，则每帧调用 LateUpdate。<br/>
         * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。
         */
        protected lateUpdate?(): void;
        /**
         * `__preload` is called before every onLoad.
         * It is used to initialize the builtin components internally,
         * to avoid checking whether onLoad is called before every public method calls.
         * This method should be removed if script priority is supported.
         * @private
         */
        protected __preload?(): void;
        /**
         * !#en
         * When attaching to an active node or its node first activated.
         * onLoad is always called before any start functions, this allows you to order initialization of scripts.<br/>
         * This is a lifecycle method. It may not be implemented in the super class.
         * You can only call its super class method inside it. It should not be called manually elsewhere.
         * !#zh
         * 当附加到一个激活的节点上或者其节点第一次激活时候调用。onLoad 总是会在任何 start 方法调用前执行，这能用于安排脚本的初始化顺序。<br/>
         * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。
         */
        protected onLoad?(): void;
        /**
         * !#en
         * Called before all scripts' update if the Component is enabled the first time.
         * Usually used to initialize some logic which need to be called after all components' `onload` methods called.<br/>
         * This is a lifecycle method. It may not be implemented in the super class.
         * You can only call its super class method inside it. It should not be called manually elsewhere.
         * !#zh
         * 如果该组件第一次启用，则在所有组件的 update 之前调用。通常用于需要在所有组件的 onLoad 初始化完毕后执行的逻辑。<br/>
         * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。
         */
        protected start?(): void;
        /**
         * !#en Called when this component becomes enabled and its node is active.<br/>
         * This is a lifecycle method. It may not be implemented in the super class.
         * You can only call its super class method inside it. It should not be called manually elsewhere.
         * !#zh 当该组件被启用，并且它的节点也激活时。<br/>
         * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。
         */
        protected onEnable?(): void;
        /**
         * !#en Called when this component becomes disabled or its node becomes inactive.<br/>
         * This is a lifecycle method. It may not be implemented in the super class.
         * You can only call its super class method inside it. It should not be called manually elsewhere.
         * !#zh 当该组件被禁用或节点变为无效时调用。<br/>
         * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。
         */
        protected onDisable?(): void;
        /**
         * !#en Called when this component will be destroyed.<br/>
         * This is a lifecycle method. It may not be implemented in the super class.
         * You can only call its super class method inside it. It should not be called manually elsewhere.
         * !#zh 当该组件被销毁时调用<br/>
         * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。
         */
        protected onDestroy?(): void;
        protected onFocusInEditor?(): void;
        protected onLostFocusInEditor?(): void;
        /**
         * !#en Called to initialize the component or node’s properties when adding the component the first time or when the Reset command is used.
         * This function is only called in editor.
         * !#zh 用来初始化组件或节点的一些属性，当该组件被第一次添加到节点上或用户点击了它的 Reset 菜单时调用。这个回调只会在编辑器下调用。
         */
        protected resetInEditor?(): void;
        /**
         * !#en
         * If the component's bounding box is different from the node's, you can implement this method to supply
         * a custom axis aligned bounding box (AABB), so the editor's scene view can perform hit test properly.
         * !#zh
         * 如果组件的包围盒与节点不同，您可以实现该方法以提供自定义的轴向对齐的包围盒（AABB），
         * 以便编辑器的场景视图可以正确地执行点选测试。
         * @param out_rect - the Rect to receive the bounding box
         */
        protected _getLocalBounds?(out_rect: Rect): void;
        /**
         * !#en
         * onRestore is called after the user clicks the Reset item in the Inspector's context menu or performs
         * an undo operation on this component.<br/>
         * <br/>
         * If the component contains the "internal state", short for "temporary member variables which not included<br/>
         * in its CCClass properties", then you may need to implement this function.<br/>
         * <br/>
         * The editor will call the getset accessors of your component to record/restore the component's state<br/>
         * for undo/redo operation. However, in extreme cases, it may not works well. Then you should implement<br/>
         * this function to manually synchronize your component's "internal states" with its public properties.<br/>
         * Once you implement this function, all the getset accessors of your component will not be called when<br/>
         * the user performs an undo/redo operation. Which means that only the properties with default value<br/>
         * will be recorded or restored by editor.<br/>
         * <br/>
         * Similarly, the editor may failed to reset your component correctly in extreme cases. Then if you need<br/>
         * to support the reset menu, you should manually synchronize your component's "internal states" with its<br/>
         * properties in this function. Once you implement this function, all the getset accessors of your component<br/>
         * will not be called during reset operation. Which means that only the properties with default value<br/>
         * will be reset by editor.
         *
         * This function is only called in editor mode.
         * !#zh
         * onRestore 是用户在检查器菜单点击 Reset 时，对此组件执行撤消操作后调用的。<br/>
         * <br/>
         * 如果组件包含了“内部状态”（不在 CCClass 属性中定义的临时成员变量），那么你可能需要实现该方法。<br/>
         * <br/>
         * 编辑器执行撤销/重做操作时，将调用组件的 get set 来录制和还原组件的状态。
         * 然而，在极端的情况下，它可能无法良好运作。<br/>
         * 那么你就应该实现这个方法，手动根据组件的属性同步“内部状态”。
         * 一旦你实现这个方法，当用户撤销或重做时，组件的所有 get set 都不会再被调用。
         * 这意味着仅仅指定了默认值的属性将被编辑器记录和还原。<br/>
         * <br/>
         * 同样的，编辑可能无法在极端情况下正确地重置您的组件。<br/>
         * 于是如果你需要支持组件重置菜单，你需要在该方法中手工同步组件属性到“内部状态”。<br/>
         * 一旦你实现这个方法，组件的所有 get set 都不会在重置操作时被调用。
         * 这意味着仅仅指定了默认值的属性将被编辑器重置。
         * <br/>
         * 此方法仅在编辑器下会被调用。
         */
        protected onRestore?(): void;
    }
    export { Component };
}
declare module "cocos/scene-graph/scene-globals" {
    /****************************************************************************
     Copyright (c) 2015-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { TextureCube } from "cocos/3d/assets/texture-cube";
    import { Color, Vec3 } from "cocos/core/value-types/index";
    import { Ambient } from "cocos/renderer/scene/ambient";
    import { PlanarShadow } from "cocos/renderer/scene/planar-shadow";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    import { Skybox } from "cocos/renderer/scene/skybox";
    import { Node } from "cocos/scene-graph/node";
    export class AmbientInfo {
        protected _skyColor: Color;
        protected _skyIllum: number;
        protected _groundAlbedo: Color;
        protected _resource: Ambient | null;
        skyColor: Color;
        skyIllum: number;
        groundAlbedo: Color;
        renderScene: RenderScene;
    }
    export class SkyboxInfo {
        protected _cubemap: TextureCube | null;
        protected _isRGBE: boolean;
        protected _enabled: boolean;
        protected _resource: Skybox | null;
        enabled: any;
        cubemap: any;
        isRGBE: any;
        renderScene: RenderScene;
    }
    export class PlanarShadowInfo {
        protected _enabled: boolean;
        protected _normal: Vec3;
        protected _distance: number;
        protected _shadowColor: Color;
        protected _resource: PlanarShadow | null;
        enabled: boolean;
        normal: Vec3;
        distance: number;
        shadowColor: Color;
        setPlaneFromNode(node: Node): void;
        renderScene: RenderScene;
    }
    export class SceneGlobals {
        ambient: AmbientInfo;
        skybox: SkyboxInfo;
        planarShadow: PlanarShadowInfo;
        renderScene: RenderScene;
    }
}
declare module "cocos/scene-graph/scene" {
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    import { Node } from "cocos/scene-graph/node";
    import { SceneGlobals } from "cocos/scene-graph/scene-globals";
    /**
     * !#en
     * cc.Scene is a subclass of cc.Node that is used only as an abstract concept.<br/>
     * cc.Scene and cc.Node are almost identical with the difference that users can not modify cc.Scene manually.
     * !#zh
     * cc.Scene 是 cc.Node 的子类，仅作为一个抽象的概念。<br/>
     * cc.Scene 和 cc.Node 有点不同，用户不应直接修改 cc.Scene。
     * @class Scene
     * @extends Node
     */
    export class Scene extends Node {
        readonly renderScene: RenderScene | null;
        readonly globals: SceneGlobals;
        /**
         * !#en Indicates whether all (directly or indirectly) static referenced assets of this scene are releasable by default after scene unloading.
         * !#zh 指示该场景中直接或间接静态引用到的所有资源是否默认在场景切换后自动释放。
         */
        autoReleaseAssets: boolean;
        /**
         * !#en Per-scene level rendering info
         * !#zh 场景级别的渲染信息
         */
        _globals: SceneGlobals;
        /**
         * For internal usage.
         */
        _renderScene: RenderScene | null;
        dependAssets: null;
        protected _inited: boolean;
        protected _prefabSyncedInLiveReload: boolean;
        constructor(name: string);
        destroy(): void;
        _onHierarchyChanged(): void;
        protected _instantiate(): void;
        protected _load(): void;
        protected _activate(active: boolean): void;
    }
}
declare module "cocos/scene-graph/base-node" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component } from "cocos/components/component";
    import { CCObject } from '../core/data/object';
    import IdGenerator from "cocos/core/utils/id-generator";
    import { Scene } from "cocos/scene-graph/scene";
    type Constructor<T = {}> = new (...args: any[]) => T;
    /**
     * A base node for CCNode, it will:
     * - maintain scene hierarchy and active logic
     * - notifications if some properties changed
     * - define some interfaces shares between CCNode
     * - define machanisms for Enity Component Systems
     * - define prefab and serialize functions
     *
     * @class _BaseNode
     * @extends Object
     * @uses EventTarget
     * @method constructor
     * @param {String} [name]
     * @protected
     */
    export class BaseNode extends CCObject {
        /**
         * If true, the node is an persist node which won't be destroyed during scene transition.
         * If false, the node will be destroyed automatically when loading a new scene. Default is false.
         * @property _persistNode
         * @type {Boolean}
         * @default false
         * @protected
         */
        _persistNode: boolean;
        /**
         * !#en Name of node.
         * !#zh 该节点名称。
         * @property name
         * @type {String}
         * @example
         * node.name = "New Node";
         * cc.log("Node Name: " + node.name);
         */
        name: string;
        /**
         * !#en The uuid for editor, will be stripped before building project.
         * !#zh 主要用于编辑器的 uuid，在编辑器下可用于持久化存储，在项目构建之后将变成自增的 id。
         * @property uuid
         * @type {String}
         * @readOnly
         * @example
         * cc.log("Node Uuid: " + node.uuid);
         */
        readonly uuid: string;
        /**
         * !#en All children nodes.
         * !#zh 节点的所有子节点。
         * @property children
         * @type {Node[]}
         * @readOnly
         * @example
         * var children = node.children;
         * for (var i = 0; i < children.length; ++i) {
         *     cc.log("Node: " + children[i]);
         * }
         */
        readonly children: this[];
        /**
         * !#en All children nodes.
         * !#zh 节点的子节点数量。
         * @property childrenCount
         * @type {Number}
         * @readOnly
         * @example
         * var count = node.childrenCount;
         * cc.log("Node Children Count: " + count);
         */
        readonly childrenCount: number;
        /**
         * !#en
         * The local active state of this node.<br/>
         * Note that a Node may be inactive because a parent is not active, even if this returns true.<br/>
         * Use {{#crossLink "Node/activeInHierarchy:property"}}{{/crossLink}}
         * if you want to check if the Node is actually treated as active in the scene.
         * !#zh
         * 当前节点的自身激活状态。<br/>
         * 值得注意的是，一个节点的父节点如果不被激活，那么即使它自身设为激活，它仍然无法激活。<br/>
         * 如果你想检查节点在场景中实际的激活状态可以使用 {{#crossLink "Node/activeInHierarchy:property"}}{{/crossLink}}。
         * @property active
         * @type {Boolean}
         * @default true
         * @example
         * node.active = false;
         */
        active: boolean;
        /**
         * !#en Indicates whether this node is active in the scene.
         * !#zh 表示此节点是否在场景中激活。
         * @property activeInHierarchy
         * @type {Boolean}
         * @example
         * cc.log("activeInHierarchy: " + node.activeInHierarchy);
         */
        readonly activeInHierarchy: boolean;
        parent: this | null;
        readonly scene: Scene;
        static _setScene(node: BaseNode): void;
        protected static idGenerator: IdGenerator;
        protected static _stacks: Array<Array<(BaseNode | null)>>;
        protected static _stackId: number;
        protected static _findComponent(node: BaseNode, constructor: Function): Component | null;
        protected static _findComponents(node: BaseNode, constructor: Function, components: Component[]): void;
        protected static _findChildComponent(children: BaseNode[], constructor: any): any;
        protected static _findChildComponents(children: BaseNode[], constructor: any, components: any): void;
        protected _parent: this | null;
        protected _children: this[];
        protected _active: boolean;
        /**
         * @default 0
         */
        protected _level: number;
        /**
         * @default []
         * @readOnly
         */
        protected _components: Component[];
        /**
         * The PrefabInfo object
         * @type {PrefabInfo}
         */
        protected _prefab: any;
        /**
         * !#en which scene this node belongs to.
         * !#zh 此节点属于哪个场景。
         * @type {cc.Scene}}
         */
        protected _scene: Scene;
        protected _activeInHierarchy: boolean;
        protected _id: string;
        /**
         * Register all related EventTargets,
         * all event callbacks will be removed in _onPreDestroy
         * protected __eventTargets: EventTarget[] = [];
         */
        protected __eventTargets: any[];
        /**
         * @method constructor
         * @param {String} [name]
         */
        constructor(name?: string);
        /**
         * !#en Get parent of the node.
         * !#zh 获取该节点的父节点。
         * @example
         * var parent = this.node.getParent();
         */
        getParent(): this | null;
        /**
         * !#en Set parent of the node.
         * !#zh 设置该节点的父节点。
         * @example
         * node.setParent(newNode);
         */
        setParent(value: this | null, keepWorldTransform?: boolean): any;
        /**
         * !#en
         * Properties configuration function <br/>
         * All properties in attrs will be set to the node, <br/>
         * when the setter of the node is available, <br/>
         * the property will be set via setter function.<br/>
         * !#zh 属性配置函数。在 attrs 的所有属性将被设置为节点属性。
         * @param attrs - Properties to be set to node
         * @example
         * var attrs = { key: 0, num: 100 };
         * node.attr(attrs);
         */
        attr(attrs: Object): void;
        /**
         * !#en Returns a child from the container given its uuid.
         * !#zh 通过 uuid 获取节点的子节点。
         * @param uuid - The uuid to find the child node.
         * @return a Node whose uuid equals to the input parameter
         * @example
         * var child = node.getChildByUuid(uuid);
         */
        getChildByUuid(uuid: string): this | null;
        /**
         * !#en Returns a child from the container given its name.
         * !#zh 通过名称获取节点的子节点。
         * @param name - A name to find the child node.
         * @return a CCNode object whose name equals to the input parameter
         * @example
         * var child = node.getChildByName("Test Node");
         */
        getChildByName(name: string): this | null;
        /**
         * !#en Returns a child from the container given its path.
         * !#zh 通过路径获取节点的子节点。
         * @param path - A path to find the child node.
         * @return a CCNode object whose name equals to the input parameter
         * @example
         * var child = node.getChildByPath("Test Node");
         */
        getChildByPath(path: string): this | null;
        addChild(child: this): void;
        /**
         * !#en
         * Inserts a child to the node at a specified index.
         * !#zh
         * 插入子节点到指定位置
         * @param child - the child node to be inserted
         * @param siblingIndex - the sibling index to place the child in
         * @example
         * node.insertChild(child, 2);
         */
        insertChild(child: this, siblingIndex: number): void;
        /**
         * !#en Get the sibling index.
         * !#zh 获取同级索引。
         * @example
         * var index = node.getSiblingIndex();
         */
        getSiblingIndex(): number;
        /**
         * !#en Set the sibling index of this node.
         * !#zh 设置节点同级索引。
         * @example
         * node.setSiblingIndex(1);
         */
        setSiblingIndex(index: number): void;
        /**
         * !#en Walk though the sub children tree of the current node.
         * Each node, including the current node, in the sub tree will be visited two times,
         * before all children and after all children.
         * This function call is not recursive, it's based on stack.
         * Please don't walk any other node inside the walk process.
         * !#zh 遍历该节点的子树里的所有节点并按规则执行回调函数。
         * 对子树中的所有节点，包含当前节点，会执行两次回调，prefunc 会在访问它的子节点之前调用，postfunc 会在访问所有子节点之后调用。
         * 这个函数的实现不是基于递归的，而是基于栈展开递归的方式。
         * 请不要在 walk 过程中对任何其他的节点嵌套执行 walk。
         * @param prefunc The callback to process node when reach the node for the first time
         * @param postfunc The callback to process node when re-visit the node after walked all children in its sub tree
         * @example
         * node.walk(function (target) {
         *     console.log('Walked through node ' + target.name + ' for the first time');
         * }, function (target) {
         *     console.log('Walked through node ' + target.name + ' after walked all children in its sub tree');
         * });
         */
        walk(prefunc: (target: this) => void, postfunc?: (target: this) => void): void;
        /**
         * !#en
         * Remove itself from its parent node. If cleanup is `true`, then also remove all events and actions. <br/>
         * If the cleanup parameter is not passed, it will force a cleanup,
         * so it is recommended that you always pass in the `false` parameter when calling this API.<br/>
         * If the node orphan, then nothing happens.
         * !#zh
         * 从父节点中删除该节点。如果不传入 cleanup 参数或者传入 `true`，那么这个节点上所有绑定的事件、action 都会被删除。<br/>
         * 因此建议调用这个 API 时总是传入 `false` 参数。<br/>
         * 如果这个节点是一个孤节点，那么什么都不会发生。
         * @param [cleanup=true] - true if all actions and callbacks on this node should be removed, false otherwise.
         * @see cc.Node#removeFromParentAndCleanup
         * @example
         * node.removeFromParent();
         * node.removeFromParent(false);
         */
        removeFromParent(cleanup?: boolean): void;
        /**
         * !#en
         * Removes a child from the container.
         * It will also cleanup all running actions depending on the cleanup parameter. </p>
         * If the cleanup parameter is not passed, it will force a cleanup. <br/>
         * "remove" logic MUST only be on this method  <br/>
         * If a class wants to extend the 'removeChild' behavior it only needs <br/>
         * to override this method.
         * !#zh
         * 移除节点中指定的子节点，是否需要清理所有正在运行的行为取决于 cleanup 参数。<br/>
         * 如果 cleanup 参数不传入，默认为 true 表示清理。<br/>
         * @param child - The child node which will be removed.
         * @param [cleanup=true] - true if all running actions and callbacks on the child node
         * will be cleanup, false otherwise.
         * @example
         * node.removeChild(newNode);
         * node.removeChild(newNode, false);
         */
        removeChild(child: this, cleanup?: boolean): void;
        /**
         * !#en
         * Removes all children from the container and
         * do a cleanup all running actions depending on the cleanup parameter. <br/>
         * If the cleanup parameter is not passed, it will force a cleanup.
         * !#zh
         * 移除节点所有的子节点，是否需要清理所有正在运行的行为取决于 cleanup 参数。<br/>
         * 如果 cleanup 参数不传入，默认为 true 表示清理。
         * @param [cleanup=true] - true if all running actions on all children nodes
         * should be cleanup, false otherwise.
         * @example
         * node.removeAllChildren();
         * node.removeAllChildren(false);
         */
        removeAllChildren(cleanup?: boolean): void;
        /**
         * !#en Is this node a child of the given node?
         * !#zh 是否是指定节点的子节点？
         * @return True if this node is a child, deep child or identical to the given node.
         * @example
         * node.isChildOf(newNode);
         */
        isChildOf(parent: this): boolean;
        /**
         * !#en
         * Returns the component of supplied type if the node has one attached, null if it doesn't.<br/>
         * You can also get component in the node by passing in the name of the script.
         * !#zh
         * 获取节点上指定类型的组件，如果节点有附加指定类型的组件，则返回，如果没有则为空。<br/>
         * 传入参数也可以是脚本的名称。
         * @example
         * // get sprite component.
         * var sprite = node.getComponent(cc.Sprite);
         */
        getComponent<T extends Component>(classConstructor: Constructor<T>): T | null;
        /**
         * !#en
         * Returns the component of supplied type if the node has one attached, null if it doesn't.<br/>
         * You can also get component in the node by passing in the name of the script.
         * !#zh
         * 获取节点上指定类型的组件，如果节点有附加指定类型的组件，则返回，如果没有则为空。<br/>
         * 传入参数也可以是脚本的名称。
         * @example
         * // get custom test calss.
         * var test = node.getComponent("Test");
         */
        getComponent(className: string): Component | null;
        /**
         * !#en Returns all components of supplied type in the node.
         * !#zh 返回节点上指定类型的所有组件。
         * @example
         * var sprites = node.getComponents(cc.Sprite);
         */
        getComponents<T extends Component>(classConstructor: Constructor<T>): T[];
        /**
         * !#en Returns all components of supplied type in the node.
         * !#zh 返回节点上指定类型的所有组件。
         * @example
         * var tests = node.getComponents("Test");
         */
        getComponents(className: string): Component[];
        /**
         * !#en Returns the component of supplied type in any of its children using depth first search.
         * !#zh 递归查找所有子节点中第一个匹配指定类型的组件。
         * @example
         * var sprite = node.getComponentInChildren(cc.Sprite);
         */
        getComponentInChildren<T extends Component>(classConstructor: Constructor<T>): T | null;
        /**
         * !#en Returns the component of supplied type in any of its children using depth first search.
         * !#zh 递归查找所有子节点中第一个匹配指定类型的组件。
         * @example
         * var Test = node.getComponentInChildren("Test");
         */
        getComponentInChildren(className: string): Component | null;
        /**
         * !#en Returns all components of supplied type in self or any of its children.
         * !#zh 递归查找自身或所有子节点中指定类型的组件
         * @example
         * var sprites = node.getComponentsInChildren(cc.Sprite);
         */
        getComponentsInChildren<T extends Component>(classConstructor: Constructor<T>): T[];
        /**
         * !#en Returns all components of supplied type in self or any of its children.
         * !#zh 递归查找自身或所有子节点中指定类型的组件
         * @example
         * var tests = node.getComponentsInChildren("Test");
         */
        getComponentsInChildren(className: string): Component[];
        /**
         * !#en Adds a component class to the node. You can also add component to node by passing in the name of the script.
         * !#zh 向节点添加一个指定类型的组件类，你还可以通过传入脚本的名称来添加组件。
         * @example
         * var sprite = node.addComponent(cc.Sprite);
         */
        addComponent<T extends Component>(classConstructor: Constructor<T>): T | null;
        /**
         * !#en Adds a component class to the node. You can also add component to node by passing in the name of the script.
         * !#zh 向节点添加一个指定类型的组件类，你还可以通过传入脚本的名称来添加组件。
         * @example
         * var test = node.addComponent("Test");
         */
        addComponent(className: string): Component | null;
        /**
         * !#en
         * Removes a component identified by the given name or removes the component object given.
         * You can also use component.destroy() if you already have the reference.
         * !#zh
         * 删除节点上的指定组件，传入参数可以是一个组件构造函数或组件名，也可以是已经获得的组件引用。
         * 如果你已经获得组件引用，你也可以直接调用 component.destroy()
         * @deprecated please destroy the component to remove it.
         * @example
         * node.removeComponent(cc.Sprite);
         */
        removeComponent<T extends Component>(classConstructor: Constructor<T>): void;
        /**
         * !#en
         * Removes a component identified by the given name or removes the component object given.
         * You can also use component.destroy() if you already have the reference.
         * !#zh
         * 删除节点上的指定组件，传入参数可以是一个组件构造函数或组件名，也可以是已经获得的组件引用。
         * 如果你已经获得组件引用，你也可以直接调用 component.destroy()
         * @deprecated please destroy the component to remove it.
         * @example
         * const sprite = node.getComponent(CC.Sprite);
         * if (sprite) {
         *     node.removeComponent(sprite);
         * }
         * node.removeComponent('cc.Sprite');
         */
        removeComponent(classNameOrInstance: string | Component): void;
        destroy(): void;
        /**
         * !#en
         * Destroy all children from the node, and release all their own references to other objects.<br/>
         * Actual destruct operation will delayed until before rendering.
         * !#zh
         * 销毁所有子节点，并释放所有它们对其它对象的引用。<br/>
         * 实际销毁操作会延迟到当前帧渲染前执行。
         * @example
         * node.destroyAllChildren();
         */
        destroyAllChildren(): void;
        cleanup(): void;
        emit?(type: string, ...args: any[]): void;
        _removeComponent(component: Component): void;
        protected _onSetParent(oldParent: this | null, keepWorldTransform?: boolean): void;
        protected _onPostActivated(): void;
        protected _onBatchRestored(): void;
        protected _onBatchCreated(): void;
        protected _onPreDestroy(): void;
        protected _onHierarchyChanged(oldParent: this | null): void;
        protected _instantiate(cloned: any): any;
        protected _onHierarchyChangedBase(oldParent: this | null): void;
        protected _onPreDestroyBase(): boolean;
        protected _disableChildComps(): void;
        protected _onSiblingIndexChanged?(siblingIndex: number): void;
        protected _registerIfAttached?(attached: boolean): void;
        protected _checkMultipleComp?(constructor: Function): boolean;
    }
}
declare module "cocos/scene-graph/node" {
    import { UITransformComponent } from "cocos/3d/index";
    import Event from "cocos/core/event/event";
    import { EventType } from "cocos/core/platform/event-manager/event-enum";
    import { Mat4, Quat, Vec3 } from "cocos/core/value-types/index";
    import Size from "cocos/core/value-types/size";
    import Vec2 from "cocos/core/value-types/vec2";
    import { mat4, quat, vec3 } from "cocos/core/vmath/index";
    import { BaseNode } from "cocos/scene-graph/base-node";
    enum NodeSpace {
        LOCAL = 0,
        WORLD = 1
    }
    class Node extends BaseNode {
        static EventType: typeof EventType;
        static NodeSpace: typeof NodeSpace;
        static isNode(obj: object): boolean;
        _pos: Vec3;
        _rot: Quat;
        _scale: Vec3;
        _mat: Mat4;
        _lpos: Vec3;
        _lrot: Quat;
        _lscale: Vec3;
        protected _layer: number;
        protected _euler: Vec3;
        protected _dirty: boolean;
        protected _hasChanged: boolean;
        protected _matDirty: boolean;
        protected _eulerDirty: boolean;
        protected _eventProcessor: any;
        protected _eventMask: number;
        private _uiTransfromComp;
        eulerAngles: Readonly<Vec3>;
        layer: any;
        readonly hasChanged: boolean;
        uiTransfromComp: UITransformComponent | null;
        width: number;
        height: number;
        anchorX: number;
        anchorY: number;
        readonly eventProcessor: any;
        constructor(name: string);
        position: vec3;
        scale: vec3;
        rotation: quat;
        /**
         * hierarchical events
         */
        setParent(value: this | null, keepWorldTransform?: boolean): void;
        _onSetParent(oldParent: this | null, keepWorldTransform: boolean): void;
        _onBatchCreated(): void;
        _onBatchRestored(): void;
        /**
         * Translate the node
         * @param trans - translation
         * @param ns - the operating space
         */
        translate(trans: Vec3, ns?: NodeSpace): void;
        /**
         * Rotate the node
         * @param rot - rotation to apply
         * @param ns - the operating space
         */
        rotate(rot: Quat, ns?: NodeSpace): void;
        /**
         * rotate the node around X axis
         * @param rad - rotating angle
         * @param ns - the operating space
         */
        pitch(rad: number, ns?: NodeSpace): void;
        /**
         * rotate the node around Y axis
         * @param rad - rotating angle
         * @param ns - the operating space
         */
        yaw(rad: number, ns?: NodeSpace): void;
        /**
         * rotate the node around Z axis
         * @param rad - rotating angle
         * @param ns - the operating space
         */
        roll(rad: number, ns?: NodeSpace): void;
        direction: Vec3;
        /**
         * Set rotation by lookAt target point
         * @param pos - target position
         * @param up - the up vector, default to (0,1,0)
         */
        lookAt(pos: Vec3, up: Vec3): void;
        /**
         * Reset the `hasChanged` flag recursively
         */
        resetHasChanged(): void;
        /**
         * invalidate the world transform information
         * for this node and all its children recursively
         */
        invalidateChildren(): void;
        /**
         * update the world transform information if outdated
         * here we assume all nodes are children of a scene node,
         * which is always not dirty, has an identity transform and no parent.
         */
        updateWorldTransform(): void;
        updateWorldTransformFull(): void;
        /**
         * Sets local position.
         * @param position - The new local position.
         */
        setPosition(position: Vec3): void;
        /**
         * Sets local position.
         * @param x - The x component of the new local position.
         * @param y - The y component of the new local position.
         * @param z - The z component of the new local position.
         * @param w - The w component of the new local position.
         */
        setPosition(x: number, y: number, z: number): void;
        /**
         * get local position
         * @param out the receiving vector
         * @returns the resulting vector
         */
        getPosition(out?: Vec3): Vec3;
        readonly localPosition: Readonly<Vec3>;
        /**
         * Sets local rotation.
         * @param rotation - The new local rotation.
         */
        setRotation(rotation: Quat): void;
        /**
         * Sets local rotation.
         * @param x - The x component of the new local rotation.
         * @param y - The y component of the new local rotation.
         * @param z - The z component of the new local rotation.
         * @param w - The w component of the new local rotation.
         */
        setRotation(x: number, y: number, z: number, w: number): void;
        /**
         * set local rotation from euler angles
         * @param x - Angle to rotate around X axis in degrees.
         * @param y - Angle to rotate around Y axis in degrees.
         * @param z - Angle to rotate around Z axis in degrees.
         */
        setRotationFromEuler(x: number, y: number, z: number): void;
        /**
         * get local rotation
         * @param out - the receiving quaternion
         * @returns the resulting quaternion
         */
        getRotation(out?: Quat): Quat;
        readonly localRotation: Readonly<Quat>;
        /**
         * Sets local scale.
         * @param scale - The new local scale.
         */
        setScale(scale: Vec3): void;
        /**
         * Sets local scale.
         * @param x - The x component of the new local scale.
         * @param y - The y component of the new local scale.
         * @param z - The z component of the new local scale.
         */
        setScale(x: number, y: number, z: number): void;
        /**
         * get local scale
         * @param out - the receiving vector
         * @returns the resulting vector
         */
        getScale(out?: Vec3): Vec3;
        readonly localScale: Readonly<Vec3>;
        /**
         * Sets world position.
         * @param position - The new world position.
         */
        setWorldPosition(position: Vec3): void;
        /**
         * Sets world position.
         * @param x - The x component of the new world position.
         * @param y - The y component of the new world position.
         * @param z - The z component of the new world position.
         */
        setWorldPosition(x: number, y: number, z: number): void;
        getWorldPosition<Out extends vec3 = Vec3>(out: Out): Out;
        getWorldPosition(): Vec3;
        readonly worldPosition: Readonly<Vec3>;
        /**
         * Sets world rotation.
         * @param rotation - The new world rotation.
         */
        setWorldRotation(rotation: Quat): void;
        /**
         * Sets world rotation.
         * @param x - The x component of the new world rotation.
         * @param y - The y component of the new world rotation.
         * @param z - The z component of the new world rotation.
         * @param w - The w component of the new world rotation.
         */
        setWorldRotation(x: number, y: number, z: number, w: number): void;
        /**
         * set world rotation from euler angles
         * @param x - Angle to rotate around X axis in degrees.
         * @param y - Angle to rotate around Y axis in degrees.
         * @param z - Angle to rotate around Z axis in degrees.
         */
        setWorldRotationFromEuler(x: number, y: number, z: number): void;
        getWorldRotation<Out extends quat = Quat>(out: Out): Out;
        getWorldRotation(): Quat;
        readonly worldRotation: Readonly<Quat>;
        /**
         * Sets world scale.
         * @param scale - The new world scale.
         */
        setWorldScale(scale: Vec3): void;
        /**
         * Sets world scale.
         * @param x - The x component of the new world scale.
         * @param y - The y component of the new world scale.
         * @param z - The z component of the new world scale.
         */
        setWorldScale(x: number, y: number, z: number): void;
        getWorldScale<Out extends vec3 = Vec3>(out: Out): Out;
        getWorldScale(): Vec3;
        readonly worldScale: Readonly<Vec3>;
        getWorldMatrix<Out extends mat4>(out?: Out): Out;
        getWorldMatrix(): Mat4;
        readonly worldMatrix: Readonly<Mat4>;
        /**
         * get world transform matrix (with only rotation and scale)
         * @param out - the receiving matrix
         * @returns the - resulting matrix
         */
        getWorldRS(out?: Mat4): Mat4;
        /**
         * get world transform matrix (with only rotation and translation)
         * @param out - the receiving matrix
         * @returns the - resulting matrix
         */
        getWorldRT(out?: Mat4): Mat4;
        getAnchorPoint(): Vec2;
        setAnchorPoint(point: Vec2 | number, y?: number): void;
        getContentSize(): Size;
        setContentSize(size: Size | number, height?: number): void;
        on(type: string | EventType, callback: Function, target?: Object, useCapture?: any): void;
        off(type: string, callback: Function, target?: Object, useCapture?: any): void;
        once(type: string, callback: Function, target?: Object, useCapture?: any): void;
        emit(type: string, ...args: any[]): void;
        dispatchEvent(event: Event): void;
        hasEventListener(type: string): any;
        targetOff(target: string | Object): void;
        pauseSystemEvents(recursive: boolean): void;
        resumeSystemEvents(recursive: boolean): void;
    }
    export { Node };
}
declare module "cocos/scene-graph/node-event-processor" {
    import { EventTarget } from "cocos/core/event/index";
    import { EventListener } from "cocos/core/platform/event-manager/event-listener";
    import { EventTouch } from "cocos/core/platform/event-manager/index";
    import { Node } from "cocos/scene-graph/node";
    export class NodeEventProcessor {
        readonly node: Node;
        /**
         * @zh
         * 节点冒泡事件监听器
         */
        bubblingTargets: EventTarget | null;
        /**
         * @zh
         * 节点捕获事件监听器
         */
        capturingTargets: EventTarget | null;
        /**
         * @zh
         * 触摸监听器
         */
        touchListener: EventListener | null;
        /**
         * @zh
         * 鼠标监听器
         */
        mouseListener: EventListener | null;
        private _node;
        constructor(node: Node);
        /**
         * @zh
         * 在节点上注册指定类型的回调函数，也可以设置 target 用于绑定响应函数的 this 对象。<br/>
         * 鼠标或触摸事件会被系统调用 dispatchEvent 方法触发，触发的过程包含三个阶段：<br/>
         * 1. 捕获阶段：派发事件给捕获目标（通过 `getCapturingTargets` 获取），比如，节点树中注册了捕获阶段的父节点，从根节点开始派发直到目标节点。<br/>
         * 2. 目标阶段：派发给目标节点的监听器。<br/>
         * 3. 冒泡阶段：派发事件给冒泡目标（通过 `getBubblingTargets` 获取），比如，节点树中注册了冒泡阶段的父节点，从目标节点开始派发知道根节点。<br/>
         * 同时您可以将事件派发到父节点或者通过调用 stopPropagation 拦截它。<br/>
         * 推荐使用这种方式来监听节点上的触摸或鼠标事件，请不要在节点上直接使用 cc.eventManager。<br/>
         * 你也可以注册自定义事件到节点上，并通过 emit 方法触发此类事件，对于这类事件，不会发生捕获冒泡阶段，只会直接派发给注册在该节点上的监听器。<br/>
         * 你可以通过在 emit 方法调用时在 type 之后传递额外的参数作为事件回调的参数列表。<br/>
         *
         * @param type - 一个监听事件类型的字符串。参见：[[EventType]]
         * @param callback - 事件分派时将被调用的回调函数。如果该回调存在则不会重复添加。
         * @param callback.event - 事件派发的时候回调的第一个参数。
         * @param callback.arg2 - 第二个参数。
         * @param callback.arg3 - 第三个参数。
         * @param callback.arg4 - 第四个参数。
         * @param callback.arg5 - 第五个参数。
         * @param target - 调用回调的目标。可以为空。
         * @param useCapture - 当设置为 true，监听器将在捕获阶段触发，否则将在冒泡阶段触发。默认为 false。
         * @return - 返回监听回调函数自身。
         *
         * @example
         * ```ts
         * this.node.on(cc.Node.EventType.TOUCH_START, this.memberFunction, this);  // if "this" is component and the "memberFunction" declared in CCClass.
         * this.node.on(cc.Node.EventType.TOUCH_START, callback, this);
         * this.node.on(cc.Node.EventType.ANCHOR_CHANGED, callback);
         * ```
         */
        on(type: string, callback: Function, target?: Object, useCapture?: Object): Function | undefined;
        /**
         * @zh
         * 注册节点的特定事件类型回调，回调会在第一时间被触发后删除自身。
         *
         * @param type - 一个监听事件类型的字符串。参见：[[EventType]]。
         * @param callback - 事件分派时将被调用的回调函数。如果该回调存在则不会重复添加。
         * @param callback.event - 事件派发的时候回调的第一个参数。
         * @param callback.arg2 - 第二个参数。
         * @param callback.arg3 - 第三个参数。
         * @param callback.arg4 - 第四个参数。
         * @param callback.arg5 - 第五个参数。
         * @param target - 调用回调的目标。可以为空。
         * @param useCapture - 当设置为 true，监听器将在捕获阶段触发，否则将在冒泡阶段触发。默认为 false。
         *
         * @example
         * ```ts
         * node.once(cc.Node.EventType.ANCHOR_CHANGED, callback);
         * ```
         */
        once(type: string, callback: Function, target?: Object, useCapture?: Object): void;
        /**
         * @zh
         * 删除之前与同类型，回调，目标或 useCapture 注册的回调。
         *
         * @param type - 一个监听事件类型的字符串。参见：[[EventType]]。
         * @param callback - 移除指定注册回调。如果没有给，则删除全部同事件类型的监听。
         * @param target - 调用回调的目标。配合 callback 一起使用。
         * @param useCapture - 当设置为 true，监听器将在捕获阶段触发，否则将在冒泡阶段触发。默认为 false。
         *
         * @example
         * ```ts
         * this.node.off(cc.Node.EventType.TOUCH_START, this.memberFunction, this);
         * node.off(cc.Node.EventType.TOUCH_START, callback, this.node);
         * node.off(cc.Node.EventType.ANCHOR_CHANGED, callback, this);
         * ```
         */
        off(type: string, callback?: Function, target?: Object, useCapture?: Object): void;
        /**
         * @zh
         * 通过事件名发送自定义事件
         *
         * @param type - 一个监听事件类型的字符串。
         * @param arg1 - 回调第一个参数。
         * @param arg2 - 回调第二个参数。
         * @param arg3 - 回调第三个参数。
         * @param arg4 - 回调第四个参数。
         * @param arg5 - 回调第五个参数。
         * @example
         * ```ts
         * eventTarget.emit('fire', event);
         * eventTarget.emit('fire', message, emitter);
         * ```
         */
        emit(type: string, ...args: any[]): void;
        /**
         * @zh
         * 分发事件到事件流中。
         *
         * @param event - 分派到事件流中的事件对象。
         */
        dispatchEvent(event: EventTouch): void;
        /**
         * @zh
         * 是否监听过某事件。
         *
         * @param type - 一个监听事件类型的字符串。
         * @return - 返回是否当前节点已监听该事件类型。
         */
        hasEventListener(type: string): boolean;
        /**
         * @zh
         * 移除在特定事件类型中注册的所有回调或在某个目标中注册的所有回调。
         *
         * @param target - 要删除的事件键或要删除的目标。
         */
        targetOff(target: string | Object): void;
        /**
         * @zh
         * 获得所提供的事件类型在目标捕获阶段监听的所有目标。
         * 捕获阶段包括从根节点到目标节点的过程。
         * 结果保存在数组参数中，并且必须从子节点排序到父节点。
         *
         * @param type - 一个监听事件类型的字符串。
         * @param array - 接收目标的数组。
         */
        getCapturingTargets(type: string, targets: Node[]): void;
        /**
         * @zh
         * 获得所提供的事件类型在目标冒泡阶段监听的所有目标。
         * 冒泡阶段目标节点到根节点的过程。
         * 结果保存在数组参数中，并且必须从子节点排序到父节点。
         *
         * @param type - 一个监听事件类型的字符串。
         * @param array - 接收目标的数组。
         */
        getBubblingTargets(type: string, targets: Node[]): void;
        private _checknSetupSysEvent;
        private _onDispatch;
        private _offDispatch;
    }
}
declare module "cocos/scene-graph/private-node" {
    import { Node } from "cocos/scene-graph/node";
    /**
     * !#en
     * Class of private entities in Cocos Creator scenes.<br/>
     * The PrivateNode is hidden in editor, and completely transparent to users.<br/>
     * It's normally used as Node's private content created by components in parent node.<br/>
     * So in theory private nodes are not children, they are part of the parent node.<br/>
     * Private node have two important characteristics:<br/>
     * 1. It has the minimum z index and cannot be modified, because they can't be displayed over real children.<br/>
     * 2. The positioning of private nodes is also special, they will consider the left bottom corner of the parent node's bounding box as the origin of local coordinates.<br/>
     *    In this way, they can be easily kept inside the bounding box.<br/>
     * Currently, it's used by RichText component and TileMap component.
     * !#zh
     * Cocos Creator 场景中的私有节点类。<br/>
     * 私有节点在编辑器中不可见，对用户透明。<br/>
     * 通常私有节点是被一些特殊的组件创建出来作为父节点的一部分而存在的，理论上来说，它们不是子节点，而是父节点的组成部分。<br/>
     * 私有节点有两个非常重要的特性：<br/>
     * 1. 它有着最小的渲染排序的 Z 轴深度，并且无法被更改，因为它们不能被显示在其他正常子节点之上。<br/>
     * 2. 它的定位也是特殊的，对于私有节点来说，父节点包围盒的左下角是它的局部坐标系原点，这个原点相当于父节点的位置减去它锚点的偏移。这样私有节点可以比较容易被控制在包围盒之中。<br/>
     * 目前在引擎中，RichText 和 TileMap 都有可能生成私有节点。
     * @class PrivateNode
     * @method constructor
     * @param {String} name
     * @extends Node
     */
    export class PrivateNode extends Node {
        /**
         * @method constructor
         * @param {String} [name]
         */
        constructor(name: string);
    }
}
declare module "cocos/scene-graph/index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import "cocos/scene-graph/node-event-processor";
    export { BaseNode } from "cocos/scene-graph/base-node";
    export { Node } from "cocos/scene-graph/node";
    export { Scene } from "cocos/scene-graph/scene";
    export { Layers } from "cocos/scene-graph/layers";
    export { find } from "cocos/scene-graph/find";
    export { PrivateNode } from "cocos/scene-graph/private-node";
    export { default as NodeActivator } from "cocos/scene-graph/node-activator";
}
declare module "cocos/core/event/event-target-factory" {
    import { EventTarget } from "cocos/core/event/event-target";
    export function applyMixins(derivedCtor: any, baseCtors: any[]): void;
    export interface IEventTarget extends EventTarget {
    }
}
declare module "cocos/assets/asset" {
    import { Node } from "cocos/scene-graph/index";
    import { RawAsset } from "cocos/assets/raw-asset";
    import { IEventTarget } from "cocos/core/event/event-target-factory";
    /**
     * !#en
     * Base class for handling assets used in Creator.<br/>
     *
     * You may want to override:<br/>
     * - createNode<br/>
     * - getset functions of _nativeAsset<br/>
     * - cc.Object._serialize<br/>
     * - cc.Object._deserialize<br/>
     * !#zh
     * Creator 中的资源基类。<br/>
     *
     * 您可能需要重写：<br/>
     * - createNode <br/>
     * - _nativeAsset 的 getset 方法<br/>
     * - cc.Object._serialize<br/>
     * - cc.Object._deserialize<br/>
     *
     * @class Asset
     * @extends RawAsset
     */
    export class Asset extends RawAsset implements IEventTarget {
        /**
         * IEventTarget implementations, they will be overwrote with the same implementation in EventTarget by applyMixins
         */
        _callbackTable: any;
        on(type: string, callback: Function, target?: Object | undefined): Function | undefined;
        off(type: string, callback?: Function | undefined, target?: Object | undefined): void;
        targetOff(keyOrTarget?: string | Object | undefined): void;
        once(type: string, callback: Function, target?: Object | undefined): Function | undefined;
        dispatchEvent(event: import("cocos/core/index").Event): void;
        hasEventListener(key: string, callback?: Function | undefined, target?: Object | undefined): boolean;
        removeAll(keyOrTarget?: string | Object | undefined): void;
        emit(key: string, ...args: any[]): void;
        /**
         * !#en
         * Returns the url of this asset's native object, if none it will returns an empty string.
         * !#zh
         * 返回该资源对应的目标平台资源的 URL，如果没有将返回一个空字符串。
         * @property nativeUrl
         * @type {String}
         * @readOnly
         */
        readonly nativeUrl: string;
        /**
         * The underlying native asset of this asset if one is available.
         * This property can be used to access additional details or functionality releated to the asset.
         * This property will be initialized by the loader if `_native` is available.
         * @property {Object} _nativeAsset
         * @default null
         * @private
         * @type {any}
         */
        _nativeAsset: any;
        /**
         * !#en Indicates whether its dependent raw assets can support deferred load if the owner scene (or prefab) is marked as `asyncLoadAssets`.
         * !#zh 当场景或 Prefab 被标记为 `asyncLoadAssets`，禁止延迟加载该资源所依赖的其它 RawAsset。
         *
         * @property {Boolean} preventDeferredLoadDependents
         * @default false
         * @static
         */
        static preventDeferredLoadDependents: boolean;
        /**
         * !#en Indicates whether its native object should be preloaded from native url.
         * !#zh 禁止预加载原生对象。
         *
         * @property {Boolean} preventPreloadNativeObject
         * @default false
         * @static
         */
        static preventPreloadNativeObject: boolean;
        /**
         * 应 AssetDB 要求提供这个方法
         *
         * @method deserialize
         * @param {String} data
         * @return {Asset}
         * @static
         * @private
         */
        static deserialize(data: any): any;
        /**
         * !#en
         * Whether the asset is loaded or not
         * !#zh
         * 该资源是否已经成功加载
         */
        loaded: boolean;
        /**
         * Serializable url for native asset. For internal usage.
         * @default ""
         */
        _native: string | undefined;
        constructor(...args: ConstructorParameters<typeof RawAsset>);
        /**
         * Returns the string representation of the object.
         *
         * The `Asset` object overrides the `toString()` method of the `Object` object.
         * JavaScript calls the toString() method automatically when an asset is to
         * be represented as a text value or when a texture is referred to in a string concatenation.
         *
         * For assets of the native type, it will return `this.nativeUrl`.
         * Otherwise, an empty string is returned.
         * This method may be overwritten by subclasses.
         *
         * @method toString
         * @return {String}
         */
        toString(): string;
        /**
         * 应 AssetDB 要求提供这个方法
         *
         * @method serialize
         * @return {String}
         * @private
         */
        /**
         * Set native file name for this asset.
         * @seealso nativeUrl
         *
         * @param filename
         * @param [inLibrary=true]
         * @private
         */
        _setRawAsset(filename: string, inLibrary?: boolean): void;
        /**
         * !#en
         * Create a new node using this asset in the scene.<br/>
         * If this type of asset dont have its corresponding node type, this method should be null.
         * !#zh
         * 使用该资源在场景中创建一个新节点。<br/>
         * 如果这类资源没有相应的节点类型，该方法应该是空的。
         */
        createNode?(callback: CreateNodeCallback): void;
    }
    /**
     * @param error - null or the error info
     * @param node - the created node or null
     */
    type CreateNodeCallback = (error: Error | null, node: Node) => void;
}
declare module "cocos/3d/assets/audio/player" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export const PlayingState: {
        INITIALIZING: number;
        PLAYING: number;
        STOPPED: number;
    };
    export interface IAudioInfo {
        clip: any;
        duration: number;
        eventTarget: any;
    }
    export abstract class AudioPlayer {
        protected _state: number;
        protected _duration: number;
        protected _eventTarget: any;
        constructor(info: IAudioInfo);
        abstract play(): void;
        abstract pause(): void;
        abstract stop(): void;
        abstract playOneShot(volume: number): void;
        abstract setCurrentTime(val: number): void;
        abstract getCurrentTime(): number;
        abstract getDuration(): number;
        abstract setVolume(val: number, immediate: boolean): void;
        abstract getVolume(): number;
        abstract setLoop(val: boolean): void;
        abstract getLoop(): boolean;
        getState(): number;
    }
}
declare module "cocos/3d/assets/audio/player-dom" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { AudioPlayer, IAudioInfo } from "cocos/3d/assets/audio/player";
    export class AudioPlayerDOM extends AudioPlayer {
        protected _volume: number;
        protected _loop: boolean;
        protected _currentTimer: number;
        protected _oneShoting: boolean;
        protected _audio: HTMLAudioElement;
        private _post_play;
        private _on_gesture;
        private _alreadyDelayed;
        constructor(info: IAudioInfo);
        play(): void;
        pause(): void;
        stop(): void;
        playOneShot(volume?: number): void;
        setCurrentTime(val: number): void;
        getCurrentTime(): number;
        getDuration(): number;
        setVolume(val: number, immediate: boolean): void;
        getVolume(): number;
        setLoop(val: boolean): void;
        getLoop(): boolean;
    }
}
declare module "cocos/3d/assets/audio/player-web" {
    import { AudioPlayer, IAudioInfo } from "cocos/3d/assets/audio/player";
    export class AudioPlayerWeb extends AudioPlayer {
        protected _startTime: number;
        protected _offset: number;
        protected _volume: number;
        protected _loop: boolean;
        protected _currentTimer: number;
        protected _audio: AudioBuffer | null;
        private _context;
        private _sourceNode;
        private _gainNode;
        private _on_ended;
        private _do_play;
        private _on_gesture;
        private _alreadyDelayed;
        constructor(info: IAudioInfo);
        play(): void;
        pause(): void;
        stop(): void;
        playOneShot(volume?: number): void;
        setCurrentTime(val: number): void;
        getCurrentTime(): number;
        getDuration(): number;
        setVolume(val: number, immediate: boolean): void;
        getVolume(): number;
        setLoop(val: boolean): void;
        getLoop(): boolean;
    }
}
declare module "cocos/3d/assets/audio/clip" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Asset } from "cocos/assets/asset";
    export enum AudioType {
        UNKNOWN_AUDIO = -1,
        WEB_AUDIO = 0,
        DOM_AUDIO = 1,
        WX_GAME_AUDIO = 2
    }
    export class AudioClip extends Asset {
        _nativeAsset: any;
        readonly loadMode: AudioType;
        readonly state: number;
        static PlayingState: {
            INITIALIZING: number;
            PLAYING: number;
            STOPPED: number;
        };
        static AudioType: typeof AudioType;
        static preventDeferredLoadDependents: boolean;
        protected _duration: number;
        protected _loadMode: AudioType;
        protected _audio: any;
        private _player;
        constructor();
        play(): void;
        pause(): void;
        stop(): void;
        playOneShot(volume: number): void;
        setCurrentTime(val: number): void;
        getCurrentTime(): number;
        getDuration(): number;
        setVolume(val: number, immediate?: boolean): void;
        getVolume(): number;
        setLoop(val: boolean): void;
        getLoop(): boolean;
    }
}
declare module "cocos/3d/assets/physics/material" {
    import { Asset } from "cocos/assets/asset";
    export class PhysicsMaterial extends Asset {
        _friction: number;
        _restitution: number;
        /**
         * Friction for this material.
         * If non-negative, it will be used instead of the friction given by ContactMaterials.
         * If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.
         */
        friction: number;
        /**
         * Restitution for this material.
         * If non-negative, it will be used instead of the restitution given by ContactMaterials.
         * If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used
         */
        restitution: number;
        constructor();
    }
}
declare module "cocos/3d/assets/index" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the 'Software'), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export { AudioClip } from "cocos/3d/assets/audio/clip";
    export { EffectAsset } from "cocos/3d/assets/effect-asset";
    export { Material } from "cocos/3d/assets/material";
    export { Mesh } from "cocos/3d/assets/mesh";
    export { default as Skeleton } from "cocos/3d/assets/skeleton";
    export { PhysicsMaterial } from "cocos/3d/assets/physics/material";
}
declare module "cocos/3d/framework/audio-source-component" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component } from "cocos/components/component";
    import { AudioClip } from "cocos/3d/assets/audio/clip";
    /**
     * A representation of a single audio source,
     * contains basic functionalities like play, pause and stop.
     */
    export class AudioSourceComponent extends Component {
        protected _clip: AudioClip | null;
        protected _loop: boolean;
        protected _playOnAwake: boolean;
        protected _volume: number;
        private _cachedCurrentTime;
        /**
         * @en
         * The default AudioClip to play
         * @zh
         * 设定要播放的音频
         */
        clip: any;
        /**
         * @en
         * Is the audio clip looping?
         * @zh
         * 是否循环播放音频
         */
        loop: any;
        /**
         * @en
         * Is the autoplay enabled? <br>
         * Note that for the most time now the autoplay will only starts <br>
         * after a user gesture is received, according to the latest autoplay policy: <br>
         * https://www.chromium.org/audio-video/autoplay
         * @zh
         * 是否启用自动播放 <br>
         * 请注意，根据最新的自动播放策略，大部分自动播放仅在收到用户指令后生效 <br>
         * 参看：https://www.chromium.org/audio-video/autoplay
         */
        playOnAwake: any;
        /**
         * @en
         * The volume of this audio source (0.0 to 1.0).
         * @zh
         * 音频的音量（大小范围为 0.0 到 1.0 ）
         *
         * 请注意,在某些平台上，音量控制可能不起效<br>
         * 请注意,在 ios 平台的 dom 模式下控制音量将无法生效
         */
        volume: any;
        onLoad(): void;
        /**
         * @en
         * Plays the clip
         * @zh
         * 开始播放音频
         *
         * 如果音频处于正在播放状态，将会重新开始播放音频 <br>
         * 如果音频处于暂停状态，则会继续播放音频
         */
        play(): void;
        /**
         * @en
         * Pause the clip
         * @zh
         * 暂停播放
         */
        pause(): void;
        /**
         * @en
         * Stop the clip
         * @zh
         * 停止播放
         */
        stop(): void;
        /**
         * @en Plays an AudioClip, and scales volume by volumeScale.
         * @zh 以指定音量播放一个音频一次
         *
         * 请注意，视平台不同同时重复播放的音频效果存在差异 <br>
         * 在 dom 模式下，不支持同时进行多重播放，所以在多重播放时将会产生重新播放的效果 <br>
         * 在微信模式下，不支持同时进行多重播放，所以在多重播放时将会产生重新播放的效果
         * @param clip - the clip being played
         * @param volumeScale - the scale of the volume (0-1).
         */
        playOneShot(clip: AudioClip, volumeScale?: number): void;
        protected _syncStates(): void;
        /**
         * @en
         * set current playback time, in seconds
         * @zh
         * 以秒为单位设置当前播放时间
         * @param num the playback time you want to jump to
         */
        /**
        * @en
        * get the current playback time, in seconds
        * @zh
        * 以秒为单位获取当前播放时间
        * @returns time current playback time
        */
        currentTime: number;
        /**
         * @en
         * get the audio duration, in seconds
         * @zh
         * 以秒为单位获取音频持续时间
         * @returns audio duration
         */
        readonly duration: number;
        /**
         * @en
         * get current audio state
         * @zh
         * 获取当前音频状态
         * @returns current audio state
         */
        readonly state: number;
        /**
         * @en
         * is the audio currently playing?
         * @zh
         * 当前音频是否正在播放
         */
        readonly playing: boolean;
    }
}
declare module "cocos/3d/assets/utils/mesh-utils" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Mesh } from "cocos/3d/assets/mesh";
    export function postLoadMesh(mesh: Mesh, callback?: Function): void;
}
declare module "cocos/3d/framework/model-component" {
    import { Model } from "cocos/renderer/scene/model";
    import { Material } from "cocos/3d/assets/material";
    import { Mesh } from "cocos/3d/assets/mesh";
    import { RenderableComponent } from "cocos/3d/framework/renderable-component";
    /**
     * 模型组件
     * @class ModelComponent
     * @extends RenderableComponent
     */
    export class ModelComponent extends RenderableComponent {
        /**
         * @en The mesh of the model
         * @zh 模型网格
         * @type {Mesh}
         */
        mesh: Mesh | null;
        /**
         * @en The shadow casting mode
         * @zh 投射阴影方式
         * @type {Number}
         */
        shadowCastingMode: number;
        /**
         * @en Does this model receive shadows?
         * @zh 是否接受阴影?
         * @type {Boolean}
         */
        receiveShadows: boolean;
        readonly model: Model | null;
        static ShadowCastingMode: {
            /**
             * 关闭阴影投射
             * @property Off
             * @readonly
             * @type {Number}
             */
            Off: number;
            /**
             * 开启阴影投射，当阴影光产生的时候
             * @property On
             * @readonly
             * @type {Number}
             */
            On: number;
            /**
             * 可以从网格的任意一边投射出阴影
             * @property TwoSided
             * @readonly
             * @type {Number}
             */
            TwoSided: number;
            /**
             * 只显示阴影
             * @property ShadowsOnly
             * @readonly
             * @type {Number}
             */
            ShadowsOnly: number;
        };
        protected _model: Model | null;
        protected _mesh: Mesh | null;
        protected _meshLoaded: boolean;
        private _shadowCastingMode;
        private _receiveShadows;
        onLoad(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        protected _updateModels(): void;
        protected _createModel(): void;
        protected _getModelConstructor(): typeof Model;
        protected _updateModelParams(): void;
        protected _onMaterialModified(idx: number, material: Material | null): void;
        protected _onRebuildPSO(idx: number, material: Material): void;
        protected _onMeshChanged(old: Mesh | null): void;
        protected _clearMaterials(): void;
        protected _ensureLoadMesh(): void;
        protected _assetReady(): void;
        protected _onMeshLoaded(): void;
        private _updateCastShadow;
        private _updateReceiveShadow;
        private _getBuiltinMaterial;
    }
}
declare module "cocos/3d/framework/skinning-model-component" {
    import { SkinningModel } from "cocos/renderer/models/skinning-model";
    import { Node } from "cocos/scene-graph/node";
    import { Mesh } from "cocos/3d/assets/index";
    import { Material } from "cocos/3d/assets/material";
    import Skeleton from "cocos/3d/assets/skeleton";
    import { aabb } from "cocos/3d/geom-utils/index";
    import { ModelComponent } from "cocos/3d/framework/model-component";
    /**
     * @en The Skinning Model Component
     * @zh 蒙皮模型组件
     */
    export class SkinningModelComponent extends ModelComponent {
        /**
         * @en The bone nodes
         * @zh 骨骼节点
         */
        skeleton: Skeleton | null;
        /**
         * 骨骼根节点的引用
         */
        skinningRoot: Node | null;
        private _skeleton;
        private _skinningRoot;
        private _joints;
        private _jointParentIndices;
        private _boneSpaceBounds;
        constructor();
        onLoad(): void;
        update(): void;
        _tryUpdateMatrices(): void;
        calculateSkinnedBounds(out?: aabb): boolean;
        _updateModelParams(): void;
        protected _createModel(): void;
        protected _getModelConstructor(): typeof SkinningModel;
        protected _onMeshChanged(old: Mesh | null): void;
        protected _onSkeletonChanged(old: Skeleton | null): void;
        protected _onMaterialModified(index: number, material: Material): void;
        private _bindSkeleton;
        private _resetSkinningTarget;
    }
}
declare module "cocos/3d/framework/avatar-model-component" {
    /****************************************************************************
     Copyright (c) 2017-2019 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Texture2D } from "cocos/assets/index";
    import { Vec2 } from "cocos/core/value-types/index";
    import { Mesh } from "cocos/3d/assets/index";
    import { SkinningModelComponent } from "cocos/3d/framework/skinning-model-component";
    export class AvatarUnit {
        mesh: Mesh | null;
        atlasSize: Vec2;
        offset: Vec2;
        albedoMap: Texture2D | null;
        private _mesh;
        private _offset;
        private _atlasSize;
        private _albedoMap;
    }
    /**
     * !#en The Avatar Model Component
     * !#ch 换装模型组件
     */
    export class AvatarModelComponent extends SkinningModelComponent {
        private _combinedTexSize;
        private _combinedTex;
        private _albedoMapName;
        private _avatarUnits;
        readonly mesh: Mesh | null;
        combinedTexSize: number;
        albedoMapName: string;
        avatarUnits: AvatarUnit[];
        constructor();
        onLoad(): void;
        update(dt: any): void;
        onDestroy(): void;
        addAvatarUnit(unit: AvatarUnit): void;
        clear(): void;
        bindTextures(): void;
        combine(): void;
        combineTextures(): void;
        combineMeshes(): void;
        private resizeCombiendTexture;
    }
}
declare module "cocos/3d/framework/camera-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { ray } from "cocos/3d/geom-utils/index";
    import { Component } from "cocos/components/component";
    import { Rect, Vec3 } from "cocos/core/value-types/index";
    import { GFXClearFlag } from "cocos/gfx/define";
    import { Camera } from "cocos/renderer/index";
    import { Scene } from "cocos/scene-graph/index";
    /**
     * @en The Camera Component
     * @zh 相机组件
     * @class CameraComponent
     * @extends Component
     */
    export class CameraComponent extends Component {
        static ProjectionType: {
            /**
             * @en
             * The orthogonal camera
             * @zh
             * 正交相机
             * @property Ortho
             * @readonly
             * @type {Number}
             */
            ORTHO: number;
            /**
             * @en
             * The perspective camera
             * @zh
             * 透视相机
             * @property Perspective
             * @readonly
             * @type {Number}
             */
            PERSPECTIVE: number;
        };
        protected _projection: number;
        protected _priority: number;
        protected _fov: number;
        protected _orthoHeight: number;
        protected _near: number;
        protected _far: number;
        protected _color: any;
        protected _depth: number;
        protected _stencil: number;
        protected _clearFlags: GFXClearFlag;
        protected _rect: Rect;
        protected _screenScale: number;
        protected _targetDisplay: number;
        protected _camera: Camera | null;
        constructor();
        /**
         * @en The projection type of the camera
         * @zh 相机的投影类型
         */
        projection: number;
        /**
         * @en The camera field of view
         * @zh 相机的视角大小
         */
        fov: number;
        /**
         * @en The camera height when in orthogonal mode
         * @zh 正交模式下的相机视角大小
         */
        orthoHeight: number;
        /**
         * @en The near clipping distance of the camera
         * @zh 相机的近平面
         */
        near: number;
        /**
         * @en The far clipping distance of the camera
         * @zh 相机的远平面
         */
        far: number;
        /**
         * @en The color clearing value of the camera
         * @zh 相机的颜色缓冲默认值
         */
        color: any;
        /**
         * @en The depth clearing value of the camera
         * @zh 相机的深度缓冲默认值
         */
        depth: number;
        /**
         * @en The stencil clearing value of the camera
         * @zh 相机的模板缓冲默认值
         */
        stencil: number;
        /**
         * @en The clearing flags of this camera
         * @zh 相机的缓冲清除标志位
         */
        clearFlags: GFXClearFlag;
        /**
         * @en The screen viewport of the camera wrt. sceen size
         * @zh 相机相对屏幕的 viewport
         */
        rect: Rect;
        /**
         * @en The scale of the interal buffer size,
         * set to 1 to keep the same with the canvas size
         * @zh 相机内部缓冲尺寸的缩放值, 1 为与 canvas 尺寸相同
         */
        screenScale: number;
        /**
         * @en The target display for this Camera.
         * @zh 相机的目标屏幕序号
         */
        targetDisplay: number;
        onLoad(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        screenPointToRay(x: number, y: number, out?: ray): ray;
        worldToScreen(worldPos: Vec3, out?: Vec3): Vec3;
        screenToWorld(screenPos: Vec3, out?: Vec3): Vec3;
        protected _createCamera(): void;
        protected onSceneChanged(scene: Scene): void;
    }
}
declare module "cocos/3d/framework/light-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component } from "cocos/components/component";
    import { Color } from "cocos/core/value-types/index";
    import { Light, LightType } from "cocos/renderer/scene/light";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    export const PhotometricTerm: {
        LUMINOUS_POWER: number;
        LUMINANCE: number;
    };
    export class LightComponent extends Component {
        static Type: typeof LightType;
        static PhotometricTerm: {
            LUMINOUS_POWER: number;
            LUMINANCE: number;
        };
        protected _color: Color;
        protected _useColorTemperature: boolean;
        protected _colorTemperature: number;
        protected _type: LightType;
        protected _light: Light | null;
        /**
         * @en
         * The light source color
         * @zh
         * 光源颜色
         */
        color: Color;
        /**
         * @en
         * Whether to enable light color temperature
         * @zh
         * 是否启用光源色温
         */
        useColorTemperature: boolean;
        /**
         * @en
         * The light color temperature
         * @zh
         * 光源色温
         */
        colorTemperature: number;
        /**
         * @en
         * The light type
         * @zh
         * 光源类型
         */
        readonly type: LightType;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        protected _createLight(scene?: RenderScene): void;
        protected _destroyLight(scene?: RenderScene): void;
    }
}
declare module "cocos/3d/framework/directional-light-component" {
    import { DirectionalLight } from "cocos/renderer/scene/directional-light";
    import { LightType } from "cocos/renderer/scene/light";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    import { LightComponent } from "cocos/3d/framework/light-component";
    export class DirectionalLightComponent extends LightComponent {
        protected _illuminance: number;
        protected _type: LightType;
        protected _light: DirectionalLight | null;
        /**
         * @en
         * The light source intensity
         * @zh
         * 光源强度
         */
        illuminance: number;
        protected _createLight(scene?: RenderScene): void;
        protected _destroyLight(scene?: RenderScene): void;
    }
}
declare module "cocos/3d/framework/editor-camera-component" {
    import { CameraComponent } from "cocos/3d/framework/camera-component";
    export class EditorCameraComponent extends CameraComponent {
        private _uiEditorCamera;
        projection: any;
        fov: any;
        orthoHeight: any;
        near: any;
        far: any;
        color: any;
        depth: any;
        stencil: any;
        clearFlags: any;
        rect: any;
        screenScale: any;
        targetDisplay: any;
        onLoad(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        protected _createCamera(): void;
    }
}
declare module "cocos/3d/framework/particle/particle" {
    import { vec3 } from "cocos/core/vmath/index";
    import { Color } from "cocos/core/value-types/index";
    import { ParticleSystemComponent } from "cocos/3d/framework/particle/particle-system-component";
    export default class Particle {
        particleSystem: ParticleSystemComponent;
        position: vec3;
        velocity: vec3;
        animatedVelocity: vec3;
        ultimateVelocity: vec3;
        angularVelocity: vec3;
        axisOfRotation: vec3;
        rotation: vec3;
        startSize: vec3;
        size: vec3;
        startColor: Color;
        color: any;
        randomSeed: number;
        remainingLifetime: number;
        startLifetime: number;
        emitAccumulator0: number;
        emitAccumulator1: number;
        frameIndex: number;
        constructor(particleSystem: any);
    }
}
declare module "cocos/3d/framework/particle/animator/gradient" {
    import { Color } from "cocos/core/value-types/index";
    export class ColorKey {
        color: any;
        time: number;
    }
    export class AlphaKey {
        alpha: number;
        time: number;
    }
    export default class Gradient {
        static Mode: {
            Blend: number;
            Fixed: number;
        };
        colorKeys: ColorKey[];
        alphaKeys: AlphaKey[];
        mode: number;
        private _color;
        constructor();
        setKeys(colorKeys: ColorKey[], alphaKeys: AlphaKey[]): void;
        sortKeys(): void;
        private getRGB;
        private getAlpha;
        evaluate(time: number): Color;
        randomColor(): Color;
    }
}
declare module "cocos/3d/framework/particle/animator/gradient-range" {
    import Gradient from "cocos/3d/framework/particle/animator/gradient";
    export default class GradientRange {
        static Mode: {
            Color: number;
            Gradient: number;
            TwoColors: number;
            TwoGradients: number;
            RandomColor: number;
        };
        private _mode;
        mode: number;
        color: any;
        colorMin: any;
        colorMax: any;
        gradient: Gradient;
        gradientMin: Gradient;
        gradientMax: Gradient;
        evaluate(time: number, rndRatio: number): any;
    }
    export class GradientUniform {
        gr: GradientRange | null;
        minColor: Float32Array | null;
        maxColor: Float32Array | null;
        minColorKeyTime: Float32Array | null;
        minColorKeyValue: Float32Array | null;
        minAlphaKeyTime: Float32Array | null;
        minAlphaKeyValue: Float32Array | null;
        maxColorKeyTime: Float32Array | null;
        maxColorKeyValue: Float32Array | null;
        maxAlphaKeyTime: Float32Array | null;
        maxAlphaKeyValue: Float32Array | null;
        constructor(gr: GradientRange);
        uploadUniform(device: any, name: string): void;
        static generateGradientUniform(gradient: Gradient, colorKeyTime: number, colorKeyValue: Float32Array, alphaKeyTime: number, alphaKeyValue: Float32Array): void;
    }
}
declare module "cocos/3d/framework/particle/animator/color-overtime" {
    import Particle from "cocos/3d/framework/particle/particle";
    import GradientRange from "cocos/3d/framework/particle/animator/gradient-range";
    export default class ColorOvertimeModule {
        /**
         * 是否启用
         */
        enable: boolean;
        /**
         * 颜色随时间变化的参数，各个 key 之间线性差值变化
         */
        color: GradientRange;
        animate(particle: Particle): void;
    }
}
declare module "cocos/3d/framework/particle/animator/curve-range" {
    import { AnimationCurve } from "cocos/3d/geom-utils/index";
    export const Mode: {
        Constant: number;
        Curve: number;
        TwoCurves: number;
        TwoConstants: number;
    };
    export default class CurveRange {
        static Mode: {
            Constant: number;
            Curve: number;
            TwoCurves: number;
            TwoConstants: number;
        };
        mode: number;
        curve: AnimationCurve;
        curveMin: AnimationCurve;
        curveMax: AnimationCurve;
        constant: number;
        constantMin: number;
        constantMax: number;
        multiplier: number;
        constructor();
        evaluate(time: number, rndRatio: number): number | undefined;
        getMax(): number;
    }
}
declare module "cocos/3d/framework/particle/enum" {
    export const Space: {
        World: number;
        Local: number;
        Custom: number;
    };
    /**
     * 粒子的生成模式
     * @enum ParticleSystemRenderer.RenderMode
     */
    export const RenderMode: {
        /**
         * 粒子始终面向摄像机
         */
        Billboard: number;
        /**
         * 粒子始终面向摄像机但会根据参数进行拉伸
         */
        StrecthedBillboard: number;
        /**
         * 粒子始终与 XZ 平面平行
         */
        HorizontalBillboard: number;
        /**
         * 粒子始终与 Y 轴平行且朝向摄像机
         */
        VerticalBillboard: number;
        /**
         * 粒子保持模型本身状态
         */
        Mesh: number;
    };
    /**
     * 粒子发射器类型
     * @enum shapeModule.ShapeType
     */
    export const ShapeType: {
        /**
         * 立方体类型粒子发射器
         * @property {Number} Box
         */
        Box: number;
        /**
         * 圆形粒子发射器
         * @property {Number} Circle
         */
        Circle: number;
        /**
         * 圆锥体粒子发射器
         * @property {Number} Cone
         */
        Cone: number;
        /**
         * 球体粒子发射器
         * @property {Number} Sphere
         */
        Sphere: number;
        /**
         * 半球体粒子发射器
         * @property {Number} Hemisphere
         */
        Hemisphere: number;
    };
    /**
     * 粒子从发射器的哪个部位发射
     * @enum shapeModule.EmitLocation
     */
    export const EmitLocation: {
        /**
         * 基础位置发射（仅对 Circle 类型及 Cone 类型的粒子发射器适用）
         * @property {Number} Base
         */
        Base: number;
        /**
         * 边框位置发射（仅对 Box 类型及 Circle 类型的粒子发射器适用）
         * @property {Number} Edge
         */
        Edge: number;
        /**
         * 表面位置发射（对所有类型的粒子发射器都适用）
         * @property {Number} Shell
         */
        Shell: number;
        /**
         * 内部位置发射（对所有类型的粒子发射器都适用）
         * @property {Number} Volume
         */
        Volume: number;
    };
    /**
     * 粒子在扇形区域的发射方式
     * @enum shapeModule.ArcMode
     */
    export const ArcMode: {
        /**
         * 随机位置发射
         * @property {Number} Random
         */
        Random: number;
        /**
         * 沿某一方向循环发射，每次循环方向相同
         * @property {Number} Loop
         */
        Loop: number;
        /**
         * 循环发射，每次循环方向相反
         * @property {Number} PingPong
         */
        PingPong: number;
    };
    /**
     * 选择如何为粒子系统生成轨迹
     * @enum trailModule.TrailMode
     */
    export const TrailMode: {
        /**
         * 粒子模式<bg>
         * 创建一种效果，其中每个粒子在其路径中留下固定的轨迹
         */
        Particles: number;
        /**
         * 带模式<bg>
         * 根据其生命周期创建连接每个粒子的轨迹带
         */
        Ribbon: number;
    };
    /**
     * 纹理填充模式
     * @enum trailModule.TextureMode
     */
    export const TextureMode: {
        /**
         * 拉伸填充纹理
         */
        Stretch: number;
        /**
         * 重复填充纹理
         */
        Repeat: number;
    };
}
declare module "cocos/3d/framework/particle/particle-general-function" {
    import { mat4, quat, vec2, vec3 } from "cocos/core/vmath/index";
    export const particleEmitZAxis: vec3;
    export function calculateTransform(systemSpace: number, moduleSpace: number, worldTransform: mat4, outQuat: quat): boolean;
    export function fixedAngleUnitVector2(out: vec2 | vec3, theta: number): void;
    export function randomUnitVector2(out: vec2 | vec3): void;
    export function randomUnitVector(out: vec3): void;
    export function randomPointInUnitSphere(out: vec3): void;
    export function randomPointBetweenSphere(out: vec3, minRadius: number, maxRadius: number): void;
    export function randomPointInUnitCircle(out: vec3): void;
    export function randomPointBetweenCircle(out: vec3, minRadius: number, maxRadius: number): void;
    export function randomPointBetweenCircleAtFixedAngle(out: vec3, minRadius: number, maxRadius: number, theta: number): void;
    export function randomPointInCube(out: vec3, extents: vec3): void;
    export function randomPointBetweenCube(out: vec3, minBox: vec3, maxBox: vec3): void;
    export function randomSortArray(arr: any[]): void;
    export function randomSign(): number;
}
declare module "cocos/3d/framework/particle/animator/force-overtime" {
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    export default class ForceOvertimeModule {
        /**
         * 是否启用
         */
        enable: boolean;
        /**
         * X 轴方向上的加速度分量
         */
        x: CurveRange;
        /**
         * Y 轴方向上的加速度分量
         */
        y: CurveRange;
        /**
         * Z 轴方向上的加速度分量
         */
        z: CurveRange;
        /**
         * 加速度计算时采用的坐标系
         */
        space: number;
        randomized: boolean;
        private rotation;
        private needTransform;
        constructor();
        update(space: any, worldTransform: any): void;
        animate(p: any, dt: any): void;
    }
}
declare module "cocos/3d/framework/particle/animator/limit-velocity-overtime" {
    import Particle from "cocos/3d/framework/particle/particle";
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    export default class LimitVelocityOvertimeModule {
        /**
         * 是否启用
         */
        enable: boolean;
        /**
         * X 轴方向上的速度下限
         */
        limitX: CurveRange;
        /**
         * Y 轴方向上的速度下限
         */
        limitY: CurveRange;
        /**
         * Z 轴方向上的速度下限
         */
        limitZ: CurveRange;
        /**
         * 速度下限
         */
        limit: CurveRange;
        /**
         * 当前速度与速度下限的插值
         */
        dampen: number;
        /**
         * 是否三个轴分开限制
         */
        separateAxes: boolean;
        /**
         * 计算速度下限时采用的坐标系
         */
        space: number;
        drag: null;
        multiplyDragByParticleSize: boolean;
        multiplyDragByParticleVelocity: boolean;
        constructor();
        animate(p: Particle): void;
    }
}
declare module "cocos/3d/framework/particle/animator/rotation-overtime" {
    import Particle from "cocos/3d/framework/particle/particle";
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    export default class RotationOvertimeModule {
        /**
         * 是否启用
         */
        enable: boolean;
        private _separateAxes;
        /**
         * 是否三个轴分开设定旋转（暂不支持）
         */
        separateAxes: boolean;
        /**
         * 绕 X 轴设定旋转
         */
        x: CurveRange;
        /**
         * 绕 Y 轴设定旋转
         */
        y: CurveRange;
        /**
         * 绕 X 轴设定旋转
         */
        z: CurveRange;
        constructor();
        animate(p: Particle, dt: number): void;
    }
}
declare module "cocos/3d/framework/particle/animator/size-overtime" {
    import Particle from "cocos/3d/framework/particle/particle";
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    export default class SizeOvertimeModule {
        /**
         * 是否启用
         */
        enable: boolean;
        /**
         * 决定是否在每个轴上独立控制粒子大小
         */
        separateAxes: boolean;
        /**
         * 定义一条曲线来决定粒子在其生命周期中的大小变化
         */
        size: CurveRange;
        /**
         * 定义一条曲线来决定粒子在其生命周期中 X 轴方向上的大小变化
         */
        x: CurveRange;
        /**
         * 定义一条曲线来决定粒子在其生命周期中 Y 轴方向上的大小变化
         */
        y: CurveRange;
        /**
         * 定义一条曲线来决定粒子在其生命周期中 Z 轴方向上的大小变化
         */
        z: CurveRange;
        animate(particle: Particle): void;
    }
}
declare module "cocos/3d/framework/particle/animator/texture-animation" {
    import Particle from "cocos/3d/framework/particle/particle";
    import { ParticleSystemComponent } from "cocos/3d/framework/particle/particle-system-component";
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    export default class TextureAnimationModule {
        private _enable;
        /**
         * 是否启用
         */
        enable: boolean;
        private _mode;
        /**
         * 设定粒子贴图动画的类型（暂只支持 Grid 模式）
         */
        mode: number;
        /**
         * X 方向动画帧数
         */
        numTilesX: number;
        /**
         * Y 方向动画帧数
         */
        numTilesY: number;
        /**
         * 动画播放方式
         */
        animation: number;
        /**
         * 一个周期内动画播放的帧与时间变化曲线
         */
        frameOverTime: CurveRange;
        /**
         * 从第几帧开始播放，时间为整个粒子系统的生命周期
         */
        startFrame: CurveRange;
        /**
         * 一个生命周期内播放循环的次数
         */
        cycleCount: number;
        private _flipU;
        flipU: number;
        private _flipV;
        flipV: number;
        private _uvChannelMask;
        uvChannelMask: number;
        /**
         * 随机从动画贴图中选择一行以生成动画
         * 此选项仅在动画播放方式为 SingleRow 时生效
         */
        randomRow: boolean;
        /**
         * 从动画贴图中选择特定行以生成动画
         * 此选项仅在动画播放方式为 SingleRow 时且禁用 randomRow 时可用
         */
        rowIndex: number;
        private ps;
        onInit(ps: ParticleSystemComponent): void;
        animate(p: Particle): void;
    }
}
declare module "cocos/3d/framework/particle/animator/velocity-overtime" {
    import { mat4 } from "cocos/core/vmath/index";
    import Particle from "cocos/3d/framework/particle/particle";
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    export default class VelocityOvertimeModule {
        /**
         * 是否启用
         */
        enable: boolean;
        /**
         * X 轴方向上的速度分量
         */
        x: CurveRange;
        /**
         * Y 轴方向上的速度分量
         */
        y: CurveRange;
        /**
         * Z 轴方向上的速度分量
         */
        z: CurveRange;
        /**
         * 速度修正系数（只支持 CPU 粒子）
         */
        speedModifier: CurveRange;
        /**
         * 速度计算时采用的坐标系
         */
        space: number;
        private rotation;
        private needTransform;
        constructor();
        update(space: number, worldTransform: mat4): void;
        animate(p: Particle): void;
    }
}
declare module "cocos/3d/framework/particle/burst" {
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    export default class Burst {
        private _time;
        /**
         * 粒子系统开始运行到触发此次 Brust 的时间
         */
        time: number;
        /**
         * 发射粒子的最小数量
         */
        minCount: number;
        /**
         * 发射粒子的最大数量
         */
        maxCount: number;
        private _repeatCount;
        /**
         * Burst 的触发次数
         */
        repeatCount: number;
        /**
         * 每次触发的间隔时间
         */
        repeatInterval: number;
        /**
         * 发射的粒子的数量
         */
        count: CurveRange;
        private _remainingCount;
        private _curTime;
        constructor();
        update(psys: any, dt: number): void;
        getMaxCount(psys: any): number;
    }
}
declare module "cocos/3d/framework/particle/emitter/shape-module" {
    import { Vec3 } from "cocos/core/value-types/index";
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    import { ParticleSystemComponent } from "cocos/3d/framework/particle/particle-system-component";
    export default class ShapeModule {
        /**
         * 是否启用
         */
        enable: boolean;
        /**
         * 粒子发射器类型
         */
        shapeType: number;
        /**
         * 粒子从发射器哪个部位发射
         */
        emitFrom: number;
        private _position;
        /**
         * 粒子发射器位置
         */
        position: Vec3;
        private _rotation;
        /**
         * 粒子发射器旋转角度
         */
        rotation: Vec3;
        private _scale;
        /**
         * 粒子发射器缩放比例
         */
        scale: Vec3;
        /**
         * 根据粒子的初始方向决定粒子的移动方向
         */
        alignToDirection: boolean;
        /**
         * 粒子生成方向随机设定
         */
        randomDirectionAmount: number;
        /**
         * 表示当前发射方向与当前位置到结点中心连线方向的插值
         */
        sphericalDirectionAmount: number;
        /**
         * 粒子生成位置随机设定（设定此值为非 0 会使粒子生成位置超出生成器大小范围）
         */
        randomPositionAmount: number;
        /**
         * 粒子发射器半径
         */
        radius: number;
        /**
         * 粒子发射器发射位置（对 Box 类型的发射器无效）<bg>
         * 0 表示从表面发射
         * 1 表示从中心发射
         * 0 ~ 1 之间表示在中心到表面之间发射
         */
        radiusThickness: number;
        private _arc;
        /**
         * 粒子发射器在一个扇形范围内发射
         */
        arc: number;
        /**
         * 粒子在扇形范围内的发射方式
         */
        arcMode: number;
        /**
         * 控制可能产生粒子的弧周围的离散间隔。
         */
        arcSpread: number;
        /**
         * 粒子沿圆周发射的速度
         */
        arcSpeed: CurveRange;
        private _angle;
        /**
         * 圆锥的轴与母线的夹角<bg>
         * 决定圆锥发射器的开合程度
         */
        angle: number;
        /**
         * 圆锥顶部截面距离底部的轴长<bg>
         * 决定圆锥发射器的高度
         */
        length: number;
        /**
         * 粒子发射器发射位置（针对 Box 类型的粒子发射器）
         */
        boxThickness: Vec3;
        private mat;
        private quat;
        private particleSystem;
        private lastTime;
        private totalAngle;
        constructor();
        onInit(ps: ParticleSystemComponent): void;
        private constructMat;
        emit(p: any): void;
        private generateArcAngle;
    }
}
declare module "cocos/3d/framework/particle/renderer/particle-system-renderer" {
    import { Mesh } from "cocos/3d/assets/index";
    import { Material } from "cocos/3d/assets/material";
    import Particle from "cocos/3d/framework/particle/particle";
    export default class ParticleSystemRenderer {
        /**
         * 设定粒子生成模式
         */
        renderMode: number;
        /**
         * 在粒子生成方式为 StrecthedBillboard 时,对粒子在运动方向上按速度大小进行拉伸
         */
        velocityScale: number;
        /**
         * 在粒子生成方式为 StrecthedBillboard 时,对粒子在运动方向上按粒子大小进行拉伸
         */
        lengthScale: number;
        private _renderMode;
        private _velocityScale;
        private _lengthScale;
        private _mesh;
        /**
         * 粒子模型
         */
        mesh: Mesh | null;
        particleMaterial: any;
        trailMaterial: any;
        private _defines;
        private _trailDefines;
        private _model;
        private frameTile_velLenScale;
        private attrs;
        private _vertAttrs;
        private particleSystem;
        private _particles;
        private _defaultMat;
        private _isAssetReady;
        private _defaultTrailMat;
        constructor();
        onInit(ps: any): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        clear(): void;
        _getFreeParticle(): Particle | null;
        _setNewParticle(p: Particle): void;
        _updateParticles(dt: number): void;
        _updateRenderData(): void;
        updateShaderUniform(): void;
        getParticleCount(): number;
        _onMaterialModified(index: number, material: Material): void;
        _onRebuildPSO(index: number, material: Material): void;
        protected _ensureLoadMesh(): void;
        protected _assetReady(): void;
        private _setVertexAttrib;
        private _updateMaterialParams;
        private _updateTrailMaterial;
        private _updateModel;
    }
}
declare module "cocos/3d/framework/particle/renderer/trail" {
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    import GradientRange from "cocos/3d/framework/particle/animator/gradient-range";
    import Particle from "cocos/3d/framework/particle/particle";
    export default class TrailModule {
        /**
         * 是否启用
         */
        enable: boolean;
        _enable: boolean;
        /**
         * 设定粒子生成轨迹的方式
         */
        mode: number;
        /**
         * 设定粒子中生成轨迹的比例
         */
        ratio: number;
        /**
         * 轨迹存在的生命周期
         */
        lifeTime: CurveRange;
        /**
         * 每个轨迹粒子之间的最小间距
         */
        minParticleDistance: number;
        _minParticleDistance: number;
        /**
         * 轨迹设定时的坐标系
         */
        private _space;
        space: number;
        /**
         * 粒子本身是否存在
         */
        existWithParticles: boolean;
        /**
         * 设定纹理填充方式
         */
        textureMode: number;
        /**
         * 控制轨迹长度的曲线
         */
        widthRatio: CurveRange;
        colorOverTrail: GradientRange;
        private _particleSystem;
        private _minSquaredDistance;
        private _vertSize;
        private _trailNum;
        private _trailLifetime;
        private vbOffset;
        private ibOffset;
        private _trailSegments;
        private _particleTrail;
        private _trailModel;
        private _iaInfo;
        private _iaInfoBuffer;
        private _subMeshData;
        private _vertAttrs;
        private _vbF32;
        private _vbUint32;
        private _iBuffer;
        private _needTransform;
        private _defaultMat;
        constructor();
        init(ps: any): void;
        onEnable(): void;
        onDisable(): void;
        destroy(): void;
        private _createModel;
        _updateMaterial(): void;
        update(): void;
        animate(p: Particle, scaledDt: number): void;
        private _updateTrailElement;
        removeParticle(p: Particle): void;
        updateRenderData(): void;
        private _fillVertexBuffer;
        updateIA(count: number): void;
    }
}
declare module "cocos/3d/framework/particle/particle-system-component" {
    import { Material } from "cocos/3d/assets/index";
    import { RenderableComponent } from "cocos/3d/framework/renderable-component";
    import ColorOverLifetimeModule from "cocos/3d/framework/particle/animator/color-overtime";
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    import ForceOvertimeModule from "cocos/3d/framework/particle/animator/force-overtime";
    import GradientRange from "cocos/3d/framework/particle/animator/gradient-range";
    import LimitVelocityOvertimeModule from "cocos/3d/framework/particle/animator/limit-velocity-overtime";
    import RotationOvertimeModule from "cocos/3d/framework/particle/animator/rotation-overtime";
    import SizeOvertimeModule from "cocos/3d/framework/particle/animator/size-overtime";
    import TextureAnimationModule from "cocos/3d/framework/particle/animator/texture-animation";
    import VelocityOvertimeModule from "cocos/3d/framework/particle/animator/velocity-overtime";
    import ShapeModule from "cocos/3d/framework/particle/emitter/shape-module";
    import ParticleSystemRenderer from "cocos/3d/framework/particle/renderer/particle-system-renderer";
    import TrailModule from "cocos/3d/framework/particle/renderer/trail";
    export class ParticleSystemComponent extends RenderableComponent {
        /**
         * 粒子系统能生成的最大粒子数量
         */
        capacity: number;
        /**
         * 粒子初始颜色
         */
        startColor: GradientRange;
        /**
         * 粒子初始大小
         */
        startSize: CurveRange;
        /**
         * 粒子初始速度
         */
        startSpeed: CurveRange;
        /**
         * 粒子初始旋转角度
         */
        startRotation: CurveRange;
        /**
         * 粒子系统开始运行后，延迟粒子发射的时间
         */
        startDelay: CurveRange;
        /**
         * 粒子生命周期
         */
        startLifetime: CurveRange;
        /**
         * 粒子系统运行时间
         */
        duration: number;
        /**
         * 粒子系统是否循环播放
         */
        loop: boolean;
        /**
         * 选中之后，粒子系统会以已播放完一轮之后的状态开始播放（仅当循环播放启用时有效）
         */
        prewarm: boolean;
        /**
         * 选择粒子系统所在的坐标系<br>
         * 世界坐标（不随其他物体位置改变而变换）<br>
         * 局部坐标（跟随父节点位置改变而移动）<br>
         * 自定坐标（跟随自定义节点的位置改变而移动）
         */
        simulationSpace: number;
        /**
         * 控制整个粒子系统的更新速度
         */
        simulationSpeed: number;
        /**
         * 粒子系统加载后是否自动开始播放
         */
        playOnAwake: boolean;
        /**
         * 粒子受重力影响的重力系数
         */
        gravityModifier: CurveRange;
        /**
         * 每秒发射的粒子数
         */
        rateOverTime: CurveRange;
        /**
         * 每移动单位距离发射的粒子数
         */
        rateOverDistance: CurveRange;
        /**
         * 设定在指定时间发射指定数量的粒子的 Brust 的数量
         */
        bursts: any[];
        sharedMaterials: (Material | null)[];
        /**
         * 颜色控制模块
         */
        colorOverLifetimeModule: ColorOverLifetimeModule;
        /**
         * 粒子发射器模块
         */
        shapeModule: ShapeModule;
        /**
         * 粒子大小模块
         */
        sizeOvertimeModule: SizeOvertimeModule;
        /**
         * 粒子速度模块
         */
        velocityOvertimeModule: VelocityOvertimeModule;
        /**
         * 粒子加速度模块
         */
        forceOvertimeModule: ForceOvertimeModule;
        /**
         * 粒子限制速度模块（只支持 CPU 粒子）
         */
        limitVelocityOvertimeModule: LimitVelocityOvertimeModule;
        /**
         * 粒子旋转模块
         */
        rotationOvertimeModule: RotationOvertimeModule;
        /**
         * 贴图动画模块
         */
        textureAnimationModule: TextureAnimationModule;
        /**
         * 粒子轨迹模块
         */
        trailModule: TrailModule;
        renderer: ParticleSystemRenderer;
        private _isPlaying;
        private _isPaused;
        private _isStopped;
        private _isEmitting;
        private _time;
        private _emitRateTimeCounter;
        private _emitRateDistanceCounter;
        private _oldWPos;
        private _curWPos;
        private _customData1;
        private _customData2;
        private _subEmitters;
        private _prewarm;
        private _capacity;
        private _simulationSpace;
        constructor();
        onLoad(): void;
        _onMaterialModified(index: number, material: Material): void;
        _onRebuildPSO(index: number, material: Material): void;
        /**
         * 播放粒子效果
         */
        play(): void;
        /**
         * 暂停播放粒子效果
         */
        pause(): void;
        /**
         * 停止播放粒子
         */
        stop(): void;
        /**
         * 将所有粒子从粒子系统中清除
         */
        clear(): void;
        getParticleCount(): number;
        setCustomData1(x: any, y: any): void;
        setCustomData2(x: any, y: any): void;
        protected onDestroy(): void;
        protected onEnable(): void;
        protected onDisable(): void;
        protected update(dt: any): void;
        private emit;
        private _prewarmSystem;
        private _emit;
        private addSubEmitter;
        private removeSubEmitter;
        private addBurst;
        private removeBurst;
        readonly isPlaying: boolean;
        readonly isPaused: boolean;
        readonly isStopped: boolean;
        readonly isEmitting: boolean;
        readonly time: number;
    }
}
declare module "cocos/3d/framework/particle/particle-utils" {
    import { CCObject } from "cocos/core/index";
    import { Node } from "cocos/scene-graph/index";
    export class ParticleUtils {
        private static particleSystemPool;
        private static registeredSceneEvent;
        /**
         * instantiate
         */
        static instantiate(prefab: any): CCObject;
        static destroy(prefab: any): void;
        private static onSceneUnload;
        static play(rootNode: Node): void;
        static stop(rootNode: Node): void;
    }
}
declare module "cocos/3d/physics/physic-enum" {
    export enum ERigidBodyType {
        DYNAMIC = 1,
        STATIC = 2,
        KINEMATIC = 4
    }
    export enum ETransformSource {
        SCENE = 0,
        PHYSIC = 1
    }
    export enum EShapeType {
        SHAPE_RAY = 1,
        SHAPE_LINE = 2,
        SHAPE_SPHERE = 4,
        SHAPE_AABB = 8,
        SHAPE_OBB = 16,
        SHAPE_PLANE = 32,
        SHAPE_TRIANGLE = 64,
        SHAPE_FRUSTUM = 128,
        SHAPE_FRUSTUM_ACCURATE = 256
    }
}
declare module "cocos/3d/physics/raycast-result" {
    import { Component } from "cocos/components/component";
    import { Vec3 } from "cocos/core/value-types/index";
    import { vec3 } from "cocos/core/vmath/index";
    import { Node } from "cocos/scene-graph/index";
    import { RigidBodyBase, ShapeBase } from "cocos/3d/physics/api";
    export class RaycastResult {
        readonly hitPoint: Vec3;
        readonly distance: number;
        readonly collider: Component;
        readonly node: Node;
        private _hitPoint;
        private _distance;
        private _collidier;
        private _node;
        _assign(hitPoint: vec3, distance: number, shape: ShapeBase, body: RigidBodyBase): void;
    }
}
declare module "cocos/3d/physics/api" {
    import { Quat, Vec3 } from "cocos/core/value-types/index";
    import { ERigidBodyType } from "cocos/3d/physics/physic-enum";
    import { RaycastResult } from "cocos/3d/physics/raycast-result";
    export interface IRaycastOptions {
        collisionFilterMask?: number;
        collisionFilterGroup?: number;
        queryTriggerInteraction?: boolean;
    }
    export interface ICreateBodyOptions {
        name?: string;
    }
    export interface ICollisionEvent {
        source: RigidBodyBase;
        target: RigidBodyBase;
    }
    export type ICollisionType = 'onCollisionEnter' | 'onCollisionStay' | 'onCollisionExit';
    export type ICollisionCallback = (type: ICollisionType, event: ICollisionEvent) => void;
    export type BeforeStepCallback = () => void;
    export type AfterStepCallback = () => void;
    export interface PhysicsWorldBase {
        step(deltaTime: number): void;
        addBeforeStep(cb: BeforeStepCallback): void;
        removeBeforeStep(cb: BeforeStepCallback): void;
        addAfterStep(cb: AfterStepCallback): void;
        removeAfterStep(cb: AfterStepCallback): void;
        /**
         * Ray cast, and return information of the closest hit.
         * @return True if any body was hit.
         */
        raycastClosest(from: Vec3, to: Vec3, options: IRaycastOptions, result: RaycastResult): boolean;
        /**
         * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.
         * @return True if any body was hit.
         */
        raycastAny(from: Vec3, to: Vec3, options: IRaycastOptions, result: RaycastResult): boolean;
        /**
         * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.
         * @return True if any body was hit.
         */
        raycastAll(from: Vec3, to: Vec3, options: IRaycastOptions, callback: (result: RaycastResult) => void): boolean;
    }
    export interface RigidBodyBase {
        /** @return group ∈ [0, 31] (int) */
        getGroup(): number;
        /** @param v ∈ [0, 31] (int) */
        setGroup(v: number): void;
        /** @return (int) */
        getMask(): number;
        /**
         *  this will reset the mask
         * @param v ∈ [0, 31] (int)
         */
        setMask(v: number): void;
        /**
         * this will add a mask
         * @param v ∈ [0, 31] (int)
         */
        addMask(v: number): void;
        /** the body type */
        getType(): ERigidBodyType;
        setType(v: ERigidBodyType): void;
        wakeUp(): void;
        sleep(): void;
        addShape(shape: ShapeBase): void;
        removeShape(shape: ShapeBase): void;
        getMass(): number;
        setMass(value: number): void;
        applyForce(force: Vec3, position?: Vec3): void;
        applyImpulse(impulse: Vec3, position?: Vec3): void;
        getIsKinematic(): boolean;
        setIsKinematic(value: boolean): void;
        getLinearDamping(): number;
        setLinearDamping(value: number): void;
        getAngularDamping(): number;
        setAngularDamping(value: number): void;
        getUseGravity(): boolean;
        setUseGravity(value: boolean): void;
        getIsTrigger(): boolean;
        setIsTrigger(value: boolean): void;
        getVelocity(): Vec3;
        setVelocity(value: Vec3): void;
        getFreezeRotation(): boolean;
        setFreezeRotation(value: boolean): void;
        /**
         * Set the collision filter of this body, remember that they are tested bitwise.
         * @param group The group which this body will be put into.
         * @param mask The groups which this body can collide with.
         */
        setCollisionFilter(group: number, mask: number): void;
        setWorld(world: PhysicsWorldBase | null): void;
        commitShapeUpdates(): void;
        isPhysicsManagedTransform(): boolean;
        getPosition(out: Vec3): void;
        setPosition(value: Vec3): void;
        getRotation(out: Quat): void;
        setRotation(out: Quat): void;
        scaleAllShapes(scale: Vec3): void;
        addCollisionCallback(callback: ICollisionCallback): void;
        removeCollisionCllback(callback: ICollisionCallback): void;
        getUserData(): any;
        setUserData(data: any): void;
    }
    export interface ShapeBase {
        setCenter(center: Vec3): void;
        setScale(scale: Vec3): void;
        setRotation(rotation: Quat): void;
        getUserData(): any;
        setUserData(data: any): void;
        getCollisionResponse(): boolean;
        setCollisionResponse(value: boolean): void;
    }
    export interface SphereShapeBase extends ShapeBase {
        setRadius(radius: number): void;
    }
    export interface BoxShapeBase extends ShapeBase {
        setSize(size: Vec3): void;
    }
    /**
     * Base class for Constraint classes.
     */
    export interface ConstraintBase {
        first: RigidBodyBase;
        second: RigidBodyBase;
        enable(): void;
        disable(): void;
        update(): void;
    }
    /**
     * DistanceConstraint options.
     */
    export interface IDistanceConstraintOptions {
        /**
         * The maximum force that should be applied to constrain the bodies.
         */
        maxForce?: number;
    }
    /**
     * Constrains two bodies to be at a constant distance from each others center of mass.
     */
    export interface DistanceConstraintBase extends ConstraintBase {
    }
    /**
     * PointToPointConstraint options.
     */
    export interface IPointToPointConstraintOptions {
        /**
         * The maximum force that should be applied to constrain the bodies.
         */
        maxForce?: number;
    }
    /**
     * Connects two bodies at given offset points.
     */
    export interface PointToPointConstraintBase extends ConstraintBase {
    }
    /**
     * LockConstraint options.
     */
    export interface ILockConstraintOptions {
        /**
         * The maximum force that should be applied to constrain the bodies.
         */
        maxForce?: number;
    }
    /**
     * The Lock constraint will remove all degrees of freedom between the bodies.
     */
    export interface LockConstraintBase extends ConstraintBase {
    }
}
declare module "cocos/3d/physics/util" {
    export function stringfyVec3(value: {
        x: number;
        y: number;
        z: number;
    }): string;
    export function stringfyQuat(value: {
        x: number;
        y: number;
        z: number;
        w: number;
    }): string;
}
declare module "cocos/3d/physics/cannon-impl" {
    import CANNON from 'cannon';
    import { Quat, Vec3 } from "cocos/core/value-types/index";
    import { AfterStepCallback, BeforeStepCallback, BoxShapeBase, ConstraintBase, DistanceConstraintBase, ICollisionCallback, ICreateBodyOptions, IDistanceConstraintOptions, ILockConstraintOptions, IPointToPointConstraintOptions, IRaycastOptions, LockConstraintBase, PhysicsWorldBase, PointToPointConstraintBase, RigidBodyBase, ShapeBase, SphereShapeBase } from "cocos/3d/physics/api";
    import { ERigidBodyType } from "cocos/3d/physics/physic-enum";
    import { RaycastResult } from "cocos/3d/physics/raycast-result";
    export class CannonWorld implements PhysicsWorldBase {
        private _cannonWorld;
        private _customBeforeStepListener;
        private _customAfterStepListener;
        private _onCannonPreStepListener;
        private _onCannonPostStepListener;
        private _cannonRaycastResult;
        constructor();
        destroy(): void;
        readonly impl: CANNON.World;
        step(deltaTime: number): void;
        addBeforeStep(cb: BeforeStepCallback): void;
        removeBeforeStep(cb: BeforeStepCallback): void;
        addAfterStep(cb: AfterStepCallback): void;
        removeAfterStep(cb: AfterStepCallback): void;
        raycastClosest(from: Vec3, to: Vec3, options: IRaycastOptions, result: RaycastResult): boolean;
        raycastAny(from: Vec3, to: Vec3, options: IRaycastOptions, result: RaycastResult): boolean;
        raycastAll(from: Vec3, to: Vec3, options: IRaycastOptions, callback: (result: RaycastResult) => void): boolean;
        addConstraint(constraint: CannonConstraint): void;
        removeConstraint(constraint: CannonConstraint): void;
        private _onCannonPreStep;
        private _onCannonPostStep;
        private _callCustomBeforeSteps;
        private _callCustomAfterSteps;
    }
    export class CannonRigidBody implements RigidBodyBase {
        readonly impl: CANNON.Body;
        private _group;
        private _mask;
        private _cannonBody;
        private _velocityResult;
        private _useGravity;
        private _cannonMaterial;
        private _onCollidedListener;
        private _onWorldBeforeStepListener;
        private _onWorldPostStepListener;
        private _collisionCallbacks;
        private _shapes;
        private _transformSource;
        private _userData;
        private _world;
        private _name;
        constructor(options?: ICreateBodyOptions);
        getGroup(): number;
        setGroup(v: number): void;
        getMask(): number;
        setMask(v: number): void;
        addMask(v: number): void;
        wakeUp(): void;
        sleep(): void;
        name(): string;
        getType(): ERigidBodyType;
        setType(v: ERigidBodyType): void;
        addShape(shape: CannonShape): void;
        removeShape(shape: CannonShape): void;
        commitShapeUpdates(): void;
        getMass(): number;
        setMass(value: number): void;
        getIsKinematic(): boolean;
        setIsKinematic(value: boolean): void;
        getLinearDamping(): number;
        setLinearDamping(value: number): void;
        getAngularDamping(): number;
        setAngularDamping(value: number): void;
        getUseGravity(): boolean;
        setUseGravity(value: boolean): void;
        getIsTrigger(): boolean;
        setIsTrigger(value: boolean): void;
        getVelocity(): Vec3;
        setVelocity(value: Vec3): void;
        getFreezeRotation(): boolean;
        setFreezeRotation(value: boolean): void;
        applyForce(force: Vec3, position?: Vec3): void;
        applyImpulse(impulse: Vec3): void;
        setCollisionFilter(group: number, mask: number): void;
        setWorld(world_: PhysicsWorldBase | null): void;
        isPhysicsManagedTransform(): boolean;
        getPosition(out: Vec3): void;
        setPosition(value: Vec3): void;
        getRotation(out: Quat): void;
        setRotation(value: Quat): void;
        scaleAllShapes(scale: Vec3): void;
        addCollisionCallback(callback: ICollisionCallback): void;
        removeCollisionCllback(callback: ICollisionCallback): void;
        getUserData(): any;
        setUserData(data: any): void;
        _stringfyThis(): string;
        _devStrinfy(): string;
        private _resetBodyTypeAccordingMess;
        private _onBodyTypeUpdated;
        private _onCollided;
        private _onWorldBeforeStep;
        private _onWorldPostStep;
        private _onSelfPreStep;
        private _onSelfPostStep;
        private _removeShape;
    }
    export class CannonShape implements ShapeBase {
        readonly impl: CANNON.Shape;
        protected _scale: Vec3;
        protected _cannonShape: CANNON.Shape | null;
        protected _body: CANNON.Body | null;
        private _index;
        private _center;
        private _userData;
        constructor();
        getUserData(): any;
        setUserData(data: any): void;
        _setIndex(index: number): void;
        _setBody(body: CANNON.Body, index: number): void;
        setCenter(center: Vec3): void;
        setScale(scale: Vec3): void;
        setRotation(rotation: Quat): void;
        getCollisionResponse(): boolean;
        setCollisionResponse(v: boolean): void;
        _devStrinfy(): string;
        private _recalcCenter;
    }
    export class CannonSphereShape extends CannonShape implements SphereShapeBase {
        private _cannonSphere;
        private _radius;
        constructor(radius: number);
        setScale(scale: Vec3): void;
        setRadius(radius: number): void;
        _devStrinfy(): string;
        private _recalcRadius;
    }
    export class CannonBoxShape extends CannonShape implements BoxShapeBase {
        private _cannonBox;
        private _halfExtent;
        constructor(size: Vec3);
        setScale(scale: Vec3): void;
        setSize(size: Vec3): void;
        _stringfyThis(): string;
        _devStrinfy(): string;
        private _recalcExtents;
    }
    /**
     * Constraint options.
     */
    export interface IConstraintOptions {
        /**
         * Set to true if you want the bodies to collide when they are connected.
         * @default true
         */
        collideConnected?: boolean;
        /**
         * @default true
         */
        wakeUpBodies?: boolean;
    }
    export class CannonConstraint implements ConstraintBase {
        protected _cannonConstraint: CANNON.Constraint;
        /**
         * @param first The first body.
         * @param second The second body.
         * @param options Options.
         */
        protected constructor(cannonConstraint: CANNON.Constraint);
        readonly first: CannonRigidBody;
        readonly second: CannonRigidBody;
        enable(): void;
        disable(): void;
        update(): void;
        readonly impl: CANNON.Constraint;
    }
    export class CannonDistanceConstraint extends CannonConstraint implements DistanceConstraintBase {
        constructor(first: CannonRigidBody, second: CannonRigidBody, distance?: number, options?: IDistanceConstraintOptions);
    }
    export class CannonPointToPointConstraint extends CannonConstraint implements PointToPointConstraintBase {
        constructor(first: CannonRigidBody, firstPivot: Vec3, second: CannonRigidBody, secondPivot: Vec3, options?: IPointToPointConstraintOptions);
    }
    export class CannonLockConstraint extends CannonConstraint implements LockConstraintBase {
        constructor(first: CannonRigidBody, second: CannonRigidBody, options?: ILockConstraintOptions);
    }
}
declare module "cocos/3d/physics/cocos/built-in-interface" {
    /**
     * 声明了一系列built-in-physics相关的的接口
     */
    export interface IShapeTransform {
        translate(...args: any): any;
        scale(...args: any): any;
        rotate(...args: any): any;
    }
}
declare module "cocos/3d/physics/cocos/shapes/BoxShape" {
    import { quat, vec3 } from "cocos/core/vmath/index";
    import { obb } from "cocos/3d/geom-utils/index";
    import { IShapeTransform } from "cocos/3d/physics/cocos/built-in-interface";
    export class BoxShape extends obb implements IShapeTransform {
        private _originHalfExtents;
        size: vec3;
        constructor(px?: number, py?: number, pz?: number, hw?: number, hh?: number, hl?: number, ox_1?: number, ox_2?: number, ox_3?: number, oy_1?: number, oy_2?: number, oy_3?: number, oz_1?: number, oz_2?: number, oz_3?: number);
        /** 根据世界pos和偏移offset设置obb的center */
        translate(pos: vec3, offset: vec3): void;
        /** 缩放obb */
        scale(scale: vec3): void;
        /** 根据四元数设置obb朝向 */
        rotate(rot: quat): void;
    }
}
declare module "cocos/3d/physics/cocos/shapes/SphereShape" {
    import { vec3 } from "cocos/core/vmath/index";
    import { sphere } from "cocos/3d/geom-utils/index";
    import { IShapeTransform } from "cocos/3d/physics/cocos/built-in-interface";
    export class SphereShape extends sphere implements IShapeTransform {
        constructor(cx?: number, cy?: number, cz?: number, r?: number);
        /** 根据世界pos和偏移offset设置obb的center */
        translate(pos: vec3, offset: vec3): void;
        /** 根据缩放向量缩放球 */
        scale(scale: vec3): void;
        /** 根据四元数设置朝向 */
        rotate(...args: any): void;
    }
}
declare module "cocos/3d/physics/cocos/built-in-shape" {
    import { Quat, Vec3 } from "cocos/core/value-types/index";
    import { ShapeBase } from "cocos/3d/physics/api";
    import { EShapeType } from "cocos/3d/physics/physic-enum";
    import { BuiltInBody } from "cocos/3d/physics/cocos/built-in-body";
    import { IShapeTransform } from "cocos/3d/physics/cocos/built-in-interface";
    export class BuiltInShape implements ShapeBase {
        readonly shape: IShapeTransform | undefined;
        type: EShapeType;
        protected _shape: IShapeTransform | undefined;
        protected _type: EShapeType;
        protected _body: BuiltInBody;
        /** 相对于节点的偏移 */
        protected _center: Vec3;
        _setBody(body: BuiltInBody): void;
        setCenter(center: Vec3): void;
        getUserData(): void;
        setUserData(data: any): void;
        getCollisionResponse(): boolean;
        setCollisionResponse(value: boolean): void;
        setPosition(pos: Vec3): void;
        setScale(scale: Vec3): void;
        setRotation(rotation: Quat): void;
    }
    export class BuiltInBoxShape extends BuiltInShape {
        private _box;
        constructor(size: Vec3);
        setSize(size: Vec3): void;
    }
    export class BuiltInSphereShape extends BuiltInShape {
        private _sphere;
        readonly radius: number;
        constructor(radius: any);
        setRadius(radius: number): void;
    }
}
declare module "cocos/3d/physics/cocos/utils/array-collision-matrix" {
    /**
     * Collision "matrix". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step
     * @class ArrayCollisionMatrix
     * @constructor
     */
    export class ArrayCollisionMatrix {
        /**
         * The matrix storage
         * @property matrix
         * @type {Array}
         */
        matrix: number[];
        /**
         * Get an element
         * @method get
         * @param  {Number} i
         * @param  {Number} j
         * @return {Number}
         */
        get(i: number, j: number): number;
        /**
         * Set an element
         * @method set
         * @param {Number} i
         * @param {Number} j
         * @param {boolean} value
         */
        set(i: number, j: number, value: boolean): void;
        /**
         * Sets all elements to zero
         * @method reset
         */
        reset(): void;
        /**
         * Sets the max number of objects
         * @method setNumObjects
         * @param {Number} n
         */
        setNumObjects(n: number): void;
    }
}
declare module "cocos/3d/physics/cocos/built-in-world" {
    import { Vec3 } from "cocos/core/index";
    import { AfterStepCallback, BeforeStepCallback, IRaycastOptions, PhysicsWorldBase, RigidBodyBase } from "cocos/3d/physics/api";
    import { RaycastResult } from "cocos/3d/physics/raycast-result";
    /**
     * Built-in collision system, intended for use as a
     * efficient discrete collision detector,
     * not a full physical simulator
     */
    export class BuiltInWorld implements PhysicsWorldBase {
        private _bodies;
        private _customBeforeStepListener;
        private _customAfterStepListener;
        /** 碰撞矩阵 */
        private _collisionMatrix;
        /** 上一次的碰撞矩阵 */
        constructor();
        step(deltaTime: number): void;
        addBody(body: RigidBodyBase): void;
        removeBody(body: RigidBodyBase): void;
        addBeforeStep(cb: BeforeStepCallback): void;
        removeBeforeStep(cb: BeforeStepCallback): void;
        addAfterStep(cb: AfterStepCallback): void;
        removeAfterStep(cb: AfterStepCallback): void;
        raycastClosest(from: Vec3, to: Vec3, options: IRaycastOptions, result: RaycastResult): boolean;
        raycastAny(from: Vec3, to: Vec3, options: IRaycastOptions, result: RaycastResult): boolean;
        raycastAll(from: Vec3, to: Vec3, options: IRaycastOptions, callback: (result: RaycastResult) => void): boolean;
    }
}
declare module "cocos/3d/physics/cocos/built-in-body" {
    import { Quat, Vec3 } from "cocos/core/value-types/index";
    import { ICollisionCallback, ICollisionEvent, ICollisionType as ICollisionEventType, PhysicsWorldBase, RigidBodyBase } from "cocos/3d/physics/api";
    import { ERigidBodyType } from "cocos/3d/physics/physic-enum";
    import { BuiltInShape } from "cocos/3d/physics/cocos/built-in-shape";
    /**
     * Built-in static collider, no physical forces involved
     */
    export class BuiltInBody implements RigidBodyBase {
        /** id unique */
        readonly id: number;
        readonly collisionFilterGroup: number;
        readonly collisionFilterMask: number;
        /** id generator */
        private static idCounter;
        private readonly _id;
        private _type;
        private _group;
        private _collisionFilterGroup;
        private _collisionFilterMask;
        private _collisionCB;
        /** 物理世界 */
        private _world;
        /** Body拥有的现状 */
        private _shapes;
        /** Body对应的场景对象 */
        private userData;
        constructor(options: any);
        getGroup(): number;
        setGroup(v: number): void;
        getMask(): number;
        setMask(v: number): void;
        addMask(v: number): void;
        intersects(body: BuiltInBody): boolean;
        onCollision(type: ICollisionEventType, event: ICollisionEvent): void;
        onTrigger(type: ICollisionEventType, event: ICollisionEvent): void;
        getType(): ERigidBodyType;
        setType(v: ERigidBodyType): void;
        wakeUp(): void;
        sleep(): void;
        addShape(shape: BuiltInShape): void;
        removeShape(shape: BuiltInShape): void;
        getMass(): number;
        setMass(value: number): void;
        applyForce(force: Vec3, position?: Vec3 | undefined): void;
        applyImpulse(impulse: Vec3, position?: Vec3 | undefined): void;
        getIsKinematic(): boolean;
        setIsKinematic(value: boolean): void;
        getLinearDamping(): number;
        setLinearDamping(value: number): void;
        getAngularDamping(): number;
        setAngularDamping(value: number): void;
        getUseGravity(): boolean;
        setUseGravity(value: boolean): void;
        getIsTrigger(): boolean;
        setIsTrigger(value: boolean): void;
        getVelocity(): Vec3;
        setVelocity(value: Vec3): void;
        getFreezeRotation(): boolean;
        setFreezeRotation(value: boolean): void;
        setCollisionFilter(group: number, mask: number): void;
        setWorld(world: PhysicsWorldBase | null): void;
        commitShapeUpdates(): void;
        isPhysicsManagedTransform(): boolean;
        getPosition(out: Vec3): void;
        setPosition(pos: Vec3): void;
        getRotation(out: Quat): void;
        setRotation(rot: Quat): void;
        scaleAllShapes(scale: Vec3): void;
        addCollisionCallback(callback: ICollisionCallback): void;
        removeCollisionCllback(callback: ICollisionCallback): void;
        getUserData(): any;
        setUserData(data: any): void;
    }
}
declare module "cocos/3d/physics/impl-selector" {
    import { CannonBoxShape, CannonRigidBody, CannonSphereShape, CannonWorld } from "cocos/3d/physics/cannon-impl";
    import { BuiltInBody } from "cocos/3d/physics/cocos/built-in-body";
    import { BuiltInBoxShape } from "cocos/3d/physics/cocos/built-in-shape";
    import { BuiltInSphereShape } from "cocos/3d/physics/cocos/built-in-shape";
    import { BuiltInWorld } from "cocos/3d/physics/cocos/built-in-world";
    export let BoxShape: typeof CannonBoxShape | typeof BuiltInBoxShape;
    export let SphereShape: typeof CannonSphereShape | typeof BuiltInSphereShape;
    export let RigidBody: typeof CannonRigidBody | typeof BuiltInBody;
    export let PhysicsWorld: typeof CannonWorld | typeof BuiltInWorld;
}
declare module "cocos/3d/physics/instance" {
    import { Vec3 } from "cocos/core/value-types/index";
    import { BoxShapeBase, ICreateBodyOptions, PhysicsWorldBase, RigidBodyBase, SphereShapeBase } from "cocos/3d/physics/api";
    import { RaycastResult } from "cocos/3d/physics/raycast-result";
    export function createPhysicsWorld(): PhysicsWorldBase;
    export function createRigidBody(options?: ICreateBodyOptions): RigidBodyBase;
    export function createBoxShape(size: Vec3): BoxShapeBase;
    export function createSphereShape(radius: number): SphereShapeBase;
    export function createRaycastResult(): RaycastResult;
}
declare module "cocos/3d/framework/physics/detail/physics-based-component" {
    import { Component } from "cocos/components/component";
    import { Node } from "cocos/scene-graph/node";
    import { PhysicsWorldBase, RigidBodyBase } from "cocos/3d/physics/api";
    import { ETransformSource } from "cocos/3d/physics/physic-enum";
    export class PhysicsBasedComponent extends Component {
        protected readonly _body: RigidBodyBase | null;
        protected readonly sharedBody: SharedRigidBody | null;
        private _sharedBody;
        constructor();
        __preload(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        /**
         *  @return group ∈ [0, 31] (int)
         */
        getGroup(): number;
        /**
         * @param v ∈ [0, 31] (int)
         */
        setGroup(v: number): void;
        /**
         * @return (int)
         */
        getMask(): number;
        /**
         *  this will reset the mask
         * @param v ∈ [0, 31] (int)
         */
        setMask(v: number): void;
        /**
         * this will add a mask
         * @param v ∈ [0, 31] (int)
         */
        addMask(v: number): void;
        private _refSharedBody;
    }
    class SharedRigidBody {
        private _body;
        private _refCount;
        private _actived;
        private _world;
        private _node;
        private _worldScale;
        private _beforeStepCallback;
        private _afterStepCallback;
        private _onCollidedCallback;
        private _transformInitialized;
        /** 是否只有Collider组件 */
        private _isShapeOnly;
        /** 上一次的缩放 */
        private _prevScale;
        constructor(node: Node, world: PhysicsWorldBase);
        readonly body: RigidBodyBase;
        /** 设置场景与物理之间的同步关系 */
        transfromSource: ETransformSource;
        ref(): void;
        deref(): void;
        enable(): void;
        disable(): void;
        syncPhysWithScene(node: Node): void;
        /**
         * Push the rigidbody's transform information back to node.
         */
        private _syncSceneWithPhys;
        private _activeBody;
        private _deactiveBody;
        private _onCollided;
        private _beforeStep;
        private _afterStep;
    }
}
declare module "cocos/3d/framework/physics/collider-component" {
    import Vec3 from "cocos/core/value-types/vec3";
    import { ShapeBase } from "cocos/3d/physics/api";
    import { PhysicsBasedComponent } from "cocos/3d/framework/physics/detail/physics-based-component";
    export class ColliderComponentBase extends PhysicsBasedComponent {
        protected _shapeBase: ShapeBase;
        private _triggered;
        isTrigger: boolean;
        private _center;
        /**
         * The center of the collider, in local space.
         */
        center: Vec3;
        constructor();
        __preload(): void;
        onLoad(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
    }
    export class BoxColliderComponent extends ColliderComponentBase {
        private _size;
        private _shape;
        constructor();
        __preload(): void;
        /**
         * The size of the box, in local space.
         * @note Shall not specify size with component 0.
         */
        size: Vec3;
    }
    export class SphereColliderComponent extends ColliderComponentBase {
        private _radius;
        private _shape;
        constructor();
        __preload(): void;
        /**
         * The radius of the sphere.
         */
        radius: number;
    }
}
declare module "cocos/3d/framework/physics/default-material" {
    import { PhysicsMaterial } from "cocos/3d/assets/physics/material";
    export const DefaultPhysicsMaterial: PhysicsMaterial;
}
declare module "cocos/3d/framework/physics/rigid-body-component" {
    import { Vec3 } from "cocos/core/value-types/index";
    import { PhysicsMaterial } from "cocos/3d/assets/physics/material";
    import { PhysicsBasedComponent } from "cocos/3d/framework/physics/detail/physics-based-component";
    export class RigidBodyComponent extends PhysicsBasedComponent {
        private _material;
        private _mass;
        private _linearDamping;
        private _angularDamping;
        private _fixedRotation;
        private _triggered;
        private _isKinematic;
        private _useGravity;
        private _velocity;
        constructor();
        __preload(): void;
        onLoad(): void;
        material: PhysicsMaterial | null;
        mass: number;
        isKinematic: boolean;
        useGravity: boolean;
        linearDamping: number;
        angularDamping: number;
        fixedRotation: boolean;
        isTrigger: boolean;
        velocity: Vec3;
        applyForce(force: Vec3, position?: Vec3): void;
        applyImpulse(impulse: Vec3, position?: Vec3): void;
        wakeUp(): void;
        sleep(): void;
        setCollisionFilter(group: number, mask: number): void;
    }
}
declare module "cocos/3d/framework/sphere-light-component" {
    import { LightType } from "cocos/renderer/scene/light";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    import { SphereLight } from "cocos/renderer/scene/sphere-light";
    import { LightComponent } from "cocos/3d/framework/light-component";
    export class SphereLightComponent extends LightComponent {
        protected _size: number;
        protected _luminance: number;
        protected _term: number;
        protected _range: number;
        protected _type: LightType;
        protected _light: SphereLight | null;
        /**
         * 光通量
         */
        luminousPower: number;
        /**
         * 亮度
         */
        luminance: number;
        /**
         * 指定光通量或亮度
         */
        term: number;
        /**
         * @en
         * The light size, used for spot and point light
         * @zh
         * 针对聚光灯和点光源设置光源大小
         */
        size: number;
        /**
         * @en
         * The light range, used for spot and point light
         * @zh
         * 针对聚光灯和点光源设置光源范围
         */
        range: number;
        protected _createLight(scene?: RenderScene): void;
        protected _destroyLight(scene?: RenderScene): void;
    }
}
declare module "cocos/3d/framework/spot-light-component" {
    import { LightType } from "cocos/renderer/scene/light";
    import { RenderScene } from "cocos/renderer/scene/render-scene";
    import { SpotLight } from "cocos/renderer/scene/spot-light";
    import { LightComponent } from "cocos/3d/framework/light-component";
    export class SpotLightComponent extends LightComponent {
        protected _size: number;
        protected _luminance: number;
        protected _term: number;
        protected _range: number;
        protected _spotAngle: number;
        protected _type: LightType;
        protected _light: SpotLight | null;
        /**
         * 光通量
         */
        luminousPower: number;
        /**
         * 亮度
         */
        luminance: number;
        /**
         * 指定光通量或亮度
         */
        term: number;
        /**
         * @en
         * The light size, used for spot and point light
         * @zh
         * 针对聚光灯和点光源设置光源大小
         */
        size: number;
        /**
         * @en
         * The light range, used for spot and point light
         * @zh
         * 针对聚光灯和点光源设置光源范围
         */
        range: number;
        /**
         * @en
         * The spot light cone angle
         * @zh
         * 聚光灯锥角
         */
        spotAngle: number;
        protected _createLight(scene?: RenderScene): void;
        protected _destroyLight(scene?: RenderScene): void;
    }
}
declare module "cocos/3d/framework/physics/physics-system" {
    import { PhysicsWorldBase } from "cocos/3d/physics/api";
    export class PhysicsSystem {
        private _world;
        private _paused;
        private _singleStep;
        private _deltaTime;
        constructor();
        setSingleStep(b: boolean): void;
        resume(): void;
        pause(): void;
        update(deltaTime: number): void;
        readonly world: PhysicsWorldBase;
    }
}
declare module "cocos/3d/framework/physics/index" {
    export * from "cocos/3d/framework/physics/physics-system";
}
declare module "cocos/3d/framework/index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { AudioSourceComponent } from "cocos/3d/framework/audio-source-component";
    import { CameraComponent } from "cocos/3d/framework/camera-component";
    import { LightComponent } from "cocos/3d/framework/light-component";
    import { ModelComponent } from "cocos/3d/framework/model-component";
    import { ParticleSystemComponent } from "cocos/3d/framework/particle/particle-system-component";
    import { BoxColliderComponent, SphereColliderComponent } from "cocos/3d/framework/physics/collider-component";
    import { RigidBodyComponent } from "cocos/3d/framework/physics/rigid-body-component";
    import { RenderableComponent } from "cocos/3d/framework/renderable-component";
    import { SkinningModelComponent } from "cocos/3d/framework/skinning-model-component";
    export * from "cocos/3d/framework/physics/index";
    export { AudioSourceComponent, CameraComponent, LightComponent, ModelComponent, SkinningModelComponent, BoxColliderComponent, ParticleSystemComponent, RigidBodyComponent, SphereColliderComponent, RenderableComponent, };
}
declare module "cocos/components/component-event-handler" {
    import { Node } from "cocos/scene-graph/index";
    /**
     * @zh
     * “EventHandler” 类用来设置场景中的事件回调，该类允许用户设置回调目标节点，目标组件名，组件方法名，并可通过 emit 方法调用目标函数。
     *
     * @example
     * ```ts
     * var eventHandler = new cc.Component.EventHandler();
     * eventHandler.target = newTarget;
     * eventHandler.component = "MainMenu";
     * eventHandler.handler = "OnClick";
     * eventHandler.customEventData = "my data";
     * ```
     */
    export class EventHandler {
        _componentName: any;
        /**
         * @zh
         * 组件事件派发。
         *
         * @param events - 需要派发的组件事件列表。
         * @param args - 派发参数数组。
         */
        static emitEvents(events: EventHandler[], ...args: any[]): void;
        /**
         * @zh
         * 目标节点
         */
        target: Node | null;
        /**
         * @zh
         * 目标组件名
         */
        component: string;
        _componentId: string;
        /**
         * @zh
         * 响应事件函数名
         */
        handler: string;
        /**
         * @zh
         * 自定义事件数据
         */
        customEventData: string;
        /**
         * @zh
         * 触发目标组件上的指定 handler 函数，该参数是回调函数的参数值（可不填）。
         *
         * @param params - 派发参数数组
         * @example
         * ```ts
         * var eventHandler = new cc.Component.EventHandler();
         * eventHandler.target = newTarget;
         * eventHandler.component = "MainMenu";
         * eventHandler.handler = "OnClick"
         * eventHandler.emit(["param1", "param2", ....]);
         * ```
         */
        emit(params: any[]): void;
        private _compName2Id;
        private _compId2Name;
        private _genCompIdIfNeeded;
    }
}
declare module "cocos/components/missing-script" {
    import { Component } from "cocos/components/component";
    class MissingClass {
        _$erialized: null;
    }
    export default class MissingScript extends Component {
        static safeFindClass(id: any, data: any): any;
        static getMissingWrapper(id: any, data: any): typeof MissingClass;
        compiled: boolean;
        _$erialized: null;
        constructor();
        onLoad(): void;
    }
}
declare module "cocos/animation/easing" {
    export function constant(): number;
    export function linear(k: number): number;
    export function quadIn(k: number): number;
    export function quadOut(k: number): number;
    export function quadInOut(k: number): number;
    export function cubicIn(k: number): number;
    export function cubicOut(k: number): number;
    export function cubicInOut(k: number): number;
    export function quartIn(k: number): number;
    export function quartOut(k: number): number;
    export function quartInOut(k: number): number;
    export function quintIn(k: number): number;
    export function quintOut(k: number): number;
    export function quintInOut(k: number): number;
    export function sineIn(k: number): number;
    export function sineOut(k: number): number;
    export function sineInOut(k: number): number;
    export function expoIn(k: number): number;
    export function expoOut(k: number): number;
    export function expoInOut(k: number): number;
    export function circIn(k: number): number;
    export function circOut(k: number): number;
    export function circInOut(k: number): number;
    export function elasticIn(k: number): number;
    export function elasticOut(k: number): number;
    export function elasticInOut(k: number): number;
    export function backIn(k: number): number;
    export function backOut(k: number): number;
    export function backInOut(k: number): number;
    export function bounceIn(k: number): number;
    export function bounceOut(k: number): number;
    export function bounceInOut(k: number): number;
    export function smooth(k: number): number;
    export function fade(k: number): number;
    export const quadOutIn: (k: number) => number;
    export const cubicOutIn: (k: number) => number;
    export const quartOutIn: (k: number) => number;
    export const quintOutIn: (k: number) => number;
    export const sineOutIn: (k: number) => number;
    export const expoOutIn: (k: number) => number;
    export const circOutIn: (k: number) => number;
    export const backOutIn: (k: number) => number;
    export const bounceOutIn: (k: number) => number;
}
declare module "cocos/animation/bezier" {
    export function bezier(C1: number, C2: number, C3: number, C4: number, t: number): number;
    export function bezierByTime(controlPoints: any, x: any): number;
}
declare module "cocos/animation/types" {
    export enum WrapModeMask {
        Loop = 2,
        ShouldWrap = 4,
        PingPong = 22,
        Reverse = 36
    }
    /**
     * !#en Specifies how time is treated when it is outside of the keyframe range of an Animation.
     * !#zh 动画使用的循环模式。
     */
    export enum WrapMode {
        /**
         * !#en Reads the default wrap mode set higher up.
         * !#zh 向 Animation Component 或者 AnimationClip 查找 wrapMode
         */
        Default = 0,
        /**
         * !#en All iterations are played as specified.
         * !#zh 动画只播放一遍
         */
        Normal = 1,
        /**
         * !#en All iterations are played in the reverse direction from the way they are specified.
         * !#zh 从最后一帧或结束位置开始反向播放，到第一帧或开始位置停止
         */
        Reverse = 36,
        /**
         * !#en When time reaches the end of the animation, time will continue at the beginning.
         * !#zh 循环播放
         */
        Loop = 2,
        /**
         * !#en All iterations are played in the reverse direction from the way they are specified.
         * And when time reaches the start of the animation, time will continue at the ending.
         * !#zh 反向循环播放
         */
        LoopReverse = 38,
        /**
         * !#en Even iterations are played as specified, odd iterations are played in the reverse direction from the way they
         * are specified.
         * !#zh 从第一帧播放到最后一帧，然后反向播放回第一帧，到第一帧后再正向播放，如此循环
         */
        PingPong = 22,
        /**
         * !#en Even iterations are played in the reverse direction from the way they are specified, odd iterations are played
         * as specified.
         * !#zh 从最后一帧开始反向播放，其他同 PingPong
         */
        PingPongReverse = 54
    }
    /**
     * For internal
     */
    export class WrappedInfo {
        ratio: number;
        time: number;
        direction: number;
        stopped: boolean;
        iterations: number;
        frameIndex: number;
        constructor(info?: WrappedInfo);
        set(info: WrappedInfo): void;
    }
    export interface ILerpable {
        lerp(to: this, t: number): this;
    }
    export function isLerpable(object: any): object is ILerpable;
}
declare module "cocos/core/data/utils/binary-search" {
    export function binarySearchEpsilon(array: number[], value: number): number;
}
declare module "cocos/animation/animation-blend-state" {
    import { ICurveTarget } from "cocos/animation/animation-curve";
    export type PropertyBlendState<T = any> = {
        name: string;
        weight: number;
        value?: T;
        refCount: number;
    };
    export class AnimationBlendState {
        private _blendTargets;
        refPropertyBlendTarget(target: ICurveTarget, propertyName: string): PropertyBlendState<any>;
        derefPropertyBlendTarget(target: ICurveTarget, propertyName: string): void;
        apply(): void;
        clear(): void;
    }
}
declare module "cocos/animation/blending" {
    import { Quat, Vec3 } from "cocos/core/value-types/index";
    import { PropertyBlendState } from "cocos/animation/animation-blend-state";
    export function additive1D(value: number, weight: number, propertyBlendState: PropertyBlendState<number>): number;
    export function additive3D(value: Vec3, weight: number, propertyBlendState: PropertyBlendState<Vec3>): Vec3;
    export function additiveQuat(value: Quat, weight: number, propertyBlendState: PropertyBlendState<Quat>): Quat;
}
declare module "cocos/animation/animation-curve" {
    import { PropertyBlendState } from "cocos/animation/animation-blend-state";
    import * as easing from "cocos/animation/easing";
    import { MotionPath } from "cocos/animation/motion-path-helper";
    export type CurveValue = any;
    export interface ICurveTarget {
        [x: string]: any;
    }
    export type LerpFunction<T = any> = (from: T, to: T, t: number, dt: number) => T;
    /**
     * If propertyBlendState.weight equals to zero, the propertyBlendState.value is dirty.
     * You shall handle this situation correctly.
     */
    export type BlendFunction<T> = (value: T, weight: number, propertyBlendState: PropertyBlendState) => T;
    export type FrameFinder = (framevalues: number[], value: number) => number;
    export type LinearType = null;
    export type BezierType = [number, number, number, number];
    export type EasingMethodName = keyof (typeof easing);
    export type CurveType = LinearType | BezierType | EasingMethodName;
    export enum AnimationInterpolation {
        Linear = 0,
        Step = 1,
        CubicSpline = 2
    }
    type EasingMethod = EasingMethodName | number[];
    export interface PropertyCurveData {
        keys: number;
        values: CurveValue[];
        easingMethod?: EasingMethod;
        easingMethods?: EasingMethod[];
        motionPaths?: MotionPath | MotionPath[];
        /**
         * When the interpolation is 'AnimationInterpolation.CubicSpline', the values must be array of ICubicSplineValue.
         */
        interpolation?: AnimationInterpolation;
    }
    export class RatioSampler {
        ratios: number[];
        private _lastSampleRatio;
        private _lastSampleResult;
        private _findRatio;
        constructor(ratios: number[]);
        sample(ratio: number): number;
    }
    /**
     * 动画曲线。
     */
    export class AnimCurve {
        static Linear: null;
        static Bezier(controlPoints: number[]): [number, number, number, number];
        /**
         * The values of the keyframes. (y)
         */
        values: CurveValue[];
        /**
         * The keyframe ratio of the keyframe specified as a number between 0.0 and 1.0 inclusive. (x)
         * A null ratio indicates a zero or single frame curve.
         */
        ratioSampler: RatioSampler | null;
        types?: CurveType[];
        type?: CurveType;
        _blendFunction: BlendFunction<any> | undefined;
        /**
         * Lerp function used. If undefined, no lerp is performed.
         */
        private _lerp;
        private _stepfiedValues?;
        private _interpolation;
        constructor(propertyCurveData: PropertyCurveData, propertyName: string, isNode: boolean, ratioSampler: RatioSampler | null);
        /**
         * @param ratio The normalized time specified as a number between 0.0 and 1.0 inclusive.
         */
        sample(ratio: number): any;
        stepfy(stepCount: number): void;
        private _sampleFromOriginal;
    }
    export class EventInfo {
        events: any[];
        /**
         * @param func event function
         * @param params event params
         */
        add(func: string, params: any[]): void;
    }
    /**
     * Compute a new ratio by curve type
     * @param ratio - The origin ratio
     * @param type - If it's Array, then ratio will be computed with bezierByTime.
     * If it's string, then ratio will be computed with cc.easing function
     */
    export function computeRatioByType(ratio: number, type: CurveType): number;
}
declare module "cocos/animation/motion-path-helper" {
    import { Vec2 } from "cocos/core/value-types/index";
    import { AnimCurve } from "cocos/animation/animation-curve";
    export class Curve {
        points: IControlPoint[];
        beziers: Bezier[];
        ratios: number[];
        progresses: number[];
        length: number;
        constructor(points?: IControlPoint[]);
        computeBeziers(): Bezier[];
    }
    export class Bezier {
        start: Vec2;
        end: Vec2;
        /**
         * cp0, cp1
         */
        startCtrlPoint: Vec2;
        /**
         * cp2, cp3
         */
        endCtrlPoint: Vec2;
        __arcLengthDivisions?: number;
        private cacheArcLengths?;
        /**
         * Get point at relative position in curve according to arc length
         * @param u [0 .. 1]
         */
        getPointAt(u: number): Vec2;
        /**
         * Get point at time t.
         * @param t [0 .. 1]
         */
        getPoint(t: number): Vec2;
        /**
         * Get total curve arc length.
         */
        getLength(): number;
        /**
         * Get list of cumulative segment lengths.
         */
        getLengths(divisions?: number): number[];
        getUtoTmapping(u: number, distance?: number): number;
    }
    interface IControlPoint {
        in: Vec2;
        pos: Vec2;
        out: Vec2;
    }
    export type MotionPath = Vec2[];
    export function sampleMotionPaths(motionPaths: Array<(MotionPath | undefined)>, data: AnimCurve, duration: number, fps: number): void;
}
declare module "cocos/animation/animation-clip" {
    import { Asset, SpriteFrame } from "cocos/assets/index";
    import { AnimCurve, PropertyCurveData } from "cocos/animation/animation-curve";
    import { WrapMode as AnimationWrapMode } from "cocos/animation/types";
    interface IAnimationEvent {
        frame: number;
        func: string;
        params: string[];
    }
    interface ICurveData {
        props?: {
            [propertyName: string]: PropertyCurveData;
        };
        comps?: {
            [componentName: string]: {
                [propertyName: string]: PropertyCurveData;
            };
        };
    }
    export interface IPropertyCurve {
        /**
         * 结点路径。
         */
        path: string;
        /**
         * 组件名称。
         */
        component?: string;
        /**
         * 属性名称。
         */
        propertyName: string;
        /**
         * 属性曲线。
         */
        curve: AnimCurve;
    }
    export class AnimationClip extends Asset {
        static WrapMode: typeof AnimationWrapMode;
        /**
         * !#en Duration of this animation.
         * !#zh 动画的持续时间。
         */
        readonly duration: number;
        /**
         * !#en Crate clip with a set of sprite frames
         * !#zh 使用一组序列帧图片来创建动画剪辑
         * @example
         * const clip = cc.AnimationClip.createWithSpriteFrames(spriteFrames, 10);
         *
         */
        static createWithSpriteFrames(spriteFrames: SpriteFrame[], sample: number): AnimationClip | null;
        /**
         * !#en FrameRate of this animation.
         * !#zh 动画的帧速率。
         */
        sample: number;
        /**
         * !#en Speed of this animation.
         * !#zh 动画的播放速度。
         */
        speed: number;
        /**
         * !#en WrapMode of this animation.
         * !#zh 动画的循环模式。
         */
        wrapMode: AnimationWrapMode;
        /**
         * !#en Curve data.
         * !#zh 曲线数据。
         * @example {@link cocos2d/core/animation-clip/curve-data.js}
         */
        curveDatas: {
            [path: string]: ICurveData;
        };
        /**
         * !#en Event data.
         * !#zh 事件数据。
         * @example {@link cocos2d/core/animation-clip/event-data.js}
         * @typescript events: {frame: number, func: string, params: string[]}[]
         */
        events: IAnimationEvent[];
        private _duration;
        private _keys;
        private _ratioSamplers;
        private _propertyCurves?;
        private frameRate;
        private _stepness;
        readonly propertyCurves: ReadonlyArray<IPropertyCurve>;
        stepness: number;
        onLoad(): void;
        private _createPropertyCurves;
        private _createCurve;
        private _applyStepness;
    }
}
declare module "cocos/animation/playable" {
    export class Playable {
        /**
         * !#en Is playing or paused in play mode?
         * !#zh 当前是否正在播放。
         * @default false
         */
        readonly isPlaying: boolean;
        /**
         * !#en Is currently paused? This can be true even if in edit mode(isPlaying == false).
         * !#zh 当前是否正在暂停
         * @default false
         */
        readonly isPaused: boolean;
        private _isPlaying;
        private _isPaused;
        private _stepOnce;
        /**
         * !#en Play this animation.
         * !#zh 播放动画。
         */
        play(): void;
        /**
         * !#en Stop this animation.
         * !#zh 停止动画播放。
         */
        stop(): void;
        /**
         * !#en Pause this animation.
         * !#zh 暂停动画。
         */
        pause(): void;
        /**
         * !#en Resume this animation.
         * !#zh 重新播放动画。
         */
        resume(): void;
        /**
         * !#en Perform a single frame step.
         * !#zh 执行一帧动画。
         */
        step(): void;
        update(deltaTime: number): void;
        protected onPlay(): void;
        protected onPause(): void;
        protected onResume(): void;
        protected onStop(): void;
        protected onError(message: string): void;
    }
}
declare module "cocos/animation/animation-state" {
    import { Node } from "cocos/scene-graph/index";
    import { AnimationBlendState } from "cocos/animation/animation-blend-state";
    import { AnimationClip } from "cocos/animation/animation-clip";
    import { Playable } from "cocos/animation/playable";
    import { WrapMode, WrappedInfo } from "cocos/animation/types";
    /**
     * !#en
     * The AnimationState gives full control over animation playback process.
     * In most cases the Animation Component is sufficient and easier to use. Use the AnimationState if you need full control.
     * !#zh
     * AnimationState 完全控制动画播放过程。<br/>
     * 大多数情况下 动画组件 是足够和易于使用的。如果您需要更多的动画控制接口，请使用 AnimationState。
     *
     */
    export class AnimationState extends Playable {
        /**
         * !#en The clip that is being played by this animation state.
         * !#zh 此动画状态正在播放的剪辑。
         */
        readonly clip: AnimationClip;
        /**
         * !#en The name of the playing animation.
         * !#zh 动画的名字
         */
        readonly name: string;
        readonly length: number;
        /**
         * !#en
         * Wrapping mode of the playing animation.
         * Notice : dynamic change wrapMode will reset time and repeatCount property
         * !#zh
         * 动画循环方式。
         * 需要注意的是，动态修改 wrapMode 时，会重置 time 以及 repeatCount
         * @default: WrapMode.Normal
         */
        wrapMode: WrapMode;
        /**
         * !#en The animation's iteration count property.
         *
         * A real number greater than or equal to zero (including positive infinity) representing the number of times
         * to repeat the animation node.
         *
         * Values less than zero and NaN values are treated as the value 1.0 for the purpose of timing model
         * calculations.
         *
         * !#zh 迭代次数，指动画播放多少次后结束, normalize time。 如 2.5（2次半）
         *
         * @property repeatCount
         * @type {Number}
         * @default 1
         */
        repeatCount: number;
        /**
         * !#en The start delay which represents the number of seconds from an animation's start time to the start of
         * the active interval.
         * !#zh 延迟多少秒播放。
         * @default 0
         */
        delay: number;
        /**
         * !#en The curves list.
         * !#zh 曲线列表。
         */
        /**
         * !#en The iteration duration of this animation in seconds. (length)
         * !#zh 单次动画的持续时间，秒。
         * @readOnly
         */
        duration: number;
        /**
         * !#en The animation's playback speed. 1 is normal playback speed.
         * !#zh 播放速率。
         * @default: 1.0
         */
        speed: number;
        /**
         * !#en The current time of this animation in seconds.
         * !#zh 动画当前的时间，秒。
         * @default 0
         */
        time: number;
        /**
         * The weight.
         */
        weight: number;
        frameRate: number;
        _lastframeEventOn: boolean;
        private _wrapMode;
        private _repeatCount;
        /**
         * Mark whether the current frame is played.
         * When set new time to animation state, we should ensure the frame at the specified time being played at next update.
         */
        private _currentFramePlayed;
        private _delay;
        private _delayTime;
        private _wrappedInfo;
        private _lastWrappedInfo;
        private _process;
        private _target;
        private _clip;
        private _name;
        private _lastIterations?;
        private _curveInstances;
        constructor(clip: AnimationClip, name?: string);
        initialize(root: Node): void;
        _emit(type: any, state: any): void;
        emit(...restargs: any[]): void;
        on(type: any, callback: any, target: any): void | null;
        once(type: any, callback: any, target: any): void | null;
        off(type: any, callback: any, target: any): void;
        _setEventTarget(target: any): void;
        setTime(time: number): void;
        update(delta: number): void;
        _needReverse(currentIterations: number): boolean;
        getWrappedInfo(time: number, info?: WrappedInfo): WrappedInfo;
        sample(): WrappedInfo;
        process(): void;
        simpleProcess(): void;
        attachToBlendState(blendState: AnimationBlendState): void;
        detachFromBlendState(blendState: AnimationBlendState): void;
        cache(frames: number): void;
        protected onPlay(): void;
        protected onStop(): void;
        protected onResume(): void;
        protected onPause(): void;
        private _sampleCurves;
        private _sampleEvents;
    }
}
declare module "cocos/animation/cross-fade" {
    import { Node } from "cocos/scene-graph/index";
    import { AnimationState } from "cocos/animation/animation-state";
    import { Playable } from "cocos/animation/playable";
    export class CrossFade extends Playable {
        target: Node;
        private _fadings;
        constructor(target: Node);
        update(deltaTime: number): void;
        crossFade(state: AnimationState | null, duration: number): void;
        sample(): void;
        onPause(): void;
        onResume(): void;
        onStop(): void;
        clear(): void;
        private _unshiftDefault;
        private _directStopState;
        private _directPlayState;
    }
}
declare module "cocos/animation/animation-manager" {
    import { Node } from "cocos/scene-graph/index";
    import { AnimationBlendState } from "cocos/animation/animation-blend-state";
    import { AnimationState } from "cocos/animation/animation-state";
    import { CrossFade } from "cocos/animation/cross-fade";
    export class AnimationManager {
        private _anims;
        private _delayEvents;
        private _blendState;
        private _crossFades;
        constructor();
        readonly blendState: AnimationBlendState;
        addCrossFade(crossFade: CrossFade): void;
        removeCrossFade(crossFade: CrossFade): void;
        update(dt: number): void;
        destruct(): void;
        addAnimation(anim: AnimationState): void;
        removeAnimation(anim: AnimationState): void;
        pushDelayEvent(target: Node, func: string, args: any[]): void;
    }
}
declare module "cocos/animation/index" {
    import * as easing from "cocos/animation/easing";
    export * from "cocos/animation/bezier";
    export { easing };
    export * from "cocos/animation/types";
    export * from "cocos/animation/motion-path-helper";
    export * from "cocos/animation/animation-curve";
    export * from "cocos/animation/animation-clip";
    export * from "cocos/animation/animation-manager";
    export * from "cocos/animation/animation-state";
}
declare module "cocos/components/animation-component" {
    import { AnimationClip, AnimationState } from "cocos/animation/index";
    import { Component } from "cocos/components/component";
    import { IEventTarget } from "cocos/core/event/event-target-factory";
    import { ICallbackTable } from "cocos/core/event/callbacks-invoker";
    /**
     * !#en The event type supported by Animation
     * !#zh Animation 支持的事件类型
     */
    export enum EventType {
        /**
         * !#en Emit when begin playing animation
         * !#zh 开始播放时触发
         */
        PLAY = "play",
        /**
         * !#en Emit when stop playing animation
         * !#zh 停止播放时触发
         */
        STOP = "stop",
        /**
         * !#en Emit when pause animation
         * !#zh 暂停播放时触发
         */
        PAUSE = "pause",
        /**
         * !#en Emit when resume animation
         * !#zh 恢复播放时触发
         */
        RESUME = "resume",
        /**
         * !#en If animation repeat count is larger than 1, emit when animation play to the last frame
         * !#zh 假如动画循环次数大于 1，当动画播放到最后一帧时触发
         */
        LASTFRAME = "lastframe",
        /**
         * !#en Emit when finish playing animation
         * !#zh 动画播放完成时触发
         */
        FINISHED = "finished"
    }
    /**
     * !#en The animation component is used to play back animations.
     *
     * Animation provide several events to register：
     *  - play : Emit when begin playing animation
     *  - stop : Emit when stop playing animation
     *  - pause : Emit when pause animation
     *  - resume : Emit when resume animation
     *  - lastframe : If animation repeat count is larger than 1, emit when animation play to the last frame
     *  - finished : Emit when finish playing animation
     *
     * !#zh Animation 组件用于播放动画。
     *
     * Animation 提供了一系列可注册的事件：
     *  - play : 开始播放时
     *  - stop : 停止播放时
     *  - pause : 暂停播放时
     *  - resume : 恢复播放时
     *  - lastframe : 假如动画循环次数大于 1，当动画播放到最后一帧时
     *  - finished : 动画播放完成时
     */
    export class AnimationComponent extends Component implements IEventTarget {
        _callbackTable: ICallbackTable;
        /**
         * !#en Animation will play the default clip when start game.
         * !#zh 在勾选自动播放或调用 play() 时默认播放的动画剪辑。
         */
        defaultClip: AnimationClip | null;
        /**
         * !#en Current played clip.
         * !#zh 当前播放的动画剪辑。
         */
        currentClip: AnimationClip | null;
        /**
         * Get or (re)set all the clips can be used in this animation.
         * Once clips are (re)set, old animation states will be stoped.
         * You shall no longer operate on them.
         */
        clips: (AnimationClip | null)[];
        static EventType: typeof EventType;
        /**
         * !#en Whether the animation should auto play the default clip when start game.
         * !#zh 是否在运行游戏后自动播放默认动画剪辑。
         */
        playOnLoad: boolean;
        private _crossFade;
        private _nameToState;
        private _didInit;
        private _currentClip;
        /**
         * !#en All the clips used in this animation.
         * !#zh 通过脚本可以访问并播放的 AnimationClip 列表。
         */
        private _clips;
        private _defaultClip;
        constructor();
        start(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        /**
         * !#en Plays an animation and stop other animations.
         * !#zh 播放指定的动画，并且停止当前正在播放动画。如果没有指定动画，则播放默认动画。
         * @param [name] - The name of animation to play. If no name is supplied then the default animation will be played.
         * @param [startTime] - play an animation from startTime
         * @return The AnimationState of playing animation. In cases where the animation can't be played
         * (ie, there is no default animation or no animation with the specified name), the function will return null.
         * @example
         * var animCtrl = this.node.getComponent(cc.Animation);
         * animCtrl.play("linear");
         */
        play(name?: string, startTime?: number): AnimationState;
        crossFade(name?: string, duration?: number): AnimationState;
        /**
         * !#en Returns the animation state named name. If no animation with the specified name, the function will return null.
         * !#zh 获取当前或者指定的动画状态，如果未找到指定动画剪辑则返回 null。
         */
        getAnimationState(name: string): AnimationState;
        /**
         * !#en Adds a clip to the animation with name newName. If a clip with that name already exists it will be replaced with the new clip.
         * !#zh 添加动画剪辑，并且可以重新设置该动画剪辑的名称。
         * @param clip the clip to add
         * @return The AnimationState which gives full control over the animation clip.
         */
        addClip(clip: AnimationClip, newName?: string): AnimationState | undefined;
        /**
         * !#en
         * Remove clip from the animation list. This will remove the clip and any animation states based on it.
         * If there are animation states depand on the clip are playing or clip is defaultClip, it will not delete the clip.
         * But if force is true, then will always remove the clip and any animation states based on it. If clip is defaultClip, defaultClip will be reset to null
         * !#zh
         * 从动画列表中移除指定的动画剪辑，<br/>
         * 如果依赖于 clip 的 AnimationState 正在播放或者 clip 是 defaultClip 的话，默认是不会删除 clip 的。
         * 但是如果 force 参数为 true，则会强制停止该动画，然后移除该动画剪辑和相关的动画。这时候如果 clip 是 defaultClip，defaultClip 将会被重置为 null。
         * @param {Boolean} [force=false] - If force is true, then will always remove the clip and any animation states based on it.
         */
        removeClip(clip: AnimationClip, force?: boolean): void;
        /**
         * !#en
         * Register animation event callback.
         * The event arguments will provide the AnimationState which emit the event.
         * When play an animation, will auto register the event callback to the AnimationState,
         * and unregister the event callback from the AnimationState when animation stopped.
         * !#zh
         * 注册动画事件回调。
         * 回调的事件里将会附上发送事件的 AnimationState。
         * 当播放一个动画时，会自动将事件注册到对应的 AnimationState 上，停止播放时会将事件从这个 AnimationState 上取消注册。
         * @param type - A string representing the event type to listen for.
         * @param callback - The callback that will be invoked when the event is dispatched.
         *                              The callback is ignored if it is a duplicate (the callbacks are unique).
         * @param [target] - The target (this object) to invoke the callback, can be null
         * @return Just returns the incoming callback so you can save the anonymous function easier.
         * @typescript
         * on(type: string, callback: (event: Event.EventCustom) => void, target?: any, useCapture?: boolean): (event: Event.EventCustom) => void
         * on<T>(type: string, callback: (event: T) => void, target?: any, useCapture?: boolean): (event: T) => void
         * @example
         * onPlay: function (type, state) {
         *     // callback
         * }
         *
         * // register event to all animation
         * animation.on('play', this.onPlay, this);
         */
        on(type: string, callback: (state: AnimationState) => void, target?: Object): Function | undefined;
        /**
         * !#en
         * Unregister animation event callback.
         * !#zh
         * 取消注册动画事件回调。
         * @method off
         * @param {String} type - A string representing the event type being removed.
         * @param {Function} [callback] - The callback to remove.
         * @param {Object} [target] - The target (this object) to invoke the callback, if it's not given, only callback without target will be removed
         * @example
         * // unregister event to all animation
         * animation.off('play', this.onPlay, this);
         */
        off(type: string, callback: Function, target?: Object): void;
        /**
         * IEventTarget implementations, they will be overwrote with the same implementation in EventTarget by applyMixins
         */
        targetOff(keyOrTarget?: string | Object | undefined): void;
        once(type: string, callback: Function, target?: Object | undefined): Function | undefined;
        dispatchEvent(event: import("cocos/core/index").Event): void;
        hasEventListener(key: string, callback?: Function | undefined, target?: Object | undefined): boolean;
        removeAll(keyOrTarget?: string | Object | undefined): void;
        emit(key: string, ...args: any[]): void;
        private _init;
        private _startCrossFade;
        private _createStates;
        private _createState;
    }
}
declare module "cocos/components/index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export { Component } from "cocos/components/component";
    export { EventHandler } from "cocos/components/component-event-handler";
    export { default as MissingScript } from "cocos/components/missing-script";
    export { AnimationComponent } from "cocos/components/animation-component";
}
declare module "cocos/3d/ui/components/ui-transfrom-component" {
    import { Component } from "cocos/components/index";
    import { EventType } from "cocos/core/platform/event-manager/event-enum";
    import { EventListener } from "cocos/core/platform/event-manager/event-listener";
    import { Mat4, Rect, Size, Vec2, Vec3 } from "cocos/core/value-types/index";
    export class UITransformComponent extends Component {
        /**
         * @zh
         * 内容尺寸
         */
        contentSize: Size;
        width: number;
        height: number;
        /**
         * @zh
         * 锚点位置
         */
        anchorPoint: Vec2;
        anchorX: number;
        anchorY: number;
        static EventType: typeof EventType;
        _contentSize: Size;
        _anchorPoint: Vec2;
        __preload(): void;
        onDestroy(): void;
        /**
         * @zh
         * 设置节点原始大小，不受该节点是否被缩放或者旋转的影响。
         *
         * @typeparam size - 节点内容变换的尺寸或者宽度.
         * @param height - 节点内容未变换的高度.
         * @example
         * node.setContentSize(cc.size(100, 100));
         * node.setContentSize(100, 100);
         */
        setContentSize(size: Size | number, height?: number): void;
        /**
         * @zh
         * 设置锚点的百分比。
         * 锚点应用于所有变换和坐标点的操作，它就像在节点上连接其父节点的大头针。
         * 锚点是标准化的，就像百分比一样。(0，0) 表示左下角，(1，1) 表示右上角。
         * 但是你可以使用比（1，1）更高的值或者比（0，0）更低的值。
         * 默认的锚点是（0.5，0.5），因此它开始于节点的中心位置。
         * 注意：Creator 中的锚点仅用于定位所在的节点，子节点的定位不受影响。
         *
         * @typeparam point - 节点锚点或节点 x 轴锚.
         * @param y - 节点 y 轴锚
         * @example
         * node.setAnchorPoint(cc.v2(1, 1));
         * node.setAnchorPoint(1, 1);
         */
        setAnchorPoint(point: Vec2 | number, y?: number): void;
        /**
         * @zh
         * 当前节点的点击计算
         *
         * @typeparam point - 屏幕点
         * @typeparam listener - 事件监听器
         */
        isHit(point: Vec2, listener?: EventListener): any;
        /**
         * @zh
         * 将一个 UI 节点世界坐标系下点转换到另一个 UI 节点 (局部) 空间坐标系，这个坐标系以锚点为原点。
         * 非 UI 节点转换到 UI 节点(局部) 空间坐标系，请走 cc.pipelineUtils.ConvertWorldToUISpaceAR
         *
         * @typeparam worldPoint - 世界坐标点
         * @typeparam out - 转换后坐标
         * @return
         * @example
         * var newVec2 = node.convertToNodeSpaceAR(cc.v2(100, 100));
         */
        convertToNodeSpaceAR(worldPoint: Vec3, out?: Vec3): Vec3;
        /**
         * @zh
         * 将当前节点坐标系下的一个点转换到世界坐标系。
         *
         * @param nodePoint - 节点坐标
         * @param out - 转换后坐标
         * @return
         * @example
         * var newVec2 = node.convertToWorldSpaceAR(cc.v2(100, 100));
         */
        convertToWorldSpaceAR(nodePoint: Vec3, out?: Vec3): Vec3;
        /**
         * @zh
         * 返回父节坐标系下的轴向对齐的包围盒。
         *
         * @return - 节点大小的包围盒
         * @example
         * var boundingBox = node.getBoundingBox();
         */
        getBoundingBox(): Rect;
        /**
         * @zh
         * 返回节点在世界坐标系下的对齐轴向的包围盒（AABB）。
         * 该边框包含自身和已激活的子节点的世界边框。
         *
         * @return
         * @example
         * var newRect = node.getBoundingBoxToWorld();
         */
        getBoundingBoxToWorld(): Rect;
        /**
         * @zh
         * 返回包含当前包围盒及其子节点包围盒的最小包围盒
         *
         * @param parentMat
         * @return
         */
        getBoundingBoxTo(parentMat: Mat4): Rect;
        private _getVisibility;
    }
}
declare module "cocos/3d/ui/components/canvas-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component } from "cocos/components/index";
    import { Size } from "cocos/core/value-types/index";
    import { Camera } from "cocos/renderer/index";
    /**
     * @zh
     * 作为 UI 根节点，为所有子节点提供视窗四边的位置信息以供对齐，另外提供屏幕适配策略接口，方便从编辑器设置。
     * 注：由于本节点的尺寸会跟随屏幕拉伸，所以 anchorPoint 只支持 (0.5, 0.5)，否则适配不同屏幕时坐标会有偏差。
     */
    export class CanvasComponent extends Component {
        /**
         * @zh
         * 设计分辨率
         *
         * @param value - 设计分辨率尺寸。
         */
        designResolution: Size;
        /**
         * @zh
         * 是否优先将设计分辨率高度撑满视图高度。
         *
         * @param value - 是否撑满高度。
         */
        fitHeight: boolean;
        /**
         * @zh
         * 是否优先将设计分辨率宽度撑满视图宽度。
         *
         * @param value - 是否撑满宽度。
         */
        fitWidth: boolean;
        /**
         * @zh
         * 渲染优先级。
         *
         * @param value - 渲染优先级。
         */
        priority: number;
        readonly visibility: number;
        readonly camera: Camera | null;
        /**
         * @zh
         * 当前激活的画布组件，场景同一时间只能有一个激活的画布。
         */
        static instance: CanvasComponent | null;
        static views: never[];
        protected _designResolution: any;
        protected _fitWidth: boolean;
        protected _fitHeight: boolean;
        protected _priority: number;
        protected _thisOnResized: () => void;
        protected _camera: Camera | null;
        private _pos;
        constructor();
        __preload(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        /**
         * @zh
         * 屏幕对齐。
         */
        alignWithScreen(): void;
        /**
         * @zh
         * 应用适配策略。
         */
        applySettings(): void;
    }
}
declare module "cocos/3d/ui/components/debug-canvas-component" {
    import { CanvasComponent } from "cocos/3d/ui/components/canvas-component";
    /**
     * @zh
     * 性能显示面板类
     */
    export class DebugCanvasComponent extends CanvasComponent {
        constructor();
        __preload(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        alignWithScreen(): void;
        applySettings(): void;
    }
}
declare module "cocos/3d/ui/components/ui-component" {
    import { Component } from "cocos/components/index";
    import { UI } from "cocos/renderer/ui/ui";
    /**
     * @zh
     * UI 及 UI 模型渲染基类
     */
    export class UIComponent extends Component {
        /**
         * @zh
         * 渲染先后顺序，按照广度渲染排列，同级节点下进行一次排列。
         */
        priority: number;
        /**
         * @zh
         * 查找被渲染相机。
         */
        readonly visibility: number;
        protected _priority: number;
        protected _visibility: number;
        updateAssembler(render: UI): void;
        postUpdateAssembler(render: UI): void;
    }
}
declare module "cocos/core/platform/CCVisibleRect" {
    import { Rect } from "cocos/core/value-types/index";
    /****************************************************************************
     Copyright (c) 2011-2012 cocos2d-x.org
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    /**
     * cc.visibleRect is a singleton object which defines the actual visible rect of the current view,
     * it should represent the same rect as cc.view.getViewportRect()
     */
    const visibleRect: {
        /**
         * Top left coordinate of the screen related to the game scene.
         */
        topLeft: any;
        /**
         * Top right coordinate of the screen related to the game scene.
         */
        topRight: any;
        /**
         * Top center coordinate of the screen related to the game scene.
         */
        top: any;
        /**
         * Bottom left coordinate of the screen related to the game scene.
         */
        bottomLeft: any;
        /**
         * Bottom right coordinate of the screen related to the game scene.
         */
        bottomRight: any;
        /**
         * Bottom center coordinate of the screen related to the game scene.
         */
        bottom: any;
        /**
         * Center coordinate of the screen related to the game scene.
         */
        center: any;
        /**
         * Left center coordinate of the screen related to the game scene.
         */
        left: any;
        /**
         * Right center coordinate of the screen related to the game scene.
         */
        right: any;
        /**
         * Width of the screen.
         */
        width: number;
        /**
         * Height of the screen.
         */
        height: number;
        /**
         * initialize
         */
        init(visibleRect_: Rect): void;
    };
    export default visibleRect;
}
declare module "cocos/core/game" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { EventTarget } from "cocos/core/event/event-target";
    /**
     * @module cc
     */
    /**
     * @en An object to boot the game.
     * @zh 包含游戏主体信息并负责驱动游戏的游戏对象。
     * @class game
     * @static
     * @extends EventTarget
     */
    class Game extends EventTarget {
        /**
         * @en Event triggered when game hide to background.<br>
         * Please note that this event is not 100% guaranteed to be fired on Web platform,<br>
         * on native platforms, it corresponds to enter background event, os status bar or notification center may not trigger this event.
         * @zh 游戏进入后台时触发的事件。<br>
         * 请注意，在 WEB 平台，这个事件不一定会 100% 触发，这完全取决于浏览器的回调行为。<br>
         * 在原生平台，它对应的是应用被切换到后台事件，下拉菜单和上拉状态栏等不一定会触发这个事件，这取决于系统行为。
         * @property EVENT_HIDE
         * @example
         * cc.game.on(Game.EVENT_HIDE, function () {
         *     cc.audioEngine.pauseMusic();
         *     cc.audioEngine.pauseAllEffects();
         * });
         */
        static EVENT_HIDE: string;
        /**
         * @en Event triggered when game back to foreground<br>
         * Please note that this event is not 100% guaranteed to be fired on Web platform,<br>
         * on native platforms, it corresponds to enter foreground event.
         * @zh 游戏进入前台运行时触发的事件。<br>
         * 请注意，在 WEB 平台，这个事件不一定会 100% 触发，这完全取决于浏览器的回调行为。<br>
         * 在原生平台，它对应的是应用被切换到前台事件。
         * @property EVENT_SHOW
         * @constant
         */
        static EVENT_SHOW: string;
        /**
         * @en Event triggered after game inited, at this point all engine objects and game scripts are loaded
         * @zh 游戏启动后的触发事件，此时加载所有的引擎对象和游戏脚本。
         * @property EVENT_GAME_INITED
         * @constant
         */
        static EVENT_GAME_INITED: string;
        /**
         * @en Event triggered after engine inited, at this point you will be able to use all engine classes.<br>
         * It was defined as EVENT_RENDERER_INITED in cocos creator v1.x and renamed in v2.0
         * @zh 在引擎初始化之后触发的事件，此时您能够使用引擎所有的类。<br>
         * 它在 cocos creator v1.x 版本中名字为 EVENT_RENDERER_INITED ,在 v2.0 版本中更名为 EVENT_ENGINE_INITED
         * @property EVENT_ENGINE_INITED
         * @constant
         */
        static EVENT_ENGINE_INITED: string;
        static EVENT_RENDERER_INITED: string;
        /**
         * @en Web Canvas 2d API as renderer backend.
         * @zh 使用 Web Canvas 2d API 作为渲染器后端。
         * @property RENDER_TYPE_CANVAS
         * @constant
         */
        static RENDER_TYPE_CANVAS: number;
        /**
         * @en WebGL API as renderer backend.
         * @zh 使用 WebGL API 作为渲染器后端。
         * @property RENDER_TYPE_WEBGL
         * @constant
         */
        static RENDER_TYPE_WEBGL: number;
        /**
         * @en OpenGL API as renderer backend.
         * @zh 使用 OpenGL API 作为渲染器后端。
         * @property RENDER_TYPE_OPENGL
         * @constant
         */
        static RENDER_TYPE_OPENGL: number;
        /**
         * @en The outer frame of the game canvas; parent of game container.
         * @zh 游戏画布的外框，container 的父容器。
         * @property frame
         */
        frame: Object | null;
        /**
         * @en The container of game canvas.
         * @zh 游戏画布的容器。
         * @property container
         */
        container: HTMLDivElement | null;
        /**
         * @en The canvas of the game.
         * @zh 游戏的画布。
         * @property canvas
         */
        canvas: HTMLElement | HTMLCanvasElement | null;
        /**
         * @en The renderer backend of the game.
         * @zh 游戏的渲染器类型。
         * @property renderType
         */
        renderType: number;
        eventTargetOn: (type: string, callback: Function, target?: Object | undefined) => Function | undefined;
        eventTargetOnce: (type: string, callback: Function, target?: Object | undefined) => Function | undefined;
        /**
         * @en
         * The current game configuration, including:<br/>
         * 1. debugMode<br/>
         *      "debugMode" possible values :<br/>
         *      0 - No message will be printed.                                                      <br/>
         *      1 - cc.error, cc.assert, cc.warn, cc.log will print in console.                      <br/>
         *      2 - cc.error, cc.assert, cc.warn will print in console.                              <br/>
         *      3 - cc.error, cc.assert will print in console.                                       <br/>
         *      4 - cc.error, cc.assert, cc.warn, cc.log will print on canvas, available only on web.<br/>
         *      5 - cc.error, cc.assert, cc.warn will print on canvas, available only on web.        <br/>
         *      6 - cc.error, cc.assert will print on canvas, available only on web.                 <br/>
         * 2. showFPS<br/>
         *      Left bottom corner fps information will show when "showFPS" equals true, otherwise it will be hide.<br/>
         * 3. exposeClassName<br/>
         *      Expose class name to chrome debug tools, the class intantiate performance is a little bit slower when exposed.<br/>
         * 4. frameRate<br/>
         *      "frameRate" set the wanted frame rate for your game, but the real fps depends on your game implementation and the running environment.<br/>
         * 5. id<br/>
         *      "gameCanvas" sets the id of your canvas element on the web page, it's useful only on web.<br/>
         * 6. renderMode<br/>
         *      "renderMode" sets the renderer type, only useful on web :<br/>
         *      0 - Automatically chosen by engine<br/>
         *      1 - Forced to use canvas renderer<br/>
         *      2 - Forced to use WebGL renderer, but this will be ignored on mobile browsers<br/>
         * 7. scenes<br/>
         *      "scenes" include available scenes in the current bundle.<br/>
         * <br/>
         * Please DO NOT modify this object directly, it won't have any effect.<br/>
         * @zh
         * 当前的游戏配置，包括：                                                                  <br/>
         * 1. debugMode（debug 模式，但是在浏览器中这个选项会被忽略）                                <br/>
         *      "debugMode" 各种设置选项的意义。                                                   <br/>
         *          0 - 没有消息被打印出来。
         *          1 - cc.error，cc.assert，cc.warn，cc.log 将打印在 console 中。
         *          2 - cc.error，cc.assert，cc.warn 将打印在 console 中。
         *          3 - cc.error，cc.assert 将打印在 console 中。
         *          4 - cc.error，cc.assert，cc.warn，cc.log 将打印在 canvas 中（仅适用于 web 端）。
         *          5 - cc.error，cc.assert，cc.warn 将打印在 canvas 中（仅适用于 web 端）。
         *          6 - cc.error，cc.assert 将打印在 canvas 中（仅适用于 web 端）。
         * 2. showFPS（显示 FPS）                                                            <br/>
         *      当 showFPS 为 true 的时候界面的左下角将显示 fps 的信息，否则被隐藏。              <br/>
         * 3. exposeClassName                                                           <br/>
         *      暴露类名让 Chrome DevTools 可以识别，如果开启会稍稍降低类的创建过程的性能，但对对象构造没有影响。 <br/>
         * 4. frameRate (帧率)                                                              <br/>
         *      “frameRate” 设置想要的帧率你的游戏，但真正的FPS取决于你的游戏实现和运行环境。      <br/>
         * 5. id                                                                            <br/>
         *      "gameCanvas" Web 页面上的 Canvas Element ID，仅适用于 web 端。                         <br/>
         * 6. renderMode（渲染模式）                                                         <br/>
         *      “renderMode” 设置渲染器类型，仅适用于 web 端：                              <br/>
         *          0 - 通过引擎自动选择。
         *          1 - 强制使用 canvas 渲染。
         *          2 - 强制使用 WebGL 渲染，但是在部分 Android 浏览器中这个选项会被忽略。
         * 7. scenes                                                                         <br/>
         *      “scenes” 当前包中可用场景。                                                   <br/>
         * <br/>
         * 注意：请不要直接修改这个对象，它不会有任何效果。
         * @property config
         */
        config: any;
        /**
         * @en Callback when the scripts of engine have been load.
         * @zh 当引擎完成启动后的回调函数。
         * @method onStart
         */
        onStart: Function | null;
        private _persistRootNodes;
        private _paused;
        private _configLoaded;
        private _isCloning;
        private _prepared;
        private _rendererInitialized;
        private _gfxDevice;
        private _intervalId;
        private _lastTime;
        private _frameTime;
        private _sceneInfos;
        private collisionMatrix;
        private groupList;
        /**
         * @en Set frame rate of game.
         * @zh 设置游戏帧率。
         * @method setFrameRate
         * @param {Number} frameRate
         */
        setFrameRate(frameRate: number): void;
        /**
         * @en Get frame rate set for the game, it doesn't represent the real frame rate.
         * @zh 获取设置的游戏帧率（不等同于实际帧率）。
         * @method getFrameRate
         * @return {Number} frame rate
         */
        getFrameRate(): number;
        /**
         * @en Run the game frame by frame.
         * @zh 执行一帧游戏循环。
         * @method step
         */
        step(): void;
        /**
         * @en Pause the game main loop. This will pause:<br>
         * game logic execution, rendering process, event manager, background music and all audio effects.<br>
         * This is different with cc.director.pause which only pause the game logic execution.<br>
         * @zh 暂停游戏主循环。包含：游戏逻辑，渲染，事件处理，背景音乐和所有音效。这点和只暂停游戏逻辑的 cc.director.pause 不同。
         * @method pause
         */
        pause(): void;
        /**
         * @en Resume the game from pause. This will resume:<br>
         * game logic execution, rendering process, event manager, background music and all audio effects.<br>
         * @zh 恢复游戏主循环。包含：游戏逻辑，渲染，事件处理，背景音乐和所有音效。
         * @method resume
         */
        resume(): void;
        /**
         * @en Check whether the game is paused.
         * @zh 判断游戏是否暂停。
         * @method isPaused
         * @return {Boolean}
         */
        isPaused(): boolean;
        /**
         * @en Restart game.
         * @zh 重新开始游戏
         * @method restart
         */
        restart(): void;
        /**
         * @en End game, it will close the game window
         * @zh 退出游戏
         * @method end
         */
        end(): void;
        /**
         * @en
         * Register an callback of a specific event type on the game object.<br>
         * This type of event should be triggered via `emit`.<br>
         * @zh
         * 注册 game 的特定事件类型回调。这种类型的事件应该被 `emit` 触发。<br>
         *
         * @method on
         * @param {String} type - A string representing the event type to listen for.
         * @param {Function} callback - The callback that will be invoked when the event is dispatched.<br>
         *                              The callback is ignored if it is a duplicate (the callbacks are unique).
         * @param {any} [callback.arg1] arg1
         * @param {any} [callback.arg2] arg2
         * @param {any} [callback.arg3] arg3
         * @param {any} [callback.arg4] arg4
         * @param {any} [callback.arg5] arg5
         * @param {Object} [target] - The target (this object) to invoke the callback, can be null
         * @return {Function} - Just returns the incoming callback so you can save the anonymous function easier.
         * @typescript
         * on<T extends Function>(type: string, callback: T, target?: any, useCapture?: boolean): T
         */
        on(type: string, callback: Function, target?: object): any;
        /**
         * @en
         * Register an callback of a specific event type on the game object,<br>
         * the callback will remove itself after the first time it is triggered.<br>
         * @zh
         * 注册 game 的特定事件类型回调，回调会在第一时间被触发后删除自身。
         *
         * @method once
         * @param {String} type - A string representing the event type to listen for.
         * @param {Function} callback - The callback that will be invoked when the event is dispatched.<br>
         *                              The callback is ignored if it is a duplicate (the callbacks are unique).
         * @param {any} [callback.arg1] arg1
         * @param {any} [callback.arg2] arg2
         * @param {any} [callback.arg3] arg3
         * @param {any} [callback.arg4] arg4
         * @param {any} [callback.arg5] arg5
         * @param {Object} [target] - The target (this object) to invoke the callback, can be null
         */
        once(type: string, callback: Function, target: object): void;
        /**
         * @en Run game with configuration object and onStart function.
         * @zh 运行游戏，并且指定引擎配置和 onStart 的回调。
         * @method run
         * @param {Object} config - Pass configuration object or onStart function
         * @param {Function} onStart - function to be executed after game initialized
         */
        run(config: any, onStart: Function | null): void;
        /**
         * @en
         * Add a persistent root node to the game, the persistent node won't be destroyed during scene transition.<br>
         * The target node must be placed in the root level of hierarchy, otherwise this API won't have any effect.
         * @zh
         * 声明常驻根节点，该节点不会被在场景切换中被销毁。<br>
         * 目标节点必须位于为层级的根节点，否则无效。
         * @method addPersistRootNode
         * @param {Node} node - The node to be made persistent
         */
        addPersistRootNode(node: {
            uuid: any;
            parent: any;
            _persistNode: boolean;
        }): void;
        /**
         * @en Remove a persistent root node.
         * @zh 取消常驻根节点。
         * @method removePersistRootNode
         * @param {Node} node - The node to be removed from persistent node list
         */
        removePersistRootNode(node: {
            uuid: string;
            _persistNode: boolean;
        }): void;
        /**
         * @en Check whether the node is a persistent root node.
         * @zh 检查节点是否是常驻根节点。
         * @method isPersistRootNode
         * @param {Node} node - The node to be checked
         * @return {Boolean}
         */
        isPersistRootNode(node: {
            _persistNode: any;
        }): any;
        /**
         * @en Prepare game.
         * @zh 准备引擎，请不要直接调用这个函数。
         * @param {Function} cb
         * @method prepare
         */
        protected prepare(cb: () => void): void;
        private _initEngine;
        private _prepareFinished;
        private _setAnimFrame;
        private _stTime;
        private _ctTime;
        private _runMainLoop;
        private _initConfig;
        private _determineRenderType;
        private _initRenderer;
        private _initEvents;
    }
    export default Game;
}
declare module "cocos/core/platform/CCView" {
    /****************************************************************************
     Copyright (c) 2008-2010 Ricardo Quesada
     Copyright (c) 2011-2012 cocos2d-x.org
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import "cocos/core/data/class";
    import { EventTarget } from "cocos/core/event/event-target";
    import Rect from "cocos/core/value-types/rect";
    /**
     * cc.view is the singleton object which represents the game window.<br/>
     * It's main task include: <br/>
     *  - Apply the design resolution policy<br/>
     *  - Provide interaction with the window, like resize event on web, retina display support, etc...<br/>
     *  - Manage the game view port which can be different with the window<br/>
     *  - Manage the content scale and translation<br/>
     * <br/>
     * Since the cc.view is a singleton, you don't need to call any constructor or create functions,<br/>
     * the standard way to use it is by calling:<br/>
     *  - cc.view.methodName(); <br/>
     *
     * @class View
     */
    class View extends EventTarget {
        private _frameSize;
        private _designResolutionSize;
        private _originalDesignResolutionSize;
        private _scaleX;
        private _scaleY;
        private _viewportRect;
        private _visibleRect;
        private _autoFullScreen;
        private _devicePixelRatio;
        private _retinaEnabled;
        private _resizeCallback;
        private _resizing;
        private _resizeWithBrowserSize;
        private _orientationChanging;
        private _isRotated;
        private _orientation;
        private _isAdjustViewport;
        private _antiAliasEnabled;
        private _resolutionPolicy;
        private _rpExactFit;
        private _rpShowAll;
        private _rpNoBorder;
        private _rpFixedHeight;
        private _rpFixedWidth;
        constructor();
        init(): void;
        /**
         * !#en
         * Sets view's target-densitydpi for android mobile browser. it can be set to:           <br/>
         *   1. macro.DENSITYDPI_DEVICE, value is "device-dpi"                                      <br/>
         *   2. macro.DENSITYDPI_HIGH, value is "high-dpi"  (default value)                         <br/>
         *   3. macro.DENSITYDPI_MEDIUM, value is "medium-dpi" (browser's default value)            <br/>
         *   4. macro.DENSITYDPI_LOW, value is "low-dpi"                                            <br/>
         *   5. Custom value, e.g: "480"                                                         <br/>
         * !#zh 设置目标内容的每英寸像素点密度。
         *
         * @method setTargetDensityDPI
         * @param {String} densityDPI
         * @deprecated since v2.0
         */
        /**
         * !#en
         * Returns the current target-densitydpi value of cc.view.
         * !#zh 获取目标内容的每英寸像素点密度。
         * @method getTargetDensityDPI
         * @returns {String}
         * @deprecated since v2.0
         */
        /**
         * !#en
         * Sets whether resize canvas automatically when browser's size changed.<br/>
         * Useful only on web.
         * !#zh 设置当发现浏览器的尺寸改变时，是否自动调整 canvas 尺寸大小。
         * 仅在 Web 模式下有效。
         * @method resizeWithBrowserSize
         * @param {Boolean} enabled - Whether enable automatic resize with browser's resize event
         */
        resizeWithBrowserSize(enabled: any): void;
        /**
         * !#en
         * Sets the callback function for cc.view's resize action,<br/>
         * this callback will be invoked before applying resolution policy, <br/>
         * so you can do any additional modifications within the callback.<br/>
         * Useful only on web.
         * !#zh 设置 cc.view 调整视窗尺寸行为的回调函数，
         * 这个回调函数会在应用适配模式之前被调用，
         * 因此你可以在这个回调函数内添加任意附加改变，
         * 仅在 Web 平台下有效。
         * @method setResizeCallback
         * @param {Function|Null} callback - The callback function
         */
        setResizeCallback(callback: any): void;
        /**
         * !#en
         * Sets the orientation of the game, it can be landscape, portrait or auto.
         * When set it to landscape or portrait, and screen w/h ratio doesn't fit,
         * cc.view will automatically rotate the game canvas using CSS.
         * Note that this function doesn't have any effect in native,
         * in native, you need to set the application orientation in native project settings
         * !#zh 设置游戏屏幕朝向，它能够是横版，竖版或自动。
         * 当设置为横版或竖版，并且屏幕的宽高比例不匹配时，
         * cc.view 会自动用 CSS 旋转游戏场景的 canvas，
         * 这个方法不会对 native 部分产生任何影响，对于 native 而言，你需要在应用设置中的设置排版。
         * @method setOrientation
         * @param {Number} orientation - Possible values: macro.ORIENTATION_LANDSCAPE | macro.ORIENTATION_PORTRAIT | macro.ORIENTATION_AUTO
         */
        setOrientation(orientation: any): void;
        /**
         * !#en
         * Sets whether the engine modify the "viewport" meta in your web page.<br/>
         * It's enabled by default, we strongly suggest you not to disable it.<br/>
         * And even when it's enabled, you can still set your own "viewport" meta, it won't be overridden<br/>
         * Only useful on web
         * !#zh 设置引擎是否调整 viewport meta 来配合屏幕适配。
         * 默认设置为启动，我们强烈建议你不要将它设置为关闭。
         * 即使当它启动时，你仍然能够设置你的 viewport meta，它不会被覆盖。
         * 仅在 Web 模式下有效
         * @method adjustViewportMeta
         * @param {Boolean} enabled - Enable automatic modification to "viewport" meta
         */
        adjustViewportMeta(enabled: any): void;
        /**
         * !#en
         * Retina support is enabled by default for Apple device but disabled for other devices,<br/>
         * it takes effect only when you called setDesignResolutionPolicy<br/>
         * Only useful on web
         * !#zh 对于 Apple 这种支持 Retina 显示的设备上默认进行优化而其他类型设备默认不进行优化，
         * 它仅会在你调用 setDesignResolutionPolicy 方法时有影响。
         * 仅在 Web 模式下有效。
         * @method enableRetina
         * @param {Boolean} enabled - Enable or disable retina display
         */
        enableRetina(enabled: any): void;
        /**
         * !#en
         * Check whether retina display is enabled.<br/>
         * Only useful on web
         * !#zh 检查是否对 Retina 显示设备进行优化。
         * 仅在 Web 模式下有效。
         * @method isRetinaEnabled
         * @return {Boolean}
         */
        isRetinaEnabled(): boolean;
        /**
         * !#en Whether to Enable on anti-alias
         * !#zh 控制抗锯齿是否开启
         * @method enableAntiAlias
         * @param {Boolean} enabled - Enable or not anti-alias
         */
        enableAntiAlias(enabled: any): void;
        /**
         * !#en Returns whether the current enable on anti-alias
         * !#zh 返回当前是否抗锯齿
         * @method isAntiAliasEnabled
         * @return {Boolean}
         */
        isAntiAliasEnabled(): boolean;
        /**
         * !#en
         * If enabled, the application will try automatically to enter full screen mode on mobile devices<br/>
         * You can pass true as parameter to enable it and disable it by passing false.<br/>
         * Only useful on web
         * !#zh 启动时，移动端游戏会在移动端自动尝试进入全屏模式。
         * 你能够传入 true 为参数去启动它，用 false 参数来关闭它。
         * @method enableAutoFullScreen
         * @param {Boolean} enabled - Enable or disable auto full screen on mobile devices
         */
        enableAutoFullScreen(enabled: any): void;
        /**
         * !#en
         * Check whether auto full screen is enabled.<br/>
         * Only useful on web
         * !#zh 检查自动进入全屏模式是否启动。
         * 仅在 Web 模式下有效。
         * @method isAutoFullScreenEnabled
         * @return {Boolean} Auto full screen enabled or not
         */
        isAutoFullScreenEnabled(): boolean;
        setCanvasSize(width: any, height: any): void;
        /**
         * !#en
         * Returns the canvas size of the view.<br/>
         * On native platforms, it returns the screen size since the view is a fullscreen view.<br/>
         * On web, it returns the size of the canvas element.
         * !#zh 返回视图中 canvas 的尺寸。
         * 在 native 平台下，它返回全屏视图下屏幕的尺寸。
         * 在 Web 平台下，它返回 canvas 元素尺寸。
         * @method getCanvasSize
         * @return {Size}
         */
        getCanvasSize(): any;
        /**
         * !#en
         * Returns the frame size of the view.<br/>
         * On native platforms, it returns the screen size since the view is a fullscreen view.<br/>
         * On web, it returns the size of the canvas's outer DOM element.
         * !#zh 返回视图中边框尺寸。
         * 在 native 平台下，它返回全屏视图下屏幕的尺寸。
         * 在 web 平台下，它返回 canvas 元素的外层 DOM 元素尺寸。
         * @method getFrameSize
         * @return {Size}
         */
        getFrameSize(): any;
        /**
         * !#en
         * On native, it sets the frame size of view.<br/>
         * On web, it sets the size of the canvas's outer DOM element.
         * !#zh 在 native 平台下，设置视图框架尺寸。
         * 在 web 平台下，设置 canvas 外层 DOM 元素尺寸。
         * @method setFrameSize
         * @param {Number} width
         * @param {Number} height
         */
        setFrameSize(width: any, height: any): void;
        /**
         * !#en
         * Returns the visible area size of the view port.
         * !#zh 返回视图窗口可见区域尺寸。
         * @method getVisibleSize
         * @return {Size}
         */
        getVisibleSize(): any;
        /**
         * !#en
         * Returns the visible area size of the view port.
         * !#zh 返回视图窗口可见区域像素尺寸。
         * @method getVisibleSizeInPixel
         * @return {Size}
         */
        getVisibleSizeInPixel(): any;
        /**
         * !#en
         * Returns the visible origin of the view port.
         * !#zh 返回视图窗口可见区域原点。
         * @method getVisibleOrigin
         * @return {Vec2}
         */
        getVisibleOrigin(): any;
        /**
         * !#en
         * Returns the visible origin of the view port.
         * !#zh 返回视图窗口可见区域像素原点。
         * @method getVisibleOriginInPixel
         * @return {Vec2}
         */
        getVisibleOriginInPixel(): any;
        /**
         * !#en
         * Returns the current resolution policy
         * !#zh 返回当前分辨率方案
         * @see ResolutionPolicy
         * @method getResolutionPolicy
         * @return {ResolutionPolicy}
         */
        getResolutionPolicy(): any;
        /**
         * !#en
         * Sets the current resolution policy
         * !#zh 设置当前分辨率模式
         * @see ResolutionPolicy
         * @method setResolutionPolicy
         * @param {ResolutionPolicy|Number} resolutionPolicy
         */
        setResolutionPolicy(resolutionPolicy: any): void;
        /**
         * !#en
         * Sets the resolution policy with designed view size in points.<br/>
         * The resolution policy include: <br/>
         * [1] ResolutionExactFit       Fill screen by stretch-to-fit: if the design resolution ratio of width to height is different from the screen resolution ratio, your game view will be stretched.<br/>
         * [2] ResolutionNoBorder       Full screen without black border: if the design resolution ratio of width to height is different from the screen resolution ratio, two areas of your game view will be cut.<br/>
         * [3] ResolutionShowAll        Full screen with black border: if the design resolution ratio of width to height is different from the screen resolution ratio, two black borders will be shown.<br/>
         * [4] ResolutionFixedHeight    Scale the content's height to screen's height and proportionally scale its width<br/>
         * [5] ResolutionFixedWidth     Scale the content's width to screen's width and proportionally scale its height<br/>
         * [ResolutionPolicy]        [Web only feature] Custom resolution policy, constructed by ResolutionPolicy<br/>
         * !#zh 通过设置设计分辨率和匹配模式来进行游戏画面的屏幕适配。
         * @method setDesignResolutionSize
         * @param {Number} width Design resolution width.
         * @param {Number} height Design resolution height.
         * @param {ResolutionPolicy|Number} resolutionPolicy The resolution policy desired
         */
        setDesignResolutionSize(width: any, height: any, resolutionPolicy: any): void;
        /**
         * !#en
         * Returns the designed size for the view.
         * Default resolution size is the same as 'getFrameSize'.
         * !#zh 返回视图的设计分辨率。
         * 默认下分辨率尺寸同 `getFrameSize` 方法相同
         * @method getDesignResolutionSize
         * @return {Size}
         */
        getDesignResolutionSize(): any;
        /**
         * !#en
         * Sets the container to desired pixel resolution and fit the game content to it.
         * This function is very useful for adaptation in mobile browsers.
         * In some HD android devices, the resolution is very high, but its browser performance may not be very good.
         * In this case, enabling retina display is very costy and not suggested, and if retina is disabled, the image may be blurry.
         * But this API can be helpful to set a desired pixel resolution which is in between.
         * This API will do the following:
         *     1. Set viewport's width to the desired width in pixel
         *     2. Set body width to the exact pixel resolution
         *     3. The resolution policy will be reset with designed view size in points.
         * !#zh 设置容器（container）需要的像素分辨率并且适配相应分辨率的游戏内容。
         * @method setRealPixelResolution
         * @param {Number} width Design resolution width.
         * @param {Number} height Design resolution height.
         * @param {ResolutionPolicy|Number} resolutionPolicy The resolution policy desired
         */
        setRealPixelResolution(width: any, height: any, resolutionPolicy: any): void;
        /**
         * !#en
         * Sets view port rectangle with points.
         * !#zh 用设计分辨率下的点尺寸来设置视窗。
         * @method setViewportInPoints
         * @deprecated since v2.0
         * @param {Number} x
         * @param {Number} y
         * @param {Number} w width
         * @param {Number} h height
         */
        setViewportInPoints(x: any, y: any, w: any, h: any): void;
        /**
         * !#en
         * Sets Scissor rectangle with points.
         * !#zh 用设计分辨率下的点的尺寸来设置 scissor 剪裁区域。
         * @method setScissorInPoints
         * @deprecated since v2.0
         * @param {Number} x
         * @param {Number} y
         * @param {Number} w
         * @param {Number} h
         */
        setScissorInPoints(x: any, y: any, w: any, h: any): void;
        /**
         * !#en
         * Returns whether GL_SCISSOR_TEST is enable
         * !#zh 检查 scissor 是否生效。
         * @method isScissorEnabled
         * @deprecated since v2.0
         * @return {Boolean}
         */
        isScissorEnabled(): any;
        /**
         * !#en
         * Returns the current scissor rectangle
         * !#zh 返回当前的 scissor 剪裁区域。
         * @method getScissorRect
         * @deprecated since v2.0
         * @return {Rect}
         */
        getScissorRect(): Rect;
        /**
         * !#en
         * Returns the view port rectangle.
         * !#zh 返回视窗剪裁区域。
         * @method getViewportRect
         * @return {Rect}
         */
        getViewportRect(): Rect;
        /**
         * !#en
         * Returns scale factor of the horizontal direction (X axis).
         * !#zh 返回横轴的缩放比，这个缩放比是将画布像素分辨率放到设计分辨率的比例。
         * @method getScaleX
         * @return {Number}
         */
        getScaleX(): number;
        /**
         * !#en
         * Returns scale factor of the vertical direction (Y axis).
         * !#zh 返回纵轴的缩放比，这个缩放比是将画布像素分辨率缩放到设计分辨率的比例。
         * @method getScaleY
         * @return {Number}
         */
        getScaleY(): number;
        /**
         * !#en
         * Returns device pixel ratio for retina display.
         * !#zh 返回设备或浏览器像素比例。
         * @method getDevicePixelRatio
         * @return {Number}
         */
        getDevicePixelRatio(): number;
        /**
         * !#en
         * Returns the real location in view for a translation based on a related position
         * !#zh 将屏幕坐标转换为游戏视图下的坐标。
         * @method convertToLocationInView
         * @param {Number} tx - The X axis translation
         * @param {Number} ty - The Y axis translation
         * @param {Object} relatedPos - The related position object including "left", "top", "width", "height" informations
         * @return {Vec2}
         */
        convertToLocationInView(tx: any, ty: any, relatedPos: any, out: any): any;
        private _resizeEvent;
        private _orientationChange;
        private _initFrameSize;
        private _adjustSizeKeepCanvasSize;
        private _setViewportMeta;
        private _adjustViewportMeta;
        private _convertMouseToLocation;
        private _convertPointWithScale;
        private _convertTouchWidthScale;
        private _convertTouchesWithScale;
    }
    /**
     * @module cc
     */
    /**
     * !#en cc.view is the shared view object.
     * !#zh cc.view 是全局的视图对象。
     * @property view
     * @static
     * @type {View}
     */
    const view: View;
    export default view;
}
declare module "cocos/core/platform/CCScreen" {
    /****************************************************************************
     Copyright (c) 2008-2010 Ricardo Quesada
     Copyright (c) 2011-2012 cocos2d-x.org
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    /**
     * The fullscreen API provides an easy way for web content to be presented using the user's entire screen.
     * It's invalid on safari, QQbrowser and android browser
     * @class screen
     */
    const screen: {
        _supportsFullScreen: boolean;
        _preOnFullScreenChange: any;
        _touchEvent: string;
        _fn: any;
        _fnMap: string[][];
        /**
         * initialize
         * @method init
         */
        init(): void;
        /**
         * return true if it's full now.
         * @method fullScreen
         * @returns {Boolean}
         */
        fullScreen(): boolean;
        /**
         * change the screen to full mode.
         * @method requestFullScreen
         * @param {Element} element
         * @param {Function} onFullScreenChange
         */
        requestFullScreen(element: any, onFullScreenChange: any): any;
        /**
         * exit the full mode.
         * @method exitFullScreen
         * @return {Boolean}
         */
        exitFullScreen(): any;
        /**
         * Automatically request full screen with a touch/click event
         * @method autoFullScreen
         * @param {Element} element
         * @param {Function} onFullScreenChange
         */
        autoFullScreen(element: any, onFullScreenChange: any): void;
    };
    export { screen };
}
declare module "cocos/core/platform/index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export * from "cocos/core/platform/CCSys";
    export * from "cocos/core/platform/CCMacro";
    export * from "cocos/core/platform/CCVisibleRect";
    export * from "cocos/core/platform/CCView";
    export * from "cocos/core/platform/event-manager/index";
    import { screen } from "cocos/core/platform/CCScreen";
    export { screen };
}
declare module "cocos/renderer/ui/renderData" {
    import { Material } from "cocos/3d/assets/material";
    import { Color, Rect } from "cocos/core/value-types/index";
    export interface IRenderData {
        x: number;
        y: number;
        z: number;
        u: number;
        v: number;
        color: Color;
    }
    export class BaseRenderData {
        material: Material | null;
        vertexCount: number;
        indiceCount: number;
    }
    export class RenderData extends BaseRenderData {
        dataLength: number;
        readonly datas: IRenderData[];
        static add(): {
            pooID: number;
            data: RenderData;
        };
        static remove(idx: number): void;
        uvDirty: boolean;
        vertDirty: boolean;
        rect: Rect;
        private _datas;
        private _indices;
        private _pivotX;
        private _pivotY;
        private _width;
        private _height;
        updateSizeNPivot(width: number, height: number, pivotX: number, pivotY: number): void;
        clear(): void;
    }
    export class IARenderData extends BaseRenderData {
        vData: Float32Array;
        iData: Uint16Array;
        vertexStart: number;
        indiceStart: number;
        byteStart: number;
        byteCount: number;
        private _formatByte;
        request(vertexCount: number, indiceCount: number): boolean;
        reset(): void;
    }
}
declare module "cocos/3d/ui/assembler/assembler" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { UIRenderComponent } from "cocos/3d/ui/components/index";
    export interface IAssembler {
        [key: string]: any;
    }
    export interface IAssemblerManager {
        getAssembler(component: UIRenderComponent): IAssembler;
    }
}
declare module "cocos/3d/ui/components/ui-render-component" {
    import { Color } from "cocos/core/value-types/index";
    import { GFXBlendFactor } from "cocos/gfx/define";
    import { RenderData } from "cocos/renderer/ui/renderData";
    import { UI } from "cocos/renderer/ui/ui";
    import { Material } from "cocos/3d/assets/index";
    import { IAssembler, IAssemblerManager } from "cocos/3d/ui/assembler/assembler";
    import { UIComponent } from "cocos/3d/ui/components/ui-component";
    /**
     * @zh
     * 实例后的材质的着色器属性类型
     */
    export enum InstanceMaterialType {
        /**
         * @zh
         * 着色器只带颜色属性。
         */
        ADDCOLOR = 0,
        /**
         * @zh
         * 着色器带颜色和贴图属性。
         */
        ADDCOLORANDTEXTURE = 1
    }
    /**
     * @zh
     * 所有支持渲染的 UI 组件的基类
     */
    export class UIRenderComponent extends UIComponent {
        /**
         * @zh
         * 指定原图的混合模式，这会克隆一个新的材质对象，注意这带来的。
         *
         * @param value 原图混合模式。
         * @example
         * ```ts
         * sprite.srcBlendFactor = macro.BlendFactor.ONE;
         * ```
         */
        srcBlendFactor: GFXBlendFactor;
        /**
         * @zh
         * 指定目标的混合模式。
         *
         * @param value 目标混合模式。
         * @example
         * ```ts
         * sprite.dstBlendFactor = GFXBlendFactor.ONE;
         * ```
         */
        dstBlendFactor: GFXBlendFactor;
        /**
         * @zh
         * 渲染颜色。
         *
         * @param value 渲染颜色。
         */
        color: Color;
        /**
         * @zh
         * 渲染使用材质，实际使用材质是实例后材质。
         *
         * @param value 源材质。
         */
        sharedMaterial: Material | null;
        readonly material: Material | null;
        readonly renderData: RenderData | null;
        static BlendState: typeof GFXBlendFactor;
        static Assembler: IAssemblerManager | null;
        static PostAssembler: IAssemblerManager | null;
        protected _srcBlendFactor: GFXBlendFactor;
        protected _dstBlendFactor: GFXBlendFactor;
        protected _color: Color;
        protected _sharedMaterial: Material | null;
        protected _assembler: IAssembler | null;
        protected _postAssembler: IAssembler | null;
        protected _renderDataPoolID: number;
        protected _renderData: RenderData | null;
        protected _renderDataDirty: boolean;
        protected _renderPermit: boolean;
        protected _material: Material | null;
        protected _instanceMaterialType: InstanceMaterialType;
        protected _blendTemplate: {
            blendState: {
                targets: {
                    blendSrc: GFXBlendFactor;
                    blendDst: GFXBlendFactor;
                }[];
            };
            depthStencilState: {};
            rasterizerState: {};
        };
        __preload(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        /**
         * @zh
         * 标记当前组件的渲染数据为已修改状态，这样渲染数据才会重新计算。
         *
         * @param enable 是否标记为已修改。
         */
        markForUpdateRenderData(enable?: boolean): void;
        /**
         * @zh
         * 请求渲染数据。
         *
         * @return 渲染数据 RenderData。
         */
        requestRenderData(): RenderData;
        /**
         * @zh
         * 渲染数据销毁。
         */
        destroyRenderData(): void;
        /**
         * @zh
         * 每个渲染组件都由此接口决定是否渲染以及渲染状态的更新。
         *
         * @param render 数据处理中转站。
         */
        updateAssembler(render: UI): boolean;
        protected _checkAndUpdateRenderData(): void;
        protected _canRender(): boolean;
        protected _updateColor(): void;
        protected _updateMaterial(material: Material | null): void;
        protected _updateBlendFunc(): void;
        protected _nodeStateChange(): void;
        protected _instanceMaterial(): void;
        protected _flushAssembler?(): void;
    }
}
declare module "cocos/3d/ui/components/sprite-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { SpriteAtlas, SpriteFrame } from "cocos/assets/index";
    import { Vec2 } from "cocos/core/value-types/index";
    import { UI } from "cocos/renderer/ui/ui";
    import { UIRenderComponent } from "cocos/3d/ui/components/ui-render-component";
    /**
     * @zh
     * Sprite 类型
     */
    enum SpriteType {
        /**
         * @zh
         * 普通类型
         */
        SIMPLE = 0,
        /**
         * @zh
         * 切片（九宫格）类型
         */
        SLICED = 1,
        /**
         * @zh
         * 填充类型
         */
        FILLED = 3
    }
    /**
     * @zh
     * 填充类型
     */
    enum FillType {
        /**
         * @zh
         * 水平方向填充
         */
        HORIZONTAL = 0,
        /**
         * @zh
         * 垂直方向填充
         */
        VERTICAL = 1,
        RADIAL = 2
    }
    /**
     * @zh
     * 精灵尺寸调整模式
     */
    enum SizeMode {
        /**
         * @zh
         * 使用节点预设的尺寸
         */
        CUSTOM = 0,
        /**
         * @zh
         * 自动适配为精灵裁剪后的尺寸
         */
        TRIMMED = 1,
        /**
         * @zh
         * 自动适配为精灵原图尺寸
         */
        RAW = 2
    }
    export class SpriteComponent extends UIRenderComponent {
        /**
         * @zh
         * 精灵的图集
         */
        spriteAtlas: SpriteAtlas | null;
        /**
         * @zh
         * 精灵的精灵帧
         */
        spriteFrame: SpriteFrame | null;
        /**
         * @zh
         * 精灵渲染类型
         *
         * @example
         * ```ts
         * sprite.type = cc.SpriteComponent.Type.SIMPLE;
         * ```
         */
        type: SpriteType;
        /**
         * @zh
         * 精灵填充类型，仅渲染类型设置为 cc.SpriteComponent.Type.FILLED 时有效。
         *
         * @example
         * ```ts
         * sprite.fillType = SpriteComponent.FillType.HORIZONTAL;
         * ```
         */
        fillType: FillType;
        /**
         * @zh
         * 填充中心点，仅渲染类型设置为 cc.SpriteComponent.Type.FILLED 时有效。
         *
         * @example
         * ```ts
         * sprite.fillCenter = cc.v2(0, 0);
         * ```
         */
        fillCenter: Vec2;
        /**
         * @zh
         * 填充起始点，仅渲染类型设置为 cc.Sprite.Type.FILLED 时有效。
         *
         * @example
         * ```ts
         * // -1 To 1 between the numbers
         * sprite.fillStart = 0.5;
         * ```
         */
        fillStart: number;
        /**
         * @zh
         * 填充范围，仅渲染类型设置为 cc.Sprite.Type.FILLED 时有效。
         *
         * @example
         * ```ts
         * // -1 To 1 between the numbers
         * sprite.fillRange = 1;
         * ```
         */
        fillRange: number;
        /**
         * @zh  是否使用裁剪模式
         *
         * @example
         * ```ts
         * sprite.trim = true;
         * ```
         */
        trim: boolean;
        /**
         * @zh  精灵尺寸调整模式
         *
         * @example
         * ```ts
         * sprite.sizeMode = cc.Sprite.SizeMode.CUSTOM;
         * ```
         */
        sizeMode: SizeMode;
        static FillType: typeof FillType;
        static Type: typeof SpriteType;
        static SizeMode: typeof SizeMode;
        private _spriteFrame;
        private _type;
        private _fillType;
        private _sizeMode;
        private _fillCenter;
        private _fillStart;
        private _fillRange;
        private _isTrimmedMode;
        private _atlas;
        __preload(): void;
        onEnable(): void;
        updateAssembler(render: UI): boolean;
        onDestroy(): void;
        protected _canRender(): boolean;
        protected _flushAssembler(): void;
        private _applySpriteSize;
        private _resized;
        private _activateMaterial;
        private _applyAtlas;
        private _applySpriteFrame;
    }
}
declare module "cocos/3d/ui/components/button-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { SpriteFrame } from "cocos/assets/index";
    import { Component, EventHandler as ComponentEventHandler } from "cocos/components/index";
    import { Color } from "cocos/core/value-types/index";
    import { Node } from "cocos/scene-graph/index";
    /**
     * @zh
     * 过渡类型
     */
    enum Transition {
        /**
         * @zh
         * 不做任何过渡。
         */
        NONE = 0,
        /**
         * @zh
         * 颜色过渡。
         */
        COLOR = 1,
        /**
         * @zh
         * 精灵过渡。
         */
        SPRITE = 2,
        /**
         * @zh
         * 缩放过渡。
         */
        SCALE = 3
    }
    /**
     * @zh
     * 按钮组件。可以被按下,或者点击。<br/>
     *
     * 按钮可以通过修改 Transition 来设置按钮状态过渡的方式：<br/>
     *   -Button.Transition.NONE   // 不做任何过渡<br/>
     *   -Button.Transition.COLOR  // 进行颜色之间过渡<br/>
     *   -Button.Transition.SPRITE // 进行精灵之间过渡<br/>
     *   -Button.Transition.SCALE // 进行缩放过渡<br/>
     *
     * 按钮可以绑定事件（但是必须要在按钮的 Node 上才能绑定事件）：<br/>
     *   // 以下事件可以在全平台上都触发<br/>
     *   -cc.Node.EventType.TOUCH_START  // 按下时事件<br/>
     *   -cc.Node.EventType.TOUCH_Move   // 按住移动后事件<br/>
     *   -cc.Node.EventType.TOUCH_END    // 按下后松开后事件<br/>
     *   -cc.Node.EventType.TOUCH_CANCEL // 按下取消事件<br/>
     *   // 以下事件只在 PC 平台上触发<br/>
     *   -cc.Node.EventType.MOUSE_DOWN  // 鼠标按下时事件<br/>
     *   -cc.Node.EventType.MOUSE_MOVE  // 鼠标按住移动后事件<br/>
     *   -cc.Node.EventType.MOUSE_ENTER // 鼠标进入目标事件<br/>
     *   -cc.Node.EventType.MOUSE_LEAVE // 鼠标离开目标事件<br/>
     *   -cc.Node.EventType.MOUSE_UP    // 鼠标松开事件<br/>
     *   -cc.Node.EventType.MOUSE_WHEEL // 鼠标滚轮事件<br/>
     *
     * @example
     * ```ts
     * // Add an event to the button.
     * button.node.on(cc.Node.EventType.TOUCH_START, function (event) {
     *     cc.log("This is a callback after the trigger event");
     * });
     * // You could also add a click event
     * //Note: In this way, you can't get the touch event info, so use it wisely.
     * button.node.on('click', function (button) {
     *    //The event is a custom event, you could get the Button component via first argument
     * })
     * ```
     */
    export class ButtonComponent extends Component {
        /**
         * @zh
         * 按钮事件是否被响应，如果为 false，则按钮将被禁用。
         */
        interactable: boolean;
        _resizeToTarget: boolean;
        /**
         * @zh
         * 如果这个标记为 true，当 button 的 interactable 属性为 false 的时候，会使用内置 shader 让 button 的 target 节点的 sprite 组件变灰
         */
        /**
         * @zh
         * 按钮状态改变时过渡方式。
         */
        transition: Transition;
        /**
         * @zh
         * 普通状态下按钮所显示的颜色。
         */
        normalColor: Color;
        /**
         * @zh
         * 按下状态时按钮所显示的颜色。
         */
        pressedColor: Color;
        /**
         * @zh
         * 悬停状态下按钮所显示的颜色。
         */
        hoverColor: Color;
        /**
         * @zh
         * 禁用状态下按钮所显示的颜色。
         */
        disabledColor: Color;
        /**
         * @zh
         * 颜色过渡和缩放过渡时所需时间
         */
        duration: number;
        /**
         * @zh
         * 当用户点击按钮后，按钮会缩放到一个值，这个值等于 Button 原始 scale * zoomScale
         */
        zoomScale: number;
        /**
         * @zh
         * 普通状态下按钮所显示的 Sprite 。
         */
        normalSprite: SpriteFrame | null;
        /**
         * @zh
         * 按下状态时按钮所显示的 Sprite。
         */
        pressedSprite: SpriteFrame | null;
        /**
         * @zh
         * 悬停状态下按钮所显示的 Sprite。
         */
        hoverSprite: SpriteFrame | null;
        /**
         * @zh
         * 禁用状态下按钮所显示的 Sprite。
         */
        disabledSprite: SpriteFrame | null;
        /**
         * @zh
         * 需要过渡的目标。<br/>
         * 当前按钮状态改变规则：<br/>
         * -如果 Transition type 选择 Button.Transition.NONE，按钮不做任何过渡。<br/>
         * -如果 Transition type 选择 Button.Transition.COLOR，按钮会对目标颜色进行颜色之间的过渡。<br/>
         * -如果 Transition type 选择 Button.Transition.Sprite，按钮会对目标 Sprite 进行 Sprite 之间的过渡。<br/>
         */
        target: Node | null;
        static Transition: typeof Transition;
        /**
         * @zh
         * 按钮的点击事件列表。
         */
        clickEvents: ComponentEventHandler[];
        private _interactable;
        private _transition;
        private _normalColor;
        private _hoverColor;
        private _pressColor;
        private _disabledColor;
        private _normalSprite;
        private _hoverSprite;
        private _pressedSprite;
        private _disabledSprite;
        private _duration;
        private _zoomScale;
        private _target;
        private _pressed;
        private _hovered;
        private _fromColor;
        private _toColor;
        private _time;
        private _transitionFinished;
        private _fromScale;
        private _toScale;
        private _originalScale;
        private _sprite;
        private _targetScale;
        __preload(): void;
        onEnable(): void;
        onDisable(): void;
        update(dt: number): void;
        protected _resizeNodeToTargetNode(): void;
        private _resetState;
        private _registerEvent;
        private _getTargetSprite;
        private _applyTarget;
        private _onTouchBegan;
        private _onTouchMove;
        private _onTouchEnded;
        private _onTouchCancel;
        private _onMouseMoveIn;
        private _onMouseMoveOut;
        private _updateState;
        private _getButtonState;
        private _updateColorTransition;
        private _updateSpriteTransition;
        private _updateScaleTransition;
        private _zoomUp;
        private _zoomBack;
        private _applyTransition;
    }
}
declare module "cocos/3d/ui/assembler/label/bmfontUtils" {
    import { Vec2 } from "cocos/core/value-types/index";
    import { LabelComponent } from "cocos/3d/ui/components/label-component";
    class FontLetterDefinition {
        u: number;
        v: number;
        width: number;
        height: number;
        offsetX: number;
        offsetY: number;
        textureID: number;
        validDefinition: boolean;
        xAdvance: number;
    }
    interface ILetterDefinition {
        [key: string]: FontLetterDefinition;
    }
    export class FontAtlas {
        readonly letterDefinitions: ILetterDefinition;
        private _letterDefinitions;
        constructor(fntConfig: any);
        addLetterDefinitions(letter: string, letterDefinition: FontLetterDefinition): void;
        cloneLetterDefinition(): ILetterDefinition;
        assignLetterDefinitions(letterDefinition: ILetterDefinition): void;
        scaleFontLetterDefinition(scaleFactor: number): void;
        getLetterDefinitionForChar(char: string): any;
    }
    export const bmfontUtils: {
        updateRenderData(comp: LabelComponent): void;
        _updateFontScale(): void;
        _updateProperties(): void;
        _resetProperties(): void;
        _updateContent(): void;
        _computeHorizontalKerningForText(): void;
        _multilineTextWrap(nextTokenFunc: Function): boolean;
        _getFirstCharLen(): number;
        _getFirstWordLen(text: string, startIndex: number, textLen: number): number;
        _multilineTextWrapByWord(): boolean;
        _multilineTextWrapByChar(): boolean;
        _recordPlaceholderInfo(letterIndex: number, char: string): void;
        _recordLetterInfo(letterDefinitions: ILetterDefinition, letterPosition: Vec2, character: string, letterIndex: number, lineIndex: number): void;
        _alignText(): void;
        _scaleFontSizeDown(fontSize: number): void;
        _shrinkLabelToContentSize(lambda: Function): void;
        _isVerticalClamp(): boolean;
        _isHorizontalClamp(): boolean | undefined;
        _isHorizontalClamped(px: number, lineIndex: number): boolean;
        _updateQuads(): boolean;
        appendQuad(comp: any, texture: any, rect: any, rotated: any, x: any, y: any, scale: any): void;
        _computeAlignmentOffset(): void;
        _setupBMFontOverflowMetrics(): void;
    };
    export default bmfontUtils;
}
declare module "cocos/3d/ui/assembler/label/font-utils" {
    export interface ISharedLabelData {
        canvas: HTMLCanvasElement;
        context: CanvasRenderingContext2D | null;
    }
    export class CanvasPool {
        pool: ISharedLabelData[];
        get(): ISharedLabelData;
        put(canvas: ISharedLabelData): void;
    }
}
declare module "cocos/3d/ui/assembler/label/letter-font" {
    /****************************************************************************
     Copyright (c) 2018 Xiamen Yaji Software Co., Ltd.
    
     https://www.cocos.com/
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { SpriteFrame, Texture2D } from "cocos/assets/index";
    import { Color, Vec2 } from "cocos/core/value-types/index";
    import { GFXFormat } from "cocos/gfx/define";
    import { LabelComponent } from "cocos/3d/ui/components/index";
    import { ISharedLabelData } from "cocos/3d/ui/assembler/label/font-utils";
    interface ILabelInfo {
        fontSize: number;
        lineHeight: number;
        hash: string;
        fontFamily: string;
        fontDesc: string;
        hAlign: number;
        vAlign: number;
        color: Color;
        isOutlined: boolean;
        out: Color;
        margin: number;
    }
    class FontLetterDefinition {
        u: number;
        v: number;
        w: number;
        h: number;
        texture: LetterRenderTexture | null;
        offsetX: number;
        offsetY: number;
        valid: boolean;
        xAdvance: number;
    }
    class LetterTexture {
        texture: SpriteFrame | null;
        labelInfo: ILabelInfo;
        char: string;
        data: ISharedLabelData | null;
        canvas: HTMLCanvasElement | null;
        context: CanvasRenderingContext2D | null;
        width: number;
        height: number;
        hash: string;
        constructor(char: string, labelInfo: ILabelInfo);
        updateRenderData(): void;
        destroy(): void;
        private _updateProperties;
        private _updateTexture;
    }
    export class LetterRenderTexture extends Texture2D {
        /**
         * !#en
         * Init the render texture with size.
         * !#zh
         * 初始化 render texture
         * @param [width]
         * @param [height]
         * @param [string]
         * @method initWithSize
         */
        initWithSize(width: number, height: number, format?: GFXFormat): void;
        /**
         * !#en Draw a texture to the specified position
         * !#zh 将指定的图片渲染到指定的位置上
         * @param {Texture2D} texture
         * @param {Number} x
         * @param {Number} y
         */
        drawTextureAt(texture: SpriteFrame, x: number, y: number): void;
    }
    export class LetterAtlas {
        readonly width: number;
        readonly height: number;
        texture: LetterRenderTexture;
        private _x;
        private _y;
        private _nexty;
        private _width;
        private _height;
        private _letterDefinitions;
        private _imageAssets;
        private _dirty;
        constructor(width: number, height: number);
        insertLetterTexture(letterTexture: LetterTexture): FontLetterDefinition | null;
        update(): void;
        reset(): void;
        destroy(): void;
        beforeSceneLoad(): void;
        getLetter(key: string): FontLetterDefinition | undefined;
        addLetterDefinitions(key: string, letterDefinition: FontLetterDefinition): void;
        cloneLetterDefinition(): {};
        assignLetterDefinitions(letterDefinitions: Map<string, FontLetterDefinition>): void;
        scaleFontLetterDefinition(scaleFactor: number): void;
        getLetterDefinitionForChar(char: string, labelInfo: ILabelInfo): FontLetterDefinition | null;
    }
    export const letterFont: {
        getAssemblerData(): LetterRenderTexture;
        updateRenderData(comp: LabelComponent): void;
        _updateFontScale(): void;
        _updateProperties(): void;
        _updateFontFamily(comp: LabelComponent): void;
        _computeHash(labelInfo: ILabelInfo): string;
        _getFontDesc(): string;
        _resetProperties(): void;
        _updateContent(): void;
        _computeHorizontalKerningForText(): void;
        _multilineTextWrap(nextTokenFunc: Function): boolean;
        _getFirstCharLen(): number;
        _getFirstWordLen(text: string, startIndex: number, textLen: number): number | undefined;
        _multilineTextWrapByWord(): boolean;
        _multilineTextWrapByChar(): boolean;
        _recordPlaceholderInfo(letterIndex: number, char: string): void;
        _recordLetterInfo(letterPosition: Vec2, character: string, letterIndex: number, lineIndex: number): void;
        _alignText(): void;
        _scaleFontSizeDown(fontSize: number): void;
        _isVerticalClamp(): boolean;
        _isHorizontalClamp(): boolean;
        _isHorizontalClamped(px: number, lineIndex: number): boolean;
        _updateQuads(): boolean | undefined;
        appendQuad(renderData: any, texture: any, rect: any, rotated: any, x: any, y: any, scale: any): void;
        _computeAlignmentOffset(): void;
        _setupBMFontOverflowMetrics(): void;
    };
}
declare module "cocos/3d/ui/components/label-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Font, SpriteFrame } from "cocos/assets/index";
    import { UI } from "cocos/renderer/ui/ui";
    import { FontAtlas } from "cocos/3d/ui/assembler/label/bmfontUtils";
    import { CanvasPool, ISharedLabelData } from "cocos/3d/ui/assembler/label/font-utils";
    import { LetterRenderTexture } from "cocos/3d/ui/assembler/label/letter-font";
    import { UIRenderComponent } from "cocos/3d/ui/components/ui-render-component";
    /**
     * @zh
     * 文本横向对齐类型
     */
    export enum HorizontalTextAlignment {
        /**
         * @zh
         * 左对齐
         */
        LEFT = 0,
        /**
         * @zh
         * 中心对齐
         */
        CENTER = 1,
        /**
         * @zh
         * 右对齐
         */
        RIGHT = 2
    }
    /**
     * @zh
     * 文本垂直对齐类型
     */
    export enum VerticalTextAlignment {
        /**
         * @zh
         * 上对齐
         */
        TOP = 0,
        /**
         * @zh
         * 中心对齐
         */
        CENTER = 1,
        /**
         * @zh
         * 下对齐
         */
        BOTTOM = 2
    }
    /**
     * @zh
     * 文本超载类型
     */
    export enum Overflow {
        /**
         * @zh
         * 不做任何限制。
         */
        NONE = 0,
        /**
         * @zh
         * CLAMP 模式中，当文本内容超出边界框时，多余的会被截断。
         */
        CLAMP = 1,
        /**
         * @zh
         * SHRINK 模式，字体大小会动态变化，以适应内容大小。
         */
        SHRINK = 2,
        /**
         * @zh
         * 在 RESIZE_HEIGHT 模式下，只能更改文本的宽度，高度是自动改变的。
         */
        RESIZE_HEIGHT = 3
    }
    /**
     * @zh
     * 文本图集缓存类型
     */
    enum CacheMode {
        /**
         * @zh
         * 不做任何缓存。
         */
        NONE = 0,
        /**
         * @zh
         * BITMAP 模式，将 label 缓存成静态图像并加入到动态图集，以便进行批次合并，可与使用碎图的 Sprite 进行合批。
         * （注：动态图集在 Chrome 以及微信小游戏暂时关闭，该功能无效）。
         */
        BITMAP = 1,
        /**
         * @zh
         *  CHAR 模式，将文本拆分为字符，并将字符缓存到一张单独的大小为 1024 * 1024 的图集中进行重复使用，不再使用动态图集。
         * （注：当图集满时将不再进行缓存，暂时不支持 SHRINK 自适应文本尺寸（后续完善））。
         */
        CHAR = 2
    }
    /**
     * @zh
     * Type 类型
     */
    /**
     * @zh
     * TTF字体
     */
    /**
     * @zh
     * 位图字体
     */
    /**
     * @zh
     * 系统字体
     */
    /**
     * @zh
     * 文字标签组件
     */
    export class LabelComponent extends UIRenderComponent {
        /**
         * @zh
         * 标签显示的文本内容。
         */
        string: string;
        /**
         * @zh
         * 文本内容的水平对齐方式。
         */
        horizontalAlign: HorizontalTextAlignment;
        /**
         * @zh
         * 文本内容的垂直对齐方式。
         */
        verticalAlign: VerticalTextAlignment;
        /**
         * @zh
         * SHRINK 模式下面文本实际渲染的字体大小
         */
        actualFontSize: number;
        /**
         * @zh
         * 文本字体大小。
         */
        fontSize: number;
        /**
         * @zh
         * 文本字体名称, 只在 useSystemFont 属性为 true 的时候生效。
         */
        fontFamily: string;
        /**
         * @zh
         * 文本行高。
         */
        lineHeight: number;
        /**
         * @zh
         * 文字显示超出范围时的处理方式。
         */
        overflow: Overflow;
        /**
         * @zh
         * 是否自动换行。
         */
        enableWrapText: boolean;
        /**
         * @zh
         * 文本字体。
         */
        font: Font | null;
        /**
         * @zh
         * 是否使用系统字体。
         */
        useSystemFont: boolean;
        /**
         * @zh
         * 文本缓存模式, 该模式只支持系统字体。
         */
        cacheMode: CacheMode;
        readonly spriteFrame: SpriteFrame | LetterRenderTexture | null;
        /**
         * @zh
         * 字体是否加粗。
         */
        isBold: boolean;
        /**
         * @zh
         * 字体是否倾斜。
         */
        isItalic: boolean;
        /**
         * @zh
         * 字体是否加下划线。
         */
        isUnderline: boolean;
        readonly assemblerData: ISharedLabelData | null;
        fontAtlas: FontAtlas | null;
        spacingX: number;
        readonly _bmFontOriginalSize: number;
        static HorizontalAlign: typeof HorizontalTextAlignment;
        static VerticalAlign: typeof VerticalTextAlignment;
        static Overflow: typeof Overflow;
        static CacheMode: typeof CacheMode;
        static CanvasPool: CanvasPool;
        private _useOriginalSize;
        private _string;
        private _horizontalAlign;
        private _verticalAlign;
        private _actualFontSize;
        private _fontSize;
        private _fontFamily;
        private _lineHeight;
        private _overflow;
        private _enableWrapText;
        private _font;
        private _isSystemFontUsed;
        private _spacingX;
        private _isItalic;
        private _isBold;
        private _isUnderline;
        private _cacheMode;
        private _N$file;
        private _texture;
        private _ttfTexture;
        private _userDefinedFont;
        private _assemblerData;
        private _fontAtlas;
        private _letterTexture;
        constructor();
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        updateRenderData(force?: boolean): void;
        updateAssembler(render: UI): boolean;
        protected _updateColor(): void;
        protected _canRender(): boolean;
        protected _flushAssembler(): void;
        /**
         * @zh
         * 检查是否空字符串，空字符串不渲染
         */
        private _checkStringEmpty;
        private _flushMaterial;
        private _applyFontTexture;
    }
}
declare module "cocos/3d/ui/components/editbox/types" {
    /**
     * !#en Enum for keyboard return types
     * !#zh 键盘的返回键类型
     * @readonly
     * @enum EditBox.KeyboardReturnType
     */
    export enum KeyboardReturnType {
        /**
         * !#en TODO
         * !#zh 默认
         * @property {Number} DEFAULT
         */
        DEFAULT = 0,
        /**
         * !#en TODO
         * !#zh 完成类型
         * @property {Number} DONE
         */
        DONE = 1,
        /**
         * !#en TODO
         * !#zh 发送类型
         * @property {Number} SEND
         */
        SEND = 2,
        /**
         * !#en TODO
         * !#zh 搜索类型
         * @property {Number} SEARCH
         */
        SEARCH = 3,
        /**
         * !#en TODO
         * !#zh 跳转类型
         * @property {Number} GO
         */
        GO = 4,
        /**
         * !#en TODO
         * !#zh 下一个类型
         * @property {Number} NEXT
         */
        NEXT = 5
    }
    /**
     * !#en The EditBox's InputMode defines the type of text that the user is allowed to enter.
     * !#zh 输入模式
     * @readonly
     * @enum EditBox.InputMode
     */
    export enum InputMode {
        /**
         * !#en TODO
         * !#zh 用户可以输入任何文本，包括换行符。
         * @property {Number} ANY
         */
        ANY = 0,
        /**
         * !#en The user is allowed to enter an e-mail address.
         * !#zh 允许用户输入一个电子邮件地址。
         * @property {Number} EMAIL_ADDR
         */
        EMAIL_ADDR = 1,
        /**
         * !#en The user is allowed to enter an integer value.
         * !#zh 允许用户输入一个整数值。
         * @property {Number} NUMERIC
         */
        NUMERIC = 2,
        /**
         * !#en The user is allowed to enter a phone number.
         * !#zh 允许用户输入一个电话号码。
         * @property {Number} PHONE_NUMBER
         */
        PHONE_NUMBER = 3,
        /**
         * !#en The user is allowed to enter a URL.
         * !#zh 允许用户输入一个 URL。
         * @property {Number} URL
         */
        URL = 4,
        /**
         * !#en
         * The user is allowed to enter a real number value.
         * This extends kEditBoxInputModeNumeric by allowing a decimal point.
         * !#zh
         * 允许用户输入一个实数。
         * @property {Number} DECIMAL
         */
        DECIMAL = 5,
        /**
         * !#en The user is allowed to enter any text, except for line breaks.
         * !#zh 除了换行符以外，用户可以输入任何文本。
         * @property {Number} SINGLE_LINE
         */
        SINGLE_LINE = 6
    }
    /**
     * !#en Enum for the EditBox's input flags
     * !#zh 定义了一些用于设置文本显示和文本格式化的标志位。
     * @readonly
     * @enum EditBox.InputFlag
     */
    export enum InputFlag {
        /**
         * !#en
         * Indicates that the text entered is confidential data that should be
         * obscured whenever possible. This implies EDIT_BOX_INPUT_FLAG_SENSITIVE.
         * !#zh
         * 表明输入的文本是保密的数据，任何时候都应该隐藏起来，它隐含了 EDIT_BOX_INPUT_FLAG_SENSITIVE。
         * @property {Number} PASSWORD
         */
        PASSWORD = 0,
        /**
         * !#en
         * Indicates that the text entered is sensitive data that the
         * implementation must never store into a dictionary or table for use
         * in predictive, auto-completing, or other accelerated input schemes.
         * A credit card number is an example of sensitive data.
         * !#zh
         * 表明输入的文本是敏感数据，它禁止存储到字典或表里面，也不能用来自动补全和提示用户输入。
         * 一个信用卡号码就是一个敏感数据的例子。
         * @property {Number} SENSITIVE
         */
        SENSITIVE = 1,
        /**
         * !#en
         * This flag is a hint to the implementation that during text editing,
         * the initial letter of each word should be capitalized.
         * !#zh
         *  这个标志用来指定在文本编辑的时候，是否把每一个单词的首字母大写。
         * @property {Number} INITIAL_CAPS_WORD
         */
        INITIAL_CAPS_WORD = 2,
        /**
         * !#en
         * This flag is a hint to the implementation that during text editing,
         * the initial letter of each sentence should be capitalized.
         * !#zh
         * 这个标志用来指定在文本编辑是否每个句子的首字母大写。
         * @property {Number} INITIAL_CAPS_SENTENCE
         */
        INITIAL_CAPS_SENTENCE = 3,
        /**
         * !#en Capitalize all characters automatically.
         * !#zh 自动把输入的所有字符大写。
         * @property {Number} INITIAL_CAPS_ALL_CHARACTERS
         */
        INITIAL_CAPS_ALL_CHARACTERS = 4,
        /**
         * Don't do anything with the input text.
         * @property {Number} DEFAULT
         */
        DEFAULT = 5
    }
}
declare module "cocos/3d/ui/components/editbox/edit-box-impl" {
    import { Color, Size } from "cocos/core/value-types/index";
    import { Node } from "cocos/scene-graph/node";
    import { EditBoxComponent } from "cocos/3d/ui/components/editbox/edit-box-component";
    import { InputFlag, InputMode, KeyboardReturnType } from "cocos/3d/ui/components/editbox/types";
    export class EditBoxImpl {
        _delegate: EditBoxComponent | null;
        _inputMode: number;
        _inputFlag: number;
        _returnType: KeyboardReturnType;
        _maxLength: number;
        _text: string;
        _placeholderText: string;
        _alwaysOnTop: boolean;
        _size: Size;
        _node: Node | null;
        _editing: boolean;
        __eventListeners: any;
        __fullscreen: boolean;
        __autoResize: boolean;
        __rotateScreen: boolean;
        __orientationChanged: any;
        _edTxt: HTMLInputElement | HTMLTextAreaElement | null;
        _textColor: Color;
        _edFontSize: number;
        text: string;
        readonly textColor: Color;
        readonly fontSize: number;
        returnType: KeyboardReturnType;
        readonly alwayOnTop: boolean;
        editing: boolean;
        readonly delegate: EditBoxComponent | null;
        readonly eventListeners: any;
        onEnable(): void;
        onDisable(): void;
        setTabIndex(index: any): void;
        setFocus(): void;
        isFocused(): boolean;
        stayOnTop(flag: any): void;
        setMaxLength(maxLength: any): void;
        setString(text: any): void;
        getString(): string;
        setPlaceholderText(text: string): void;
        getPlaceholderText(): string;
        setDelegate(delegate: EditBoxComponent | null): void;
        setInputMode(inputMode: InputMode): void;
        setInputFlag(inputFlag: InputFlag): void;
        setReturnType(returnType: KeyboardReturnType): void;
        setFontSize(fontSize: number): void;
        setFontColor(color: Color): void;
        setSize(width: number, height: number): void;
        setNode(node: Node): void;
        update(): void;
        clear(): void;
        _onTouchBegan(touch: any): void;
        _onTouchEnded(): void;
        _beginEditing(): void;
        _endEditing(): void;
        _updateDomInputType(): void;
        _updateSize(newWidth: any, newHeight: any): void;
        _updateMatrix(): false | undefined;
        _adjustEditBoxPosition(): void;
        createInput(): void;
        _beginEditingOnMobile(): void;
        _endEditingOnMobile(): void;
        _createDomInput(): HTMLInputElement;
        _createDomTextArea(): HTMLTextAreaElement;
        _addDomToGameContainer(): void;
        removeDom(): void;
    }
}
declare module "cocos/3d/ui/components/editbox/edit-box-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { SpriteFrame } from "cocos/assets/sprite-frame";
    import { Component } from "cocos/components/component";
    import { EventHandler as ComponentEventHandler } from "cocos/components/component-event-handler";
    import Color from "cocos/core/value-types/color";
    import { LabelComponent } from "cocos/3d/ui/components/label-component";
    import { SpriteComponent } from "cocos/3d/ui/components/sprite-component";
    import { EditBoxImpl } from "cocos/3d/ui/components/editbox/edit-box-impl";
    import { InputFlag, InputMode, KeyboardReturnType } from "cocos/3d/ui/components/editbox/types";
    /**
     * !#en cc.EditBox is a component for inputing text, you can use it to gather small amounts of text from users.
     * !#zh EditBox 组件，用于获取用户的输入文本。
     * @class EditBox
     * @extends Component
     */
    export class EditBoxComponent extends Component {
        /**
         * !#en Input string of EditBox.
         * !#zh 输入框的初始输入内容，如果为空则会显示占位符的文本。
         * @property {String} string
         */
        string: string;
        /**
         * !#en The background image of EditBox.
         * !#zh 输入框的背景图片
         * @property {SpriteFrame} backgroundImage
         */
        backgroundImage: SpriteFrame | null;
        /**
         * !#en
         * The return key type of EditBox.
         * Note: it is meaningless for web platforms and desktop platforms.
         * !#zh
         * 指定移动设备上面回车按钮的样式。
         * 注意：这个选项对 web 平台与 desktop 平台无效。
         * @property {EditBox.KeyboardReturnType} returnType
         * @default KeyboardReturnType.DEFAULT
         */
        returnType: KeyboardReturnType;
        /**
         * !#en Set the input flags that are to be applied to the EditBox.
         * !#zh 指定输入标志位，可以指定输入方式为密码或者单词首字母大写。
         * @property {EditBox.InputFlag} inputFlag
         * @default InputFlag.DEFAULT
         */
        inputFlag: InputFlag;
        /**
         * !#en
         * Set the input mode of the edit box.
         * If you pass ANY, it will create a multiline EditBox.
         * !#zh
         * 指定输入模式: ANY表示多行输入，其它都是单行输入，移动平台上还可以指定键盘样式。
         * @property {EditBox.InputMode} inputMode
         * @default InputMode.ANY
         */
        inputMode: InputMode;
        /**
         * !#en Font size of the input text.
         * !#zh 输入框文本的字体大小
         * @property {Number} fontSize
         */
        fontSize: number;
        /**
         * !#en Change the lineHeight of displayed text.
         * !#zh 输入框文本的行高。
         * @property {Number} lineHeight
         */
        lineHeight: number;
        /**
         * !#en Font color of the input text.
         * !#zh 输入框文本的颜色。
         * @property {Color} fontColor
         */
        fontColor: Color;
        /**
         * !#en The display text of placeholder.
         * !#zh 输入框占位符的文本内容。
         * @property {String} placeholder
         */
        placeholder: string;
        /**
         * !#en The font size of placeholder.
         * !#zh 输入框占位符的字体大小。
         * @property {Number} placeholderFontSize
         */
        placeholderFontSize: number;
        /**
         * !#en The font color of placeholder.
         * !#zh 输入框占位符的字体颜色。
         * @property {Color} placeholderFontColor
         */
        placeholderFontColor: Color;
        /**
         * !#en The maximize input length of EditBox.
         * - If pass a value less than 0, it won't limit the input number of characters.
         * - If pass 0, it doesn't allow input any characters.
         * !#zh 输入框最大允许输入的字符个数。
         * - 如果值为小于 0 的值，则不会限制输入字符个数。
         * - 如果值为 0，则不允许用户进行任何输入。
         * @property {Number} maxLength
         */
        maxLength: number;
        /**
         * !#en The input is always visible and be on top of the game view (only useful on Web).
         * !zh 输入框总是可见，并且永远在游戏视图的上面（这个属性只有在 Web 上面修改有意义）
         * Note: only available on Web at the moment.
         * @property {Boolean} stayOnTop
         */
        stayOnTop: boolean;
        /**
         * !#en Set the tabIndex of the DOM input element (only useful on Web).
         * !#zh 修改 DOM 输入元素的 tabIndex（这个属性只有在 Web 上面修改有意义）。
         * @property {Number} tabIndex
         */
        tabIndex: number;
        static _EditBoxImpl: typeof EditBoxImpl;
        static KeyboardReturnType: typeof KeyboardReturnType;
        static InputFlag: typeof InputFlag;
        static InputMode: typeof InputMode;
        /**
         * !#en The event handler to be called when EditBox began to edit text.
         * !#zh 开始编辑文本输入框触发的事件回调。
         * @property {Component.EventHandler[]} editingDidBegan
         */
        editingDidBegan: ComponentEventHandler[];
        /**
         * !#en The event handler to be called when EditBox text changes.
         * !#zh 编辑文本输入框时触发的事件回调。
         * @property {Component.EventHandler[]} textChanged
         */
        textChanged: ComponentEventHandler[];
        /**
         * !#en The event handler to be called when EditBox edit ends.
         * !#zh 结束编辑文本输入框时触发的事件回调。
         * @property {Component.EventHandler[]} editingDidEnded
         */
        editingDidEnded: ComponentEventHandler[];
        /**
         * !#en The event handler to be called when return key is pressed. Windows is not supported.
         * !#zh 当用户按下回车按键时的事件回调，目前不支持 windows 平台
         * @property {Component.EventHandler[]} editingReturn
         */
        editingReturn: ComponentEventHandler[];
        _impl: EditBoxImpl | null;
        _textLabel: LabelComponent | null;
        _placeholderLabel: LabelComponent | null;
        _background: SpriteComponent | null;
        private _returnType;
        private _useOriginalSize;
        private _string;
        private _tabIndex;
        private _backgroundImage;
        private _inputFlag;
        private _inputMode;
        private _fontSize;
        private _lineHeight;
        private _maxLength;
        private _fontColor;
        private _placeholder;
        private _placeholderFontSize;
        private _placeholderFontColor;
        private _stayOnTop;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        _init(): void;
        __preload(): void;
        _registerEvent(): void;
        _updateStayOnTop(): void;
        _syncSize(): void;
        _updateLabelPosition(size: any): void;
        _createBackgroundSprite(): void;
        _createLabels(): void;
        _resizeChildNodes(): void;
        _showLabels(): void;
        _hideLabels(): void;
        _updateString(text: any): void;
        _updateLabelStringStyle(text: string, ignorePassword?: boolean): string;
        editBoxEditingDidBegan(): void;
        editBoxEditingDidEnded(): void;
        editBoxTextChanged(text: any): void;
        editBoxEditingReturn(): void;
        _onTouchBegan(event: any): void;
        _onTouchCancel(event: any): void;
        _onTouchEnded(event: any): void;
        /**
         * !#en Let the EditBox get focus
         * !#zh 让当前 EditBox 获得焦点
         * @method setFocus
         */
        setFocus(): void;
        /**
         * !#en Determine whether EditBox is getting focus or not.
         * !#zh 判断 EditBox 是否获得了焦点
         * Note: only available on Web at the moment.
         * @method isFocused
         */
        isFocused(): boolean;
        update(): void;
    }
}
declare module "cocos/3d/ui/components/layout-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component } from "cocos/components/component";
    import { Size } from "cocos/core/value-types/index";
    /**
     * @zh
     * 布局类型。
     */
    enum Type {
        /**
         * @zh
         * 取消布局。
         */
        NONE = 0,
        /**
         * @zh
         * 水平布局。
         */
        HORIZONTAL = 1,
        /**
         * @zh
         * 垂直布局。
         */
        VERTICAL = 2,
        /**
         * @zh
         * 网格布局。
         */
        GRID = 3
    }
    /**
     * @zh
     * 缩放模式
     */
    enum ResizeMode {
        /**
         * @zh
         * 不做任何缩放。
         */
        NONE = 0,
        /**
         * @zh
         * 容器的大小会根据子节点的大小自动缩放。
         */
        CONTAINER = 1,
        /**
         * @zh
         * 子节点的大小会随着容器的大小自动缩放。
         */
        CHILDREN = 2
    }
    /**
     * @zh
     * 布局轴向，只用于 GRID 布局。
     */
    enum AxisDirection {
        /**
         * @zh
         * 进行水平方向布局。
         */
        HORIZONTAL = 0,
        /**
         * @zh
         * 进行垂直方向布局。
         */
        VERTICAL = 1
    }
    /**
     * @zh
     * 垂直方向布局方式。
     */
    enum VerticalDirection {
        /**
         * @zh
         * 从下到上排列。
         */
        BOTTOM_TO_TOP = 0,
        /**
         * @zh
         * 从上到下排列。
         */
        TOP_TO_BOTTOM = 1
    }
    /**
     * @zh
     * 水平方向布局方式。
     */
    enum HorizontalDirection {
        /**
         * @zh
         * 从左往右排列。
         */
        LEFT_TO_RIGHT = 0,
        /**
         * @zh
         * 从右往左排列。
         */
        RIGHT_TO_LEFT = 1
    }
    /**
     * @zh
     * Layout 组件相当于一个容器，能自动对它的所有子节点进行统一排版。<br>
     * 注意：<br>
     * 1.不会考虑子节点的缩放和旋转。<br>
     * 2.对 Layout 设置后结果需要到下一帧才会更新，除非你设置完以后手动调用 [[updateLayout]]
     */
    export class LayoutComponent extends Component {
        /**
         * @zh
         * 布局类型。
         */
        type: Type;
        /**
         * @zh
         * 缩放模式。
         */
        resizeMode: ResizeMode;
        /**
         * @zh
         * 每个格子的大小，只有布局类型为 GRID 的时候才有效。
         */
        cellSize: Size;
        /**
         * @zh
         * 起始轴方向类型，可进行水平和垂直布局排列，只有布局类型为 GRID 的时候才有效。
         */
        startAxis: AxisDirection;
        /**
         * @zh
         * 容器内左边距，只会在一个布局方向上生效。
         */
        paddingLeft: number;
        /**
         * @zh
         * 容器内右边距，只会在一个布局方向上生效。
         */
        paddingRight: number;
        /**
         * @zh
         * 容器内上边距，只会在一个布局方向上生效。
         */
        paddingTop: number;
        /**
         * @zh
         * 容器内下边距，只会在一个布局方向上生效。
         */
        paddingBottom: number;
        /**
         * @zh
         * 子节点之间的水平间距。
         */
        spacingX: number;
        /**
         * @zh
         * 子节点之间的垂直间距。
         */
        spacingY: number;
        /**
         * @zh
         * 垂直排列子节点的方向。
         */
        verticalDirection: VerticalDirection;
        /**
         * @zh
         * 水平排列子节点的方向。
         */
        horizontalDirection: HorizontalDirection;
        /**
         * @zh
         * 容器内边距，该属性会在四个布局方向上生效。
         */
        padding: number;
        /**
         * @zh
         * 子节点缩放比例是否影响布局。
         */
        affectedByScale: boolean;
        static Type: typeof Type;
        static VerticalDirection: typeof VerticalDirection;
        static HorizontalDirection: typeof HorizontalDirection;
        static ResizeMode: typeof ResizeMode;
        static AxisDirection: typeof AxisDirection;
        private _layoutDirty;
        private _resizeMode;
        private _N$layoutType;
        private _N$padding;
        private _cellSize;
        private _startAxis;
        private _paddingLeft;
        private _paddingRight;
        private _paddingTop;
        private _paddingBottom;
        private _spacingX;
        private _spacingY;
        private _layoutSize;
        private _verticalDirection;
        private _horizontalDirection;
        private _affectedByScale;
        /**
         * @zh
         * 立即执行更新布局
         *
         * @example
         * ```ts
         * layout.type = cc.Layout.HORIZONTAL;
         * layout.node.addChild(childNode);
         * cc.log(childNode.x); // not yet changed
         * layout.updateLayout();
         * cc.log(childNode.x); // changed
         * ```
         */
        updateLayout(): void;
        protected onEnable(): void;
        protected onDisable(): void;
        private _migratePaddingData;
        private _addEventListeners;
        private _removeEventListeners;
        private _addChildrenEventListeners;
        private _removeChildrenEventListeners;
        private _childAdded;
        private _childRemoved;
        private _resized;
        private _doLayoutHorizontally;
        private _doLayoutVertically;
        private _doLayoutBasic;
        private _doLayoutGridAxisHorizontal;
        private _doLayoutGridAxisVertical;
        private _doLayoutGrid;
        private _getHorizontalBaseWidth;
        private _getVerticalBaseHeight;
        private _doLayout;
        private _getUsedScaleValue;
        private _doLayoutDirty;
        private _doScaleDirty;
    }
}
declare module "cocos/3d/ui/assembler/graphics/types" {
    /**
     * !#en Enum for LineCap.
     * !#zh 线段末端属性
     * @enum Graphics.LineCap
     */
    export enum LineCap {
        /**
         * !#en The ends of lines are squared off at the endpoints.
         * !#zh 线段末端以方形结束。
         * @property {Number} BUTT
         */
        BUTT = 0,
        /**
         * !#en The ends of lines are rounded.
         * !#zh 线段末端以圆形结束。
         * @property {Number} ROUND
         */
        ROUND = 1,
        /**
         * !#en The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.
         * !#zh 线段末端以方形结束，但是增加了一个宽度和线段相同，高度是线段厚度一半的矩形区域。
         * @property {Number} SQUARE
         */
        SQUARE = 2
    }
    /**
     * !#en Enum for LineJoin.
     * !#zh 线段拐角属性
     * @enum Graphics.LineJoin
     */
    export enum LineJoin {
        /**
         * !#en Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.
         * !#zh 在相连部分的末端填充一个额外的以三角形为底的区域， 每个部分都有各自独立的矩形拐角。
         * @property {Number} BEVEL
         */
        BEVEL = 0,
        /**
         * !#en Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments.
         * The radius for these rounded corners is equal to the line width.
         * !#zh 通过填充一个额外的，圆心在相连部分末端的扇形，绘制拐角的形状。 圆角的半径是线段的宽度。
         * @property {Number} ROUND
         */
        ROUND = 1,
        /**
         * !#en Connected segments are joined by extending their outside edges to connect at a single point,
         * with the effect of filling an additional lozenge-shaped area.
         * !#zh 通过延伸相连部分的外边缘，使其相交于一点，形成一个额外的菱形区域。
         * @property {Number} MITER
         */
        MITER = 2
    }
    export enum PointFlags {
        PT_CORNER = 1,
        PT_LEFT = 2,
        PT_BEVEL = 4,
        PT_INNERBEVEL = 8
    }
}
declare module "cocos/3d/ui/assembler/graphics/helper" {
    import { Impl } from "cocos/3d/ui/assembler/graphics/webgl/impl";
    export function arc(ctx: Impl, cx: number, cy: number, r: number, startAngle: number, endAngle: number, counterclockwise: boolean): void;
    export function ellipse(ctx: Impl, cx: number, cy: number, rx: number, ry: number): void;
    export function roundRect(ctx: Impl, x: number, y: number, w: number, h: number, r: number): void;
    export function tesselateBezier(ctx: Impl, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number, level: number, type: number): void;
}
declare module "cocos/3d/ui/assembler/graphics/webgl/impl" {
    import { Color, Vec2 } from "cocos/core/value-types/index";
    import { IARenderData } from "cocos/renderer/ui/renderData";
    import { LineCap, LineJoin, PointFlags } from "cocos/3d/ui/assembler/graphics/types";
    export class Point extends Vec2 {
        dx: number;
        dy: number;
        dmx: number;
        dmy: number;
        flags: number;
        len: number;
        constructor(x: number, y: number);
        reset(): void;
    }
    export class Path {
        closed: boolean;
        nbevel: number;
        complex: boolean;
        points: Point[];
        constructor();
        reset(): void;
    }
    export class Impl {
        dataOffset: number;
        updatePathOffset: boolean;
        pathLength: number;
        pathOffset: number;
        paths: Path[];
        tessTol: number;
        distTol: number;
        fillColor: Color;
        lineCap: LineCap;
        strokeColor: Color;
        lineJoin: LineJoin;
        lineWidth: number;
        pointsOffset: number;
        private _commandx;
        private _commandy;
        private _points;
        private _renderDatasPool;
        private _renderDatas;
        private _curPath;
        moveTo(x: number, y: number): void;
        lineTo(x: number, y: number): void;
        bezierCurveTo(c1x: number, c1y: number, c2x: number, c2y: number, x: number, y: number): void;
        quadraticCurveTo(cx: number, cy: number, x: number, y: number): void;
        arc(cx: number, cy: number, r: number, startAngle: number, endAngle: number, counterclockwise: boolean): void;
        ellipse(cx: number, cy: number, rx: number, ry: number): void;
        circle(cx: number, cy: number, r: number): void;
        rect(x: number, y: number, w: number, h: number): void;
        roundRect(x: number, y: number, w: number, h: number, r: number): void;
        clear(clean?: boolean): void;
        close(): void;
        requestRenderData(): IARenderData;
        getRenderDatas(): IARenderData[];
        addPoint(x: number, y: number, flags: PointFlags): void;
        private _addPath;
    }
}
declare module "cocos/3d/ui/components/graphics-component" {
    import { Color } from "cocos/core/value-types/index";
    import { UI } from "cocos/renderer/ui/ui";
    import { LineCap, LineJoin } from "cocos/3d/ui/assembler/graphics/types";
    import { Impl } from "cocos/3d/ui/assembler/graphics/webgl/impl";
    import { UIRenderComponent } from "cocos/3d/ui/components/ui-render-component";
    /**
     * @class Graphics
     * @extends Component
     */
    export class GraphicsComponent extends UIRenderComponent {
        /**
         * @zh
         * 当前线条宽度。
         */
        lineWidth: number;
        /**
         * @zh
         * lineJoin 用来设置2个长度不为0的相连部分（线段，圆弧，曲线）如何连接在一起的属性。
         */
        lineJoin: LineJoin;
        /**
         * @zh
         * lineCap 指定如何绘制每一条线段末端。
         */
        lineCap: LineCap;
        /**
         * @zh
         * 线段颜色。
         */
        strokeColor: Color;
        /**
         * @zh
         * 填充颜色。
         */
        fillColor: Color;
        /**
         * @zh
         * 设置斜接面限制比例。
         */
        miterLimit: number;
        readonly color: Color;
        static LineJoin: typeof LineJoin;
        static LineCap: typeof LineCap;
        impl: Impl | null;
        private _lineWidth;
        private _strokeColor;
        private _lineJoin;
        private _lineCap;
        private _fillColor;
        private _miterLimit;
        constructor();
        onRestore(): void;
        __preload(): void;
        onEnable(): void;
        onDestroy(): void;
        _activateMaterial(): void;
        /**
         * @zh
         * 移动路径起点到坐标(x, y)
         *
         * @param x - 移动坐标 x 轴。
         * @param y - 移动坐标 y 轴。
         */
        moveTo(x: number, y: number): void;
        /**
         * @zh
         * 绘制直线路径
         *
         * @param x - 绘制路径坐标 x 轴。
         * @param y - 绘制路径坐标 y 轴。
         */
        lineTo(x: number, y: number): void;
        /**
         * @zh
         * 绘制三次贝赛尔曲线路径
         *
         * @param c1x - 第一个控制点的坐标 x 轴。
         * @param c1y - 第一个控制点的坐标 y 轴。
         * @param c2x - 第二个控制点的坐标 x 轴。
         * @param c2y - 第二个控制点的坐标 y 轴。
         * @param x - 最后一个控制点的坐标 x 轴。
         * @param y - 最后一个控制点的坐标 y 轴。
         */
        bezierCurveTo(c1x: number, c1y: number, c2x: number, c2y: number, x: number, y: number): void;
        /**
         * @zh
         * 绘制二次贝赛尔曲线路径
         *
         * @param cx - 起始控制点的坐标 x 轴。
         * @param cy - 起始控制点的坐标 y 轴。
         * @param x - 终点控制点的坐标 x 轴。
         * @param y - 终点控制点的坐标 x 轴。
         */
        quadraticCurveTo(cx: number, cy: number, x: number, y: number): void;
        /**
         * @zh
         * 绘制圆弧路径。圆弧路径的圆心在 (cx, cy) 位置，半径为 r ，根据 counterclockwise （默认为false）指定的方向从 startAngle 开始绘制，到 endAngle 结束。
         *
         * @param cx - 中心控制点的坐标 x 轴。
         * @param cy - 中心控制点的坐标 y 轴。
         * @param r - 圆弧弧度。
         * @param startAngle - 开始弧度，从正 x 轴顺时针方向测量。
         * @param endAngle - 结束弧度，从正 x 轴顺时针方向测量。
         * @param counterclockwise 如果为真，在两个角度之间逆时针绘制。默认顺时针。
         */
        arc(cx: number, cy: number, r: number, startAngle: number, endAngle: number, counterclockwise: boolean): void;
        /**
         * @zh
         * 绘制椭圆路径。
         *
         * @param cx - 中心点的坐标 x 轴。
         * @param cy - 中心点的坐标 y 轴。
         * @param rx - 椭圆 x 轴半径。
         * @param ry - 椭圆 y 轴半径。
         */
        ellipse(cx: number, cy: number, rx: number, ry: number): void;
        /**
         * @zh
         * 绘制圆形路径。
         *
         * @param cx - 中心点的坐标 x 轴。
         * @param cy - 中心点的坐标 y 轴。
         * @param r - 圆半径
         */
        circle(cx: number, cy: number, r: number): void;
        /**
         * @zh
         * 绘制矩形路径。
         *
         * @param x - 矩形起始坐标 x 轴。
         * @param y - 矩形起始坐标 y 轴。
         * @param w - 矩形宽度。
         * @param h - 矩形高度。
         */
        rect(x: number, y: number, w: number, h: number): void;
        /**
         * @zh
         * 绘制圆角矩形路径。
         *
         * @param x - 矩形起始坐标 x 轴。
         * @param y - 矩形起始坐标 y 轴。
         * @param w - 矩形宽度。
         * @param h - 矩形高度。
         * @param r - 矩形圆角半径。
         */
        roundRect(x: number, y: number, w: number, h: number, r: number): void;
        /**
         * @zh
         * 绘制填充矩形。
         *
         * @param x - 矩形起始坐标 x 轴。
         * @param y - 矩形起始坐标 y 轴。
         * @param w - 矩形宽度。
         * @param h - 矩形高度。
         */
        fillRect(x: any, y: any, w: any, h: any): void;
        /**
         * @zh
         * 擦除之前绘制的所有内容的方法。
         */
        clear(): void;
        /**
         * @zh
         * 将笔点返回到当前路径起始点的。它尝试从当前点到起始点绘制一条直线。
         */
        close(): void;
        /**
         * @zh
         * 根据当前的画线样式，绘制当前或已经存在的路径。
         */
        stroke(): void;
        /**
         * @zh
         * 根据当前的画线样式，填充当前或已经存在的路径。
         */
        fill(): void;
        updateAssembler(render: UI): boolean;
        /**
         * @zh
         * 辅助材质实例化。可用于只取数据而无实体情况下渲染使用。特殊情况可参考：[[_instanceMaterial]]
         */
        helpInstanceMaterial(): void;
        protected _flushAssembler(): void;
    }
}
declare module "cocos/3d/ui/components/mask-component" {
    import { Vec2 } from "cocos/core/value-types/index";
    import { UI } from "cocos/renderer/ui/ui";
    import { GraphicsComponent } from "cocos/3d/ui/components/graphics-component";
    import { UIRenderComponent } from "cocos/3d/ui/components/ui-render-component";
    /**
     * @zh 遮罩组件类型
     */
    export enum MaskType {
        /**
         * @zh
         * 使用矩形作为遮罩
         */
        RECT = 0,
        /**
         * @zh
         * 使用椭圆作为遮罩
         */
        ELLIPSE = 1
    }
    /**
     * @zh
     * 遮罩组件。
     */
    export class MaskComponent extends UIRenderComponent {
        /**
         * @zh
         * 遮罩类型。
         */
        type: MaskType;
        /**
         * @zh 遮罩所需要的贴图
         */
        /**
         * @zh
         * Alpha 阈值（不支持 Canvas 模式）<br/>
         * 只有当模板的像素的 alpha 大于 alphaThreshold 时，才会绘制内容。<br/>
         * 该数值 0 ~ 1 之间的浮点数，默认值为 0（因此禁用 alpha 测试）<br/>
         * 当被设置为 1 时，会丢弃所有蒙版像素，所以不会显示任何内容，在之前的版本中，设置为 1 等同于 0，这种效果其实是不正确的。<br/>
         */
        /**
         * @zh
         * 反向遮罩（不支持 Canvas 模式）。
         */
        /**
         * TODO: remove segments, not supported by graphics
         * @zh
         * 椭圆遮罩的曲线细分数。
         */
        segments: number;
        readonly graphics: GraphicsComponent | null;
        readonly clearGraphics: GraphicsComponent | null;
        readonly dstBlendFactor: import("cocos/gfx/define").GFXBlendFactor;
        readonly srcBlendFactor: import("cocos/gfx/define").GFXBlendFactor;
        readonly color: import("cocos/core/value-types").Color;
        static Type: typeof MaskType;
        private _type;
        private _segments;
        private _graphics;
        private _clearGraphics;
        constructor();
        onLoad(): void;
        /**
         * @zh
         * 图形内容重塑
         */
        onRestore(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        updateAssembler(render: UI): boolean;
        postUpdateAssembler(render: UI): void;
        /**
         * @zh
         * 根据屏幕坐标计算点击事件
         *
         * @param cameraPt  屏幕点转换到相机坐标系下的点
         */
        isHit(cameraPt: Vec2): boolean;
        _resizeNodeToTargetNode(): void;
        protected _nodeStateChange(): void;
        protected _canRender(): boolean;
        protected _flushAssembler(): void;
        private _onTextureLoaded;
        private _applySpriteFrame;
        private _createGraphics;
        private _updateGraphics;
        private _removeGraphics;
        private _activateMaterial;
    }
}
declare module "cocos/3d/ui/components/progress-bar-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component } from "cocos/components/index";
    import { SpriteComponent } from "cocos/3d/ui/components/sprite-component";
    /**
     * @zh
     * 进度条模式
     */
    enum Mode {
        /**
         * @zh
         * 水平方向模式。
         */
        HORIZONTAL = 0,
        /**
         * @zh
         *  垂直方向模式。
         */
        VERTICAL = 1,
        /**
         * @zh
         * 填充模式。
         */
        FILLED = 2
    }
    /**
     * @zh
     * 进度条组件，可用于显示加载资源时的进度。
     * @example
     * ```ts
     * // update progressBar
     * update(dt) {
     *     var progress = progressBar.progress;
     *     if (progress > 0) {
     *         progress += dt;
     *     }
     *     else {
     *         progress = 1;
     *     }
     *     progressBar.progress = progress;
     * }
     * ```
     */
    export class ProgressBarComponent extends Component {
        /**
         * @zh
         * 用来显示进度条比例的 Sprite 对象。
         */
        barSprite: SpriteComponent | null;
        /**
         * @zh
         * 进度条的模式。
         */
        mode: Mode;
        /**
         * @zh
         * 进度条实际的总长度
         */
        totalLength: number;
        /**
         * @zh
         * 当前进度值，该数值的区间是 0-1 之间。
         */
        progress: number;
        /**
         * @zh
         * 进度条是否进行反方向变化。
         */
        reverse: boolean;
        static Mode: typeof Mode;
        private _barSprite;
        private _mode;
        private _totalLength;
        private _progress;
        private _reverse;
        private _initBarSprite;
        private _updateBarStatus;
    }
}
declare module "cocos/3d/ui/components/label-outline-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component } from "cocos/components/index";
    import { Color } from "cocos/core/value-types/index";
    /**
     * @zh
     * 描边效果组件,用于字体描边,只能用于系统字体
     *
     * @example
     * ```ts
     *  // Create a new node and add label components.
     *  var node = new cc.Node("New Label");
     *  var label = node.addComponent(cc.Label);
     *  var outline = node.addComponent(cc.LabelOutline);
     *  node.parent = this.node;
     * ```
     */
    export class LabelOutlineComponent extends Component {
        private _color;
        private _width;
        /**
         * @zh
         * 改变描边的颜色。
         *
         * @example
         * ```ts
         * outline.color = new cc.Color(0.5, 0.3, 0.7, 1.0);
         * ```
         */
        color: Color;
        /**
         * @zh
         * 改变描边的宽度。
         *
         * @example
         * ```ts
         * outline.width = 3;
         * ```
         */
        width: number;
        private _updateRenderData;
    }
}
declare module "cocos/3d/ui/components/rich-text-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { SpriteAtlas, TTFFont } from "cocos/assets/index";
    import { HorizontalTextAlignment, VerticalTextAlignment } from "cocos/3d/ui/components/label-component";
    import { UIComponent } from "cocos/3d/ui/components/ui-component";
    /**
     * @zh
     * 富文本组件
     */
    export class RichTextComponent extends UIComponent {
        /**
         * @zh
         * 富文本显示的文本内容。
         */
        string: string;
        /**
         * @zh
         * 文本内容的水平对齐方式。
         */
        horizontalAlign: HorizontalTextAlignment;
        /**
         * @zh
         * 富文本字体大小。
         */
        fontSize: number;
        /**
         * @zh
         * 富文本定制字体
         */
        font: TTFFont | null;
        /**
         * @zh
         * 富文本的最大宽度
         */
        maxWidth: number;
        /**
         * @zh
         * 富文本行高。
         */
        lineHeight: number;
        /**
         * @zh
         * 对于 img 标签里面的 src 属性名称，都需要在 imageAtlas 里面找到一个有效的 spriteFrame，否则 img tag 会判定为无效。
         */
        imageAtlas: SpriteAtlas | null;
        /**
         * @zh
         * 选中此选项后，RichText 将阻止节点边界框中的所有输入事件（鼠标和触摸），从而防止输入事件穿透到底层节点。
         */
        handleTouchEvent: boolean;
        static HorizontalAlign: typeof HorizontalTextAlignment;
        static VerticalAlign: typeof VerticalTextAlignment;
        private _lineHeight;
        private _string;
        private _horizontalAlign;
        private _fontSize;
        private _maxWidth;
        private _font;
        private _imageAtlas;
        private _handleTouchEvent;
        private _textArray;
        private _labelSegments;
        private _labelSegmentsCache;
        private _linesWidth;
        private _lineCount;
        private _labelWidth;
        private _labelHeight;
        private _layoutDirty;
        private _lineOffsetX;
        private _updateRichTextStatus;
        constructor();
        onEnable(): void;
        onDisable(): void;
        start(): void;
        onRestore(): void;
        onDestroy(): void;
        private _addEventListeners;
        private _removeEventListeners;
        private _updateLabelSegmentTextAttributes;
        private _createFontLabel;
        private _onTTFLoaded;
        private _measureText;
        private _onTouchEnded;
        private _containsTouchLocation;
        private _resetState;
        private _activateChildren;
        private _addLabelSegment;
        private _updateRichTextWithMaxWidth;
        private _isLastComponentCR;
        private _updateLineInfo;
        private _needsUpdateTextLayout;
        private _addRichTextImageElement;
        private _updateRichText;
        private _getFirstWordLen;
        private _updateRichTextPosition;
        private _convertLiteralColorValue;
        private _applyTextAttribute;
    }
}
declare module "cocos/3d/ui/components/view-group-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    /**
     * !#zh
     * ViewGroup的事件处理比较特殊，因为 ViewGroup 里面的子节点关心的事件跟 ViewGroup 本身可能不一样。
     * 为了让子节点能够正确地处理事件，ViewGroup 需要注册 capture 阶段的事件，并且合理地处理 ViewGroup 之间的事件传递。
     * 请参考 ScrollView 的实现来获取更多信息。
     */
    import { Component } from "cocos/components/index";
    export class ViewGroupComponent extends Component {
    }
}
declare module "cocos/3d/ui/components/scroll-view-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { EventHandler as ComponentEventHandler } from "cocos/components/index";
    import { Vec2, Vec3 } from "cocos/core/value-types/index";
    import { Node } from "cocos/scene-graph/node";
    import { ScrollBarComponent } from "cocos/3d/ui/components/scroll-bar-component";
    import { ViewGroupComponent } from "cocos/3d/ui/components/view-group-component";
    /**
     * @zh
     * 滚动视图事件类型。
     */
    enum EventType {
        /**
         * @zh
         * 滚动视图滚动到顶部边界事件。
         */
        SCROLL_TO_TOP = 0,
        /**
         * @zh
         * 滚动视图滚动到底部边界事件。
         */
        SCROLL_TO_BOTTOM = 1,
        /**
         * @zh
         * 滚动视图滚动到左边界事件。
         */
        SCROLL_TO_LEFT = 2,
        /**
         * @zh
         * 滚动视图滚动到右边界事件。
         */
        SCROLL_TO_RIGHT = 3,
        /**
         * @zh
         * 滚动视图正在滚动时发出的事件。
         */
        SCROLLING = 4,
        /**
         * @zh
         * 滚动视图滚动到顶部边界并且开始回弹时发出的事件。
         */
        BOUNCE_TOP = 5,
        /**
         * @zh
         * 滚动视图滚动到底部边界并且开始回弹时发出的事件。
         */
        BOUNCE_BOTTOM = 6,
        /**
         * @zh
         * 滚动视图滚动到左边界并且开始回弹时发出的事件。
         */
        BOUNCE_LEFT = 7,
        /**
         * @zh
         * 滚动视图滚动到右边界并且开始回弹时发出的事件。
         */
        BOUNCE_RIGHT = 8,
        /**
         * @zh
         * 滚动视图滚动结束的时候发出的事件。
         */
        SCROLL_ENDED = 9,
        /**
         * @zh
         * 当用户松手的时候会发出一个事件。
         */
        TOUCH_UP = 10,
        /**
         * @zh
         * 滚动视图自动滚动快要结束的时候发出的事件。
         */
        AUTOSCROLL_ENDED_WITH_THRESHOLD = 11,
        /**
         * @zh
         * 滚动视图滚动开始时发出的事件。
         */
        SCROLL_BEGAN = 12
    }
    /**
     * @zh
     * 滚动视图组件
     */
    export class ScrollViewComponent extends ViewGroupComponent {
        /**
         * @zh
         * 可滚动展示内容的节点。
         */
        content: Node | null;
        /**
         * @zh
         * 水平滚动的 ScrollBar。
         */
        horizontalScrollBar: ScrollBarComponent | null;
        /**
         * @zh
         * 垂直滚动的 ScrollBar。
         */
        verticalScrollBar: ScrollBarComponent | null;
        readonly view: Node | null;
        static EventType: typeof EventType;
        /**
         * @zh
         * 是否开启水平滚动。
         */
        horizontal: boolean;
        /**
         * @zh
         * 是否开启垂直滚动。
         */
        vertical: boolean;
        /**
         * @zh
         * 是否开启滚动惯性。
         */
        inertia: boolean;
        /**
         * @zh
         * 开启惯性后，在用户停止触摸后滚动多快停止，0表示永不停止，1表示立刻停止。
         */
        brake: number;
        /**
         * @zh
         * 是否允许滚动内容超过边界，并在停止触摸后回弹。
         */
        elastic: boolean;
        /**
         * @zh
         * 回弹持续的时间，0 表示将立即反弹。
         */
        bounceDuration: number;
        /**
         * @zh
         * 滚动视图的事件回调函数.
         */
        scrollEvents: ComponentEventHandler[];
        /**
         * @zh
         * 如果这个属性被设置为 true，那么滚动行为会取消子节点上注册的触摸事件，默认被设置为 true。<br/>
         * 注意，子节点上的 touchstart 事件仍然会触发，触点移动距离非常短的情况下 touchmove 和 touchend 也不会受影响。
         */
        cancelInnerEvents: boolean;
        private _content;
        private _horizontalScrollBar;
        private _verticalScrollBar;
        private _topBoundary;
        private _bottomBoundary;
        private _leftBoundary;
        private _rightBoundary;
        private _touchMoveDisplacements;
        private _touchMoveTimeDeltas;
        private _touchMovePreviousTimestamp;
        private _touchMoved;
        private _autoScrolling;
        private _autoScrollAttenuate;
        private _autoScrollStartPosition;
        private _autoScrollTargetDelta;
        private _autoScrollTotalTime;
        private _autoScrollAccumulatedTime;
        private _autoScrollCurrentlyOutOfBoundary;
        private _autoScrollBraking;
        private _autoScrollBrakingStartPosition;
        private _outOfBoundaryAmount;
        private _outOfBoundaryAmountDirty;
        private _stopMouseWheel;
        private _mouseWheelEventElapsedTime;
        private _isScrollEndedWithThresholdEventFired;
        private _scrollEventEmitMask;
        private _isBouncing;
        private _scrolling;
        private _contentPos;
        private _deltaPos;
        /**
         * @zh
         * 视图内容将在规定时间内滚动到视图底部。
         *
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到底部边界。
         * @param attenuated - 滚动加速是否衰减，默认为 true.
         * @example
         * ```ts
         * // Scroll to the bottom of the view.
         * scrollView.scrollToBottom(0.1);
         * ```
         */
        scrollToBottom(timeInSecond: number, attenuated: boolean): void;
        /**
         * @zh
         * 视图内容将在规定时间内滚动到视图顶部。
         *
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到顶部边界。
         * @param attenuated - 滚动加速是否衰减，默认为 true.
         * @example
         * ```ts
         * // Scroll to the top of the view.
         * scrollView.scrollToTop(0.1);
         * ```
         */
        scrollToTop(timeInSecond: number, attenuated: boolean): void;
        /**
         * @zh
         * 视图内容将在规定时间内滚动到视图左边。
         *
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到左边边界。
         * @param attenuated - 滚动加速是否衰减，默认为 true。
         * @example
         * ```ts
         * // Scroll to the left of the view.
         * scrollView.scrollToLeft(0.1);
         * ```
         */
        scrollToLeft(timeInSecond: number, attenuated: boolean): void;
        /**
         * @zh
         * 视图内容将在规定时间内滚动到视图右边。
         *
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到右边边界。
         * @param attenuated - 滚动加速是否衰减，默认为 true。
         * @example
         * ```ts
         * // Scroll to the right of the view.
         * scrollView.scrollToRight(0.1);
         * ```
         */
        scrollToRight(timeInSecond: number, attenuated: boolean): void;
        /**
         * @zh
         * 视图内容将在规定时间内滚动到视图左上角。
         *
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到左上边边界。
         * @param attenuated - 滚动加速是否衰减，默认为 true。
         * @example
         * ```ts
         * // Scroll to the upper left corner of the view.
         * scrollView.scrollToTopLeft(0.1);
         * ```
         */
        scrollToTopLeft(timeInSecond: any, attenuated: any): void;
        /**
         * @zh
         * 视图内容将在规定时间内滚动到视图右上角。
         *
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到右上边界。
         * @param attenuated - 滚动加速是否衰减，默认为 true。
         * @example
         * ```ts
         * // Scroll to the top right corner of the view.
         * scrollView.scrollToTopRight(0.1);
         * ```
         */
        scrollToTopRight(timeInSecond: number, attenuated: boolean): void;
        /**
         * @zh
         * 视图内容将在规定时间内滚动到视图左下角。
         *
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到左下边界。
         * @param attenuated - 滚动加速是否衰减，默认为 true。
         * @example
         * ```ts
         * // Scroll to the lower left corner of the view.
         * scrollView.scrollToBottomLeft(0.1);
         * ```
         */
        scrollToBottomLeft(timeInSecond: number, attenuated: boolean): void;
        /**
         * @zh
         * 视图内容将在规定时间内滚动到视图右下角。
         *
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到右边下边界。
         * @param attenuated - 滚动加速是否衰减，默认为 true。
         * @example
         * ```ts
         * // Scroll to the lower right corner of the view.
         * scrollView.scrollToBottomRight(0.1);
         * ```
         */
        scrollToBottomRight(timeInSecond: number, attenuated: boolean): void;
        /**
         * @zh
         * 视图内容在规定时间内将滚动到 ScrollView 相对左上角原点的偏移位置, 如果 timeInSecond 参数不传，则立即滚动到指定偏移位置。
         *
         * @param offset - 指定移动偏移量。
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到指定偏移量处。
         * @param attenuated - 滚动加速是否衰减，默认为 true。
         * @example
         * ```ts
         * // Scroll to middle position in 0.1 second in x-axis
         * let maxScrollOffset = this.getMaxScrollOffset();
         * scrollView.scrollToOffset(new Vec3(maxScrollOffset.x / 2, 0, 0), 0.1);
         * ```
         */
        scrollToOffset(offset: Vec3, timeInSecond: number, attenuated: boolean): void;
        /**
         * @zh
         * 获取滚动视图相对于左上角原点的当前滚动偏移。
         *
         * @return - 当前滚动偏移量。
         */
        getScrollOffset(): Vec3;
        /**
         * @zh
         * 获取滚动视图最大可以滚动的偏移量
         *
         * @return - 最大可滚动偏移量.
         */
        getMaxScrollOffset(): Vec3;
        /**
         * @zh
         * 视图内容在规定时间内将滚动到 ScrollView 水平方向的百分比位置上。
         *
         * @param percent - 0 - 之间的百分比。
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到指定水平百分比位置。
         * @param attenuated - 滚动加速是否衰减，默认为 true。
         * @example
         * ```ts
         * // Scroll to middle position.
         * scrollView.scrollToBottomRight(0.5, 0.1);
         * ```
         */
        scrollToPercentHorizontal(percent: number, timeInSecond: number, attenuated: boolean): void;
        /**
         * @zh
         * 视图内容在规定时间内进行垂直方向和水平方向的滚动，并且滚动到指定百分比位置上。
         *
         * @param anchor - 在 new Vec2(0,0) and new Vec2(1,1) 上取差值的一个点.
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到指定水平或垂直百分比位置。
         * @param attenuated - 滚动加速是否衰减，默认为 true。
         * @example
         * ```ts
         * // Vertical scroll to the bottom of the view.
         * scrollView.scrollTo(new Vec2(0, 1), 0.1);
         *
         * // Horizontal scroll to view right.
         * scrollView.scrollTo(new Vec2(1, 0), 0.1);
         * ```
         */
        scrollTo(anchor: Vec2, timeInSecond: number, attenuated?: boolean): void;
        /**
         * @zh
         * 视图内容在规定时间内滚动到 ScrollView 垂直方向的百分比位置上。
         *
         * @param percent - 0 - 1 之间的百分比.
         * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到指定垂直百分比位置。
         * @param attenuated - 滚动加速是否衰减，默认为 true。
         * @example
         * ```ts
         * scrollView.scrollToPercentVertical(0.5, 0.1);
         * ```
         */
        scrollToPercentVertical(percent: number, timeInSecond: number, attenuated?: boolean): void;
        /**
         * @zh
         * 停止自动滚动, 调用此 API 可以让 Scrollview 立即停止滚动。
         */
        stopAutoScroll(): void;
        /**
         * @zh
         * 设置当前视图内容的坐标点。
         *
         * @param position - 当前视图坐标点.
         */
        setContentPosition(position: Vec3): void;
        /**
         * @zh
         * 获取当前视图内容的坐标点。
         *
         * @returns - 当前视图内容的坐标点.
         */
        getContentPosition(): Vec3;
        /**
         * @zh
         * 用户是否在拖拽当前滚动视图。
         *
         * @returns - 是否在拖拽当前滚动视图。
         */
        isScrolling(): boolean;
        /**
         * @zh
         * 当前滚动视图是否在惯性滚动。
         *
         * @returns - 滚动视图是否在惯性滚动。
         */
        isAutoScrolling(): boolean;
        getScrollEndedEventTiming(): number;
        start(): void;
        onEnable(): void;
        update(dt: number): void;
        onDisable(): void;
        private _registerEvent;
        private _unregisterEvent;
        /**
         * @zh
         * 鼠标滚轮事件。
         *
         * @param event - 鼠标事件信息。
         * @param captureListeners
         */
        private _onMouseWheel;
        private _onTouchBegan;
        private _onTouchMoved;
        private _onTouchEnded;
        private _onTouchCancelled;
        /**
         * @zh
         * 重新计算内容活动边界（view）
         */
        private _calculateBoundary;
        private _hasNestedViewGroup;
        private _startInertiaScroll;
        private _calculateAttenuatedFactor;
        private _startAttenuatingAutoScroll;
        private _calculateAutoScrollTimeByInitalSpeed;
        private _startAutoScroll;
        private _calculateTouchMoveVelocity;
        private _flattenVectorByDirection;
        private _moveContent;
        private _getContentLeftBoundary;
        private _getContentRightBoundary;
        private _getContentTopBoundary;
        private _getContentBottomBoundary;
        private _getHowMuchOutOfBoundary;
        private _updateScrollBar;
        private _onScrollBarTouchBegan;
        private _onScrollBarTouchEnded;
        private _dispatchEvent;
        private _adjustContentOutOfBoundary;
        private _hideScrollbar;
        private _showScrollbar;
        private _stopPropagationIfTargetIsMe;
        private _processDeltaMove;
        private _handleMoveLogic;
        private _scrollChildren;
        private _handlePressLogic;
        private _clampDelta;
        private _gatherTouchMove;
        private _startBounceBackIfNeeded;
        private _processInertiaScroll;
        private _handleReleaseLogic;
        private _isOutOfBoundary;
        private _isNecessaryAutoScrollBrake;
        private _processAutoScrolling;
        private _checkMouseWheel;
        private _calculateMovePercentDelta;
        /**
         * @zh
         *
         *
         * @param scrollViewSize - 可视区域尺寸。
         */
        private _moveContentToTopLeft;
    }
}
declare module "cocos/3d/ui/components/scroll-bar-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component } from "cocos/components/index";
    import { Vec3 } from "cocos/core/value-types/index";
    import { ScrollViewComponent } from "cocos/3d/ui/components/scroll-view-component";
    import { SpriteComponent } from "cocos/3d/ui/components/sprite-component";
    /**
     * @zh
     * 滚动条方向。
     */
    enum Direction {
        /**
         * @zh
         * 横向滚动。
         */
        HORIZONTAL = 0,
        /**
         * @zh
         * 纵向滚动。
         */
        VERTICAL = 1
    }
    /**
     * @zh
     * 滚动条组件。
     */
    export class ScrollBarComponent extends Component {
        /**
         * @zh
         * 作为当前滚动区域位置显示的滑块 Sprite。
         */
        handle: SpriteComponent | null;
        /**
         * @zh
         * ScrollBar 的滚动方向。
         */
        direction: Direction;
        /**
         * @zh
         * 是否在没有滚动动作时自动隐藏 ScrollBar。
         */
        enableAutoHide: boolean;
        /**
         * @zh
         * 没有滚动动作后经过多久会自动隐藏。<br/>
         * 注意：只要当 “enableAutoHide” 为 true 时，才有效。
         */
        autoHideTime: number;
        static Direction: typeof Direction;
        private _scrollView;
        private _handle;
        private _direction;
        private _enableAutoHide;
        private _autoHideTime;
        private _touching;
        private _opacity;
        private _autoHideRemainingTime;
        /**
         * @zh
         * 滚动条隐藏。
         */
        hide(): void;
        /**
         * @zh
         * 滚动条显示。
         */
        show(): void;
        /**
         * @zh
         * 重置滚动条位置
         *
         * @param outOfBoundary - 滚动位移
         */
        onScroll(outOfBoundary: Vec3): void;
        /**
         * @zh
         * 滚动视窗设置
         *
         * @param scrollView - 滚动视窗
         */
        setScrollView(scrollView: ScrollViewComponent): void;
        onTouchBegan(): void;
        onTouchEnded(): void;
        protected onEnable(): void;
        protected start(): void;
        protected update(dt: any): void;
        private _convertToScrollViewSpace;
        private _setOpacity;
        private _updateHanlderPosition;
        private _fixupHandlerPosition;
        private _conditionalDisableScrollBar;
        private _calculateLength;
        private _calculatePosition;
        private _updateLength;
        private _processAutoHide;
    }
}
declare module "cocos/3d/ui/components/slider-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component, EventHandler as ComponentEventHandler } from "cocos/components/index";
    import { SpriteComponent } from "cocos/3d/ui/components/sprite-component";
    /**
     * @zh
     * 滑动器方向
     */
    enum Direction {
        /**
         * @zh
         * 水平方向。
         */
        Horizontal = 0,
        /**
         * @zh
         * 垂直方向。
         */
        Vertical = 1
    }
    /**
     * @zh
     * 滑动器组件。
     */
    export class SliderComponent extends Component {
        /**
         * @zh
         * 滑动器滑块按钮部件。
         */
        handle: SpriteComponent | null;
        /**
         * @zh
         * 滑动器方向。
         */
        direction: number;
        /**
         * @zh
         * 当前进度值，该数值的区间是 0-1 之间。
         */
        progress: number;
        static Direction: typeof Direction;
        /**
         * @zh
         * 滑动器组件事件回调函数。
         */
        slideEvents: ComponentEventHandler[];
        private _handle;
        private _direction;
        private _progress;
        private _offset;
        private _dragging;
        private _touchHandle;
        private _handlelocalPos;
        private _touchPos;
        __preload(): void;
        onEnable(): void;
        onDisable(): void;
        private _onHandleDragStart;
        private _onTouchBegan;
        private _onTouchMoved;
        private _onTouchEnded;
        private _onTouchCancelled;
        private _handleSliderLogic;
        private _emitSlideEvent;
        private _updateProgress;
        private _updateHandlePosition;
    }
}
declare module "cocos/3d/ui/components/toggle-container-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component, EventHandler as ComponentEventHandler } from "cocos/components/index";
    import { ToggleComponent } from "cocos/3d/ui/components/toggle-component";
    /**
     * @zh
     * ToggleGroup 不是一个可见的 UI 组件，它可以用来修改一组 Toggle  组件的行为。当一组 Toggle 属于同一个 ToggleGroup 的时候，<br/>
     * 任何时候只能有一个 Toggle 处于选中状态。
     */
    export class ToggleContainerComponent extends Component {
        checkEvents: ComponentEventHandler[];
        private _allowSwitchOff;
        private _toggleItems;
        /**
         * @zh
         * 如果这个设置为 true，那么 toggle 按钮在被点击的时候可以反复地被选中和未选中。
         */
        allowSwitchOff: boolean;
        /**
         * @zh
         * 只读属性，返回 toggleGroup 管理的 toggle 数组引用。
         */
        readonly toggleItems: ToggleComponent[];
        start(): void;
        /**
         * @zh
         * 刷新管理的 toggle 状态。
         *
         * @param toggle - 需要被更新的 toggle。
         */
        updateToggles(toggle: ToggleComponent): void;
        /**
         * @zh
         * 添加需要被控制的 toggle。
         *
         * @param toggle - 被控制的 toggle。
         */
        addToggle(toggle: ToggleComponent): void;
        /**
         * @zh
         * 移除 toggle。
         *
         * @param toggle - 被移除控制的 toggle。
         */
        removeToggle(toggle: ToggleComponent): void;
        private _allowOnlyOneToggleChecked;
        private _makeAtLeastOneToggleChecked;
    }
}
declare module "cocos/3d/ui/components/toggle-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { EventHandler as ComponentEventHandler } from "cocos/components/index";
    import { ButtonComponent } from "cocos/3d/ui/components/button-component";
    import { SpriteComponent } from "cocos/3d/ui/components/sprite-component";
    import { ToggleContainerComponent } from "cocos/3d/ui/components/toggle-container-component";
    /**
     * @zh
     * Toggle 是一个 CheckBox，当它和 ToggleGroup 一起使用的时候，可以变成 RadioButton。
     */
    export class ToggleComponent extends ButtonComponent {
        /**
         * @zh
         * 如果这个设置为 true，则 check mark 组件会处于 enabled 状态，否则处于 disabled 状态。
         */
        isChecked: boolean;
        /**
         * @zh
         * Toggle 所属的 ToggleGroup，这个属性是可选的。如果这个属性为 null，则 Toggle 是一个 CheckBox，否则，Toggle 是一个 RadioButton。
         */
        toggleGroup: ToggleContainerComponent | null;
        /**
         * @zh
         * Toggle 处于选中状态时显示的图片
         */
        checkMark: SpriteComponent | null;
        _resizeToTarget: boolean;
        readonly _toggleContainer: null;
        /**
         * @zh
         * Toggle 按钮的点击事件列表。
         */
        checkEvents: ComponentEventHandler[];
        private _isChecked;
        private _toggleGroup;
        private _checkMark;
        onEnable(): void;
        onDisable(): void;
        /**
         * @zh
         * toggle 按钮切换。
         */
        toggle(): void;
        /**
         * @zh
         * 使 toggle 按钮处于选中状态。
         */
        check(): void;
        /**
         * @zh
         * 取消 toggle 按钮选中状态。
         */
        uncheck(): void;
        private _updateCheckMark;
        private _registerToggleEvent;
        private _unregisterToggleEvent;
        private _emitToggleEvents;
    }
}
declare module "cocos/3d/ui/components/ui-model-component" {
    import { UI } from "cocos/renderer/ui/ui";
    import { RenderableComponent } from "cocos/3d/framework/renderable-component";
    import { UIComponent } from "cocos/3d/ui/components/ui-component";
    /**
     * @zh
     * UI 模型基础类
     */
    export class UIModelComponent extends UIComponent {
        readonly modelComponent: RenderableComponent | null;
        private _modelComponent;
        onLoad(): void;
        onEnable(): void;
        updateAssembler(render: UI): boolean;
        update(): void;
        private _fitUIRenderQueue;
    }
}
declare module "cocos/3d/ui/components/webview/webview-impl" {
    import { Node } from "cocos/scene-graph/index";
    export enum WebViewEventType {
        LOADING = 0,
        LOADED = 1,
        ERROR = 2,
        JS_EVALUATED = 3
    }
    interface IPolyfill {
        devicePixelRatio: boolean;
        enableDiv: boolean;
        enableBG?: boolean;
        closeHistory?: boolean;
    }
    export class WebViewImpl {
        static Polyfill: IPolyfill;
        static EventType: typeof WebViewEventType;
        private _EventList;
        private _visible;
        private _div;
        private _iframe;
        private _forceUpdate;
        private _m00;
        private _m01;
        private _m04;
        private _m05;
        private _m12;
        private _m13;
        private _w;
        private _h;
        private _eventListeners;
        createDomElementIfNeeded(w: number, h: number): void;
        removeDom(): void;
        /**
         * Load an URL
         * @param {String} url
         */
        loadURL(url: string): void;
        /**
         * Stop loading
         */
        stopLoading(): void;
        /**
         * Reload the WebView
         */
        reload(): void;
        /**
         * Determine whether to go back
         */
        canGoBack(): boolean;
        /**
         * Determine whether to go forward
         */
        canGoForward(): boolean;
        /**
         * go back
         */
        goBack(): any;
        /**
         * go forward
         */
        goForward(): any;
        /**
         * In the webview execution within a period of js string
         * @param {String} str
         */
        evaluateJS(str: string): void;
        /**
         * Limited scale
         */
        setScalesPageToFit(): void;
        /**
         * The binding event
         * @param {WebViewImpl.EventType} event
         * @param {Function} callback
         */
        setEventListener(event: WebViewEventType, callback: Function): void;
        /**
         * Delete events
         * @param {WebViewImpl.EventType} event
         */
        removeEventListener(event: WebViewEventType): void;
        _dispatchEvent(event: WebViewEventType): void;
        destroy(): void;
        setVisible(visible: boolean): void;
        updateMatrix(node: Node): void;
        setOnJSCallback(callback: any): void;
        setJavascriptInterfaceScheme(scheme: any): void;
        loadData(data: any, MIMEType: any, encoding: any, baseURL: any): void;
        loadHTMLString(string: any, baseURL: any): void;
        private _updateVisibility;
        private _updateSize;
        private _initEvent;
        private _initStyle;
        private _setOpacity;
        private _createDom;
        private _createNativeControl;
    }
}
declare module "cocos/3d/ui/components/webview/webView-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { EventHandler } from "cocos/components/component-event-handler";
    import { UIComponent } from "cocos/3d/ui/components/ui-component";
    import { WebViewEventType } from "cocos/3d/ui/components/webview/webview-impl";
    /**
     * !#en cc.WebView is a component for display web pages in the game
     * !#zh WebView 组件，用于在游戏中显示网页
     * @class WebView
     * @extends Component
     */
    export class WebviewComponent extends UIComponent {
        /**
         * !#en A given URL to be loaded by the WebView, it should have a http or https prefix.
         * !#zh 指定 WebView 加载的网址，它应该是一个 http 或者 https 开头的字符串
         * @property {String} url
         */
        url: string;
        static EventType: typeof WebViewEventType;
        /**
         * !#en The webview's event callback , it will be triggered when certain webview event occurs.
         * !#zh WebView 的回调事件，当网页加载过程中，加载完成后或者加载出错时都会回调此函数
         * @property {Component.EventHandler[]} webviewLoadedEvents
         */
        webviewEvents: EventHandler[];
        private _url;
        private _impl;
        constructor();
        onRestore(): void;
        onEnable(): void;
        onDisable(): void;
        onDestroy(): void;
        update(dt: any): void;
        /**
         * !#en
         * Set javascript interface scheme (see also setOnJSCallback). <br/>
         * Note: Supports only on the Android and iOS. For HTML5, please refer to the official documentation.<br/>
         * Please refer to the official documentation for more details.
         * !#zh
         * 设置 JavaScript 接口方案（与 'setOnJSCallback' 配套使用）。<br/>
         * 注意：只支持 Android 和 iOS ，Web 端用法请前往官方文档查看。<br/>
         * 详情请参阅官方文档
         * @method setJavascriptInterfaceScheme
         * @param {String} scheme
         */
        setJavascriptInterfaceScheme(scheme: string): void;
        /**
         * !#en
         * This callback called when load URL that start with javascript
         * interface scheme (see also setJavascriptInterfaceScheme). <br/>
         * Note: Supports only on the Android and iOS. For HTML5, please refer to the official documentation.<br/>
         * Please refer to the official documentation for more details.
         * !#zh
         * 当加载 URL 以 JavaScript 接口方案开始时调用这个回调函数。<br/>
         * 注意：只支持 Android 和 iOS，Web 端用法请前往官方文档查看。
         * 详情请参阅官方文档
         * @method setOnJSCallback
         * @param {Function} callback
         */
        setOnJSCallback(callback: Function): void;
        /**
         * !#en
         * Evaluates JavaScript in the context of the currently displayed page. <br/>
         * Please refer to the official document for more details <br/>
         * Note: Cross domain issues need to be resolved by yourself <br/>
         * !#zh
         * 执行 WebView 内部页面脚本（详情请参阅官方文档） <br/>
         * 注意：需要自行解决跨域问题
         * @method evaluateJS
         * @param {String} str
         */
        evaluateJS(str: string): void;
        private _onWebViewLoaded;
        private _onWebViewLoading;
        private _onWebViewLoadError;
    }
}
declare module "cocos/3d/ui/components/widget-component" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import { Component } from "cocos/components/index";
    import { Node } from "cocos/scene-graph/node";
    /**
     * @zh
     * Widget 的对齐模式，表示 Widget 应该何时刷新。
     */
    export enum AlignMode {
        /**
         * @zh
         * 仅在 Widget 第一次激活时对齐一次，便于脚本或动画继续控制当前节点。<br/>
         * 开启后会在 onEnable 时所在的那一帧结束前对齐一次，然后立刻禁用该 Widget。
         */
        ONCE = 0,
        /**
         * @zh
         * 一开始会像 ONCE 一样对齐一次，之后每当窗口大小改变时还会重新对齐。
         */
        ON_WINDOW_RESIZE = 1,
        /**
         * @zh
         * 始终保持对齐。
         */
        ALWAYS = 2
    }
    /**
     * @zh
     * Widget 的对齐标志，表示 Widget 选择对齐状态。
     */
    export enum AlignFlags {
        /**
         * @zh
         * 上边对齐。
         */
        TOP = 1,
        /**
         * @zh
         * 垂直中心对齐。
         */
        MID = 2,
        /**
         * @zh
         * 下边对齐。
         */
        BOT = 4,
        /**
         * @zh
         * 左边对齐。
         */
        LEFT = 8,
        /**
         * @zh
         * 横向中心对齐。
         */
        CENTER = 16,
        /**
         * @zh
         * 右边对齐。
         */
        RIGHT = 32,
        /**
         * @zh
         * 横向对齐。
         */
        HORIZONTAL = 56,
        /**
         * @zh
         * 纵向对齐。
         */
        VERTICAL = 7
    }
    /**
     * @zh
     * Widget 组件，用于设置和适配其相对于父节点的边距，Widget 通常被用于 UI 界面，也可以用于其他地方。<br/>
     * Widget 会自动调整当前节点的坐标和宽高，不过目前调整后的结果要到下一帧才能在脚本里获取到，除非你先手动调用 [[updateAlignment]]
     */
    export class WidgetComponent extends Component {
        /**
         * @zh
         * 指定一个对齐目标，只能是当前节点的其中一个父节点，默认为空，为空时表示当前父节点。
         */
        target: Node | null;
        /**
         * @zh
         * 是否对齐上边。
         */
        isAlignTop: boolean;
        /**
         * @zh
         * 是否对齐下边。
         */
        isAlignBottom: boolean;
        /**
         * @zh
         * 是否对齐左边。
         */
        isAlignLeft: boolean;
        /**
         * @zh
         * 是否对齐右边。
         */
        isAlignRight: boolean;
        /**
         * @zh
         * 是否垂直方向对齐中点，开启此项会将垂直方向其他对齐选项取消。
         */
        isAlignVerticalCenter: boolean;
        /**
         * @zh
         * 是否水平方向对齐中点，开启此选项会将水平方向其他对齐选项取消。
         */
        isAlignHorizontalCenter: boolean;
        /**
         * @zh
         * 当前是否水平拉伸。当同时启用左右对齐时，节点将会被水平拉伸。此时节点的宽度（只读）。
         */
        readonly isStretchWidth: boolean;
        /**
         * @zh
         * 当前是否垂直拉伸。当同时启用上下对齐时，节点将会被垂直拉伸，此时节点的高度（只读）。
         */
        readonly isStretchHeight: boolean;
        /**
         * @zh
         * 本节点顶边和父节点顶边的距离，可填写负值，只有在 isAlignTop 开启时才有作用。
         */
        top: number;
        /**
         * @zh
         * 本节点底边和父节点底边的距离，可填写负值，只有在 isAlignBottom 开启时才有作用。
         */
        bottom: number;
        /**
         * @zh
         * 本节点左边和父节点左边的距离，可填写负值，只有在 isAlignLeft 开启时才有作用。
         */
        left: number;
        /**
         * @zh
         * 本节点右边和父节点右边的距离，可填写负值，只有在 isAlignRight 开启时才有作用。
         */
        right: number;
        /**
         * @zh
         * 水平居中的偏移值，可填写负值，只有在 isAlignHorizontalCenter 开启时才有作用。
         */
        horizontalCenter: number;
        /**
         * @zh
         * 垂直居中的偏移值，可填写负值，只有在 isAlignVerticalCenter 开启时才有作用。
         */
        verticalCenter: number;
        /**
         * @zh
         * 如果为 true，"top" 将会以像素作为边距，否则将会以相对父物体高度的百分比（0 到 1）作为边距。
         */
        isAbsoluteTop: boolean;
        /**
         * @zh
         * 如果为 true，"bottom" 将会以像素作为边距，否则将会以相对父物体高度的百分比（0 到 1）作为边距。
         */
        isAbsoluteBottom: boolean;
        /**
         * @zh
         * 如果为 true，"left" 将会以像素作为边距，否则将会以相对父物体宽度的百分比（0 到 1）作为边距。
         */
        isAbsoluteLeft: boolean;
        /**
         * @zh
         * 如果为 true，"right" 将会以像素作为边距，否则将会以相对父物体宽度的百分比（0 到 1）作为边距。
         */
        isAbsoluteRight: boolean;
        /**
         * @zh
         * 指定 Widget 的对齐模式，用于决定 Widget 应该何时刷新。
         *
         * @example
         * widget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;
         */
        alignMode: AlignMode;
        /**
         * @zh
         * 如果为 true，"horizontalCenter" 将会以像素作为偏移值，反之为百分比（0 到 1）。
         */
        isAbsoluteHorizontalCenter: boolean;
        /**
         * @zh
         * 如果为 true，"verticalCenter" 将会以像素作为偏移值，反之为百分比（0 到 1）。
         */
        isAbsoluteVerticalCenter: boolean;
        /**
         * @zh
         * 对齐开关，由 AlignFlags 组成
         */
        alignFlags: number;
        static AlignMode: typeof AlignMode;
        private _alignFlags;
        private _target;
        private _left;
        private _right;
        private _top;
        private _bottom;
        private _horizontalCenter;
        private _verticalCenter;
        private _isAbsLeft;
        private _isAbsRight;
        private _isAbsTop;
        private _isAbsBottom;
        private _isAbsHorizontalCenter;
        private _isAbsVerticalCenter;
        private _originalWidth;
        private _originalHeight;
        private _alignMode;
        /**
         * @zh
         * 立刻执行 widget 对齐操作。这个接口一般不需要手工调用。
         * 只有当你需要在当前帧结束前获得 widget 对齐后的最新结果时才需要手动调用这个方法。
         *
         * @example
         * ```ts
         * widget.top = 10;       // change top margin
         * cc.log(widget.node.y); // not yet changed
         * widget.updateAlignment();
         * cc.log(widget.node.y); // changed
         * ```
         */
        updateAlignment(): void;
        protected onLoad(): void;
        protected onEnable(): void;
        protected onDisable(): void;
        private _setAlign;
    }
}
declare module "cocos/3d/ui/components/widget-manager" {
    import { Vec3 } from "cocos/core/value-types/index";
    import { Node } from "cocos/scene-graph/node";
    import { AlignFlags, AlignMode, WidgetComponent } from "cocos/3d/ui/components/widget-component";
    export function getReadonlyNodeSize(parent: Node): any;
    export function computeInverseTransForTarget(widgetNode: Node, target: Node, out_inverseTranslate: Vec3, out_inverseScale: Vec3): void;
    function updateAlignment(node: Node): void;
    export const widgetManager: {
        isAligning: boolean;
        _nodesOrderDirty: boolean;
        _activeWidgetsIterator: import("cocos/core/utils/mutable-forward-iterator").default<WidgetComponent>;
        animationState: {
            previewing: boolean;
            time: number;
            animatedSinceLastFrame: boolean;
        } | null;
        init(director: any): void;
        add(widget: WidgetComponent): void;
        remove(widget: WidgetComponent): void;
        onResized(): void;
        refreshWidgetOnResized(node: Node): void;
        updateOffsetsToStayPut(widget: WidgetComponent, e?: AlignFlags | undefined): void;
        updateAlignment: typeof updateAlignment;
        AlignMode: typeof AlignMode;
        AlignFlags: typeof AlignFlags;
    };
}
declare module "cocos/3d/ui/components/index" {
    export { CanvasComponent } from "cocos/3d/ui/components/canvas-component";
    export { DebugCanvasComponent } from "cocos/3d/ui/components/debug-canvas-component";
    export { UIComponent } from "cocos/3d/ui/components/ui-component";
    export { ButtonComponent } from "cocos/3d/ui/components/button-component";
    export { EditBoxComponent } from "cocos/3d/ui/components/editbox/edit-box-component";
    export * from "cocos/3d/ui/components/label-component";
    export { LayoutComponent } from "cocos/3d/ui/components/layout-component";
    export { MaskComponent } from "cocos/3d/ui/components/mask-component";
    export { ProgressBarComponent } from "cocos/3d/ui/components/progress-bar-component";
    export { RichTextComponent } from "cocos/3d/ui/components/rich-text-component";
    export { ScrollBarComponent } from "cocos/3d/ui/components/scroll-bar-component";
    export { ScrollViewComponent } from "cocos/3d/ui/components/scroll-view-component";
    export { SliderComponent } from "cocos/3d/ui/components/slider-component";
    export { SpriteComponent } from "cocos/3d/ui/components/sprite-component";
    export { ToggleComponent } from "cocos/3d/ui/components/toggle-component";
    export { ToggleContainerComponent } from "cocos/3d/ui/components/toggle-container-component";
    export { UIModelComponent } from "cocos/3d/ui/components/ui-model-component";
    export { UIRenderComponent } from "cocos/3d/ui/components/ui-render-component";
    export { UITransformComponent } from "cocos/3d/ui/components/ui-transfrom-component";
    export { ViewGroupComponent } from "cocos/3d/ui/components/view-group-component";
    export { WebviewComponent } from "cocos/3d/ui/components/webview/webView-component";
    export { WidgetComponent } from "cocos/3d/ui/components/widget-component";
    export { LabelOutlineComponent } from "cocos/3d/ui/components/label-outline-component";
    export { GraphicsComponent } from "cocos/3d/ui/components/graphics-component";
    export { widgetManager } from "cocos/3d/ui/components/widget-manager";
}
declare module "cocos/3d/ui/assembler/graphics/webgl/earcut" {
    export function earcut(datas: number[], holeIndices: number[] | null, dim: number): never[];
}
declare module "cocos/3d/ui/assembler/graphics/webgl/graphics-assembler" {
    import { IAssembler } from "cocos/3d/ui/assembler/assembler";
    export const graphicsAssembler: IAssembler;
}
declare module "cocos/3d/ui/assembler/graphics/webgl/index" {
    import { IAssemblerManager } from "cocos/3d/ui/assembler/assembler";
    export const graphicsAssemblerManager: IAssemblerManager;
}
declare module "cocos/3d/ui/mesh-buffer" {
    import { GFXBuffer } from "cocos/gfx/buffer";
    import { GFXInputAssembler, IGFXAttribute } from "cocos/gfx/input-assembler";
    import { UI } from "cocos/renderer/ui/ui";
    export class MeshBuffer {
        batcher: UI;
        vData: Float32Array | null;
        iData: Uint16Array | null;
        vb: GFXBuffer | null;
        ib: GFXBuffer | null;
        ia: GFXInputAssembler | null;
        byteStart: number;
        byteOffset: number;
        indiceStart: number;
        indiceOffset: number;
        vertexStart: number;
        vertexOffset: number;
        dirty: boolean;
        private _vertexFormatBytes;
        private _initVDataCount;
        private _initIDataCount;
        private _outofCallback;
        constructor(batcher: UI);
        initialize(attrs: IGFXAttribute[], outofCallback: ((...args: number[]) => void) | null): void;
        request(vertexCount: number, indiceCount: number): boolean;
        reset(): void;
        destroy(): void;
        uploadData(): void;
        private _reallocBuffer;
        private _reallocVData;
        private _reallocIData;
    }
}
declare module "cocos/3d/ui/assembler/utils" {
    import { Color } from "cocos/core/value-types/index";
    import { RenderData } from "cocos/renderer/ui/renderData";
    import { UI } from "cocos/renderer/ui/ui";
    import { Node } from "cocos/scene-graph/node";
    import { MeshBuffer } from "cocos/3d/ui/mesh-buffer";
    export function fillVertices(node: Node, buffer: MeshBuffer, renderData: RenderData, color: Color): void;
    export function fillMeshVertices(node: Node, buffer: MeshBuffer, renderData: RenderData, color: Color): void;
    export function fillVertices3D(node: Node, renderer: UI, renderData: RenderData, color: Color): void;
    export function fillMeshVertices3D(node: Node, renderer: UI, renderData: RenderData, color: Color): void;
    export function fillVerticesWithoutCalc(node: Node, buffer: MeshBuffer, renderData: RenderData, color: Color): void;
    export function fillVerticesWithoutCalc3D(node: Node, renderer: UI, renderData: RenderData, color: Color): void;
}
declare module "cocos/3d/ui/assembler/label/bmfont" {
    import { IAssembler } from "cocos/3d/ui/assembler/assembler";
    export const bmfont: IAssembler;
}
declare module "cocos/3d/ui/assembler/label/letter" {
    import { UI } from "cocos/renderer/ui/ui";
    import { LabelComponent } from "cocos/3d/ui/components/label-component";
    export const letter: {
        createData(comp: LabelComponent): import("cocos/renderer/ui/renderData").RenderData;
        fillBuffers(comp: LabelComponent, renderer: UI): void;
        appendQuad: any;
    };
}
declare module "cocos/3d/ui/assembler/label/ttfUtils" {
    import { LabelComponent } from "cocos/3d/ui/components/index";
    import { ISharedLabelData } from "cocos/3d/ui/assembler/label/font-utils";
    export const ttfUtils: {
        getAssemblerData(): ISharedLabelData;
        resetAssemblerData(assemblerData: ISharedLabelData): void;
        updateRenderData(comp: LabelComponent): void;
        updateVerts(comp: LabelComponent): void;
        _updateFontFamly(comp: LabelComponent): void;
        _updateProperties(comp: LabelComponent): void;
        _calculateFillTextStartPosition(): any;
        _updateTexture(): void;
        _calculateUnderlineStartPosition(): any;
        _updateLabelDimensions(): void;
        _calculateTextBaseline(): void;
        _calculateSplitedStrings(): void;
        _getFontDesc(): string;
        _getLineHeight(): number;
        _calculateParagraphLength(paragraphedStrings: string[], ctx: CanvasRenderingContext2D): number[];
        _measureText(ctx: CanvasRenderingContext2D): (string: string) => number;
        _calculateLabelFont(): void;
    };
}
declare module "cocos/3d/ui/assembler/label/ttf" {
    import { IAssembler } from "cocos/3d/ui/assembler/assembler";
    export const ttf: IAssembler;
}
declare module "cocos/3d/ui/assembler/label/index" {
    import { IAssemblerManager } from "cocos/3d/ui/assembler/assembler";
    export const labelAssembler: IAssemblerManager;
}
declare module "cocos/3d/ui/assembler/mask/stencil-manager" {
    import { Material } from "cocos/3d/assets/material";
    import { MaskComponent } from "cocos/3d/ui/components/mask-component";
    export enum Stage {
        DISABLED = 0,
        CLEAR = 1,
        ENTER_LEVEL = 2,
        ENABLED = 3,
        EXIT_LEVEL = 4
    }
    export class StencilManager {
        static sharedManager: StencilManager | null;
        stage: Stage;
        private _maskStack;
        private _stencilPattern;
        private _defaultPipelineState;
        pushMask(mask: MaskComponent): void;
        clear(): void;
        enterLevel(): void;
        enableMask(): void;
        exitMask(): void;
        handleMaterial(mat: Material): void;
        getWriteMask(): number;
        getExitWriteMask(): number;
        getStencilRef(): number;
        getInvertedRef(): number;
        reset(): void;
        private _changed;
    }
}
declare module "cocos/3d/ui/assembler/mask/mask-assembler" {
    import { IAssembler } from "cocos/3d/ui/assembler/assembler";
    export const maskAssembler: IAssembler;
    export const maskEndAssembler: IAssembler;
}
declare module "cocos/3d/ui/assembler/mask/index" {
    export * from "cocos/3d/ui/assembler/mask/mask-assembler";
    export * from "cocos/3d/ui/assembler/mask/stencil-manager";
}
declare module "cocos/3d/ui/assembler/sprite/bar-filled" {
    import { IAssembler } from "cocos/3d/ui/assembler/assembler";
    export const barFilled: IAssembler;
}
declare module "cocos/3d/ui/assembler/sprite/radial-filled" {
    import { IAssembler } from "cocos/3d/ui/assembler/assembler";
    export const radialFilled: IAssembler;
}
declare module "cocos/3d/ui/assembler/sprite/simple" {
    import { IAssembler } from "cocos/3d/ui/assembler/assembler";
    export const simple: IAssembler;
}
declare module "cocos/3d/ui/assembler/sprite/sliced" {
    import { IAssembler } from "cocos/3d/ui/assembler/assembler";
    export const sliced: IAssembler;
}
declare module "cocos/3d/ui/assembler/sprite/index" {
    import { IAssemblerManager } from "cocos/3d/ui/assembler/assembler";
    export const spriteAssembler: IAssemblerManager;
}
declare module "cocos/3d/ui/assembler/index" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import "cocos/3d/ui/assembler/graphics/webgl/index";
    import "cocos/3d/ui/assembler/label/index";
    export * from "cocos/3d/ui/assembler/mask/index";
    import "cocos/3d/ui/assembler/sprite/index";
    export * from "cocos/3d/ui/assembler/assembler";
}
declare module "cocos/3d/ui/index" {
    export * from "cocos/3d/ui/assembler/index";
    export * from "cocos/3d/ui/components/index";
    export { MeshBuffer } from "cocos/3d/ui/mesh-buffer";
}
declare module "cocos/3d/index" {
    /****************************************************************************
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the 'Software'), a limited,
     worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
     not use Cocos Creator software for developing other software or tools that's
     used for developing games. You are not granted to publish, distribute,
     sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    export * from "cocos/3d/assets/index";
    export * from "cocos/3d/builtin/index";
    export * from "cocos/3d/framework/index";
    export * from "cocos/3d/memop/index";
    import * as geometry from "cocos/3d/geom-utils/index";
    import * as utils from "cocos/3d/misc/utils";
    import * as primitives from "cocos/3d/primitive/index";
    export * from "cocos/3d/ui/index";
    export { createRaycastResult } from "cocos/3d/physics/instance";
    export { utils, primitives, geometry, };
}
declare module "cocos/core/utils/profiler/counter" {
    export interface ICounterOption {
        desc: string;
        counter: Counter;
        min?: number;
        max?: number;
        average?: number;
        below?: number;
        over?: number;
        color?: string;
    }
    export class Counter {
        value: number;
        protected _id: string;
        protected _opts: ICounterOption;
        protected _accumStart: number;
        protected _total: number;
        protected _value: number;
        protected _averageValue: number;
        protected _accumValue: number;
        protected _accumSamples: number;
        constructor(id: string, opts: ICounterOption, now: number);
        sample(now: number): void;
        human(): number;
        alarm(): boolean | 0 | undefined;
        protected _average(v: number, now?: number): void;
    }
}
declare module "cocos/core/utils/profiler/perf-counter" {
    import { Counter, ICounterOption } from "cocos/core/utils/profiler/counter";
    export class PerfCounter extends Counter {
        private _time;
        constructor(id: string, opts: ICounterOption, now: number);
        start(now?: number): void;
        end(now?: number): void;
        tick(): void;
        frame(now: number): void;
    }
}
declare module "cocos/core/utils/profiler/profiler" {
    export const profiler: {
        isShowingStats(): boolean;
        hideStats(): void;
        showStats(): void;
    };
}
declare module "cocos/core/utils/html-text-parser" {
    /**
     * A utils class for parsing HTML texts. The parsed results will be an object array.
     */
    export interface IHtmlTextParserResultObj {
        text?: string;
        style?: IHtmlTextParserStack;
    }
    export interface IHtmlTextParserStack {
        color?: string;
        size?: number;
        event?: Map<string, string>;
        isNewLine?: boolean;
        isImage?: boolean;
        src?: string;
        imageWidth?: number;
        imageHeight?: number;
        underline?: boolean;
        italic?: boolean;
        bold?: boolean;
        outline?: {
            color: string;
            width: number;
        };
    }
    export class HtmlTextParser {
        private _specialSymbolArray;
        private _stack;
        private _resultObjectArray;
        constructor();
        parse(htmlString: string): IHtmlTextParserResultObj[];
        private _attributeToObject;
        private _processEventHandler;
        private _addToStack;
        private _processResult;
        private _escapeSpecialSymbol;
    }
}
declare module "cocos/core/utils/prefab-helper" {
    export class PrefabInfo {
        root: null;
        asset: null;
        fileId: string;
        sync: boolean;
        _synced: {
            default: boolean;
            serializable: boolean;
        };
    }
    export default function syncWithPrefab(node: any): void;
}
declare module "cocos/core/utils/index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import * as js from "cocos/core/utils/js";
    /**
     * !#en The module provides utilities for working with file and directory paths
     * !#zh 用于处理文件与目录的路径的模块
     */
    import * as path from "cocos/core/utils/path";
    export * from "cocos/core/utils/profiler/profiler";
    export * from "cocos/core/utils/misc";
    export * from "cocos/core/utils/text-utils";
    export * from "cocos/core/utils/html-text-parser";
    export * from "cocos/core/utils/prefab-helper";
    export { js, path, };
}
declare module "cocos/core/scheduler" {
    /**
     * @en
     * Scheduler is responsible of triggering the scheduled callbacks.<br>
     * You should not use NSTimer. Instead use this class.<br>
     * <br>
     * There are 2 different types of callbacks (selectors):<br>
     *     - update callback: the 'update' callback will be called every frame. You can customize the priority.<br>
     *     - custom callback: A custom callback will be called every frame, or with a custom interval of time<br>
     * <br>
     * The 'custom selectors' should be avoided when possible. It is faster,<br>
     * and consumes less memory to use the 'update callback'. *
     * @zh
     * Scheduler 是负责触发回调函数的类。<br>
     * 通常情况下，建议使用 cc.director.getScheduler() 来获取系统定时器。<br>
     * 有两种不同类型的定时器：<br>
     *     - update 定时器：每一帧都会触发。您可以自定义优先级。<br>
     *     - 自定义定时器：自定义定时器可以每一帧或者自定义的时间间隔触发。<br>
     * 如果希望每帧都触发，应该使用 update 定时器，使用 update 定时器更快，而且消耗更少的内存。
     *
     * @class Scheduler
     */
    class Scheduler {
        /**
         * @en Priority level reserved for system services.
         * @zh 系统服务的优先级。
         * @property PRIORITY_SYSTEM
         */
        static PRIORITY_SYSTEM: number;
        /**
         * @en Minimum priority level for user scheduling.
         * @zh 用户调度最低优先级。
         * @property PRIORITY_NON_SYSTEM
         */
        static PRIORITY_NON_SYSTEM: number;
        private _timeScale;
        private _updatesNegList;
        private _updates0List;
        private _updatesPosList;
        private _hashForUpdates;
        private _hashForTimers;
        private _currentTarget;
        private _currentTargetSalvaged;
        private _updateHashLocked;
        private _arrayForTimers;
        constructor();
        /**
         * @en This method should be called for any target which needs to schedule tasks, and this method should be called before any scheduler API usage.<bg>
         * This method will add a `_id` property if it doesn't exist.
         * @zh 任何需要用 Scheduler 管理任务的对象主体都应该调用这个方法，并且应该在调用任何 Scheduler API 之前调用这个方法。<bg>
         * 这个方法会给对象添加一个 `_id` 属性，如果这个属性不存在的话。
         * @method enableForTarget
         * @param {Object} target
         */
        enableForTarget(target: any): void;
        /**
         * @en
         * Modifies the time of all scheduled callbacks.<br>
         * You can use this property to create a 'slow motion' or 'fast forward' effect.<br>
         * Default is 1.0. To create a 'slow motion' effect, use values below 1.0.<br>
         * To create a 'fast forward' effect, use values higher than 1.0.<br>
         * Note：It will affect EVERY scheduled selector / action.
         * @zh
         * 设置时间间隔的缩放比例。<br>
         * 您可以使用这个方法来创建一个 “slow motion（慢动作）” 或 “fast forward（快进）” 的效果。<br>
         * 默认是 1.0。要创建一个 “slow motion（慢动作）” 效果,使用值低于 1.0。<br>
         * 要使用 “fast forward（快进）” 效果，使用值大于 1.0。<br>
         * 注意：它影响该 Scheduler 下管理的所有定时器。
         * @method setTimeScale
         * @param {Number} timeScale
         */
        setTimeScale(timeScale: any): void;
        /**
         * @en Returns time scale of scheduler.
         * @zh 获取时间间隔的缩放比例。
         * @method getTimeScale
         * @return {Number}
         */
        getTimeScale(): number;
        /**
         * @en 'update' the scheduler. (You should NEVER call this method, unless you know what you are doing.)
         * @zh update 调度函数。(不应该直接调用这个方法，除非完全了解这么做的结果)
         * @method update
         * @param {Number} dt delta time
         */
        update(dt: any): void;
        /**
         * @en
         * <p>
         *   The scheduled method will be called every 'interval' seconds.<br/>
         *   If paused is YES, then it won't be called until it is resumed.<br/>
         *   If 'interval' is 0, it will be called every frame, but if so, it recommended to use 'scheduleUpdateForTarget:' instead.<br/>
         *   If the callback function is already scheduled, then only the interval parameter will be updated without re-scheduling it again.<br/>
         *   repeat let the action be repeated repeat + 1 times, use cc.macro.REPEAT_FOREVER to let the action run continuously<br/>
         *   delay is the amount of time the action will wait before it'll start<br/>
         * </p>
         * @zh
         * 指定回调函数，调用对象等信息来添加一个新的定时器。<br/>
         * 如果 paused 值为 true，那么直到 resume 被调用才开始计时。<br/>
         * 当时间间隔达到指定值时，设置的回调函数将会被调用。<br/>
         * 如果 interval 值为 0，那么回调函数每一帧都会被调用，但如果是这样，
         * 建议使用 scheduleUpdateForTarget 代替。<br/>
         * 如果回调函数已经被定时器使用，那么只会更新之前定时器的时间间隔参数，不会设置新的定时器。<br/>
         * repeat 值可以让定时器触发 repeat + 1 次，使用 cc.macro.REPEAT_FOREVER
         * 可以让定时器一直循环触发。<br/>
         * delay 值指定延迟时间，定时器会在延迟指定的时间之后开始计时。
         * @method schedule
         * @param {Function} callback
         * @param {Object} target
         * @param {Number} interval
         * @param {Number} [repeat=cc.macro.REPEAT_FOREVER]
         * @param {Number} [delay=0]
         * @param {Boolean} paused
         */
        schedule(callback: Function, target: any, interval: number, repeat: number, delay: number, paused?: boolean): void;
        /**
         * @en
         * Schedules the update callback for a given target,
         * During every frame after schedule started, the "update" function of target will be invoked.
         * @zh
         * 使用指定的优先级为指定的对象设置 update 定时器。<br>
         * update 定时器每一帧都会被触发，触发时自动调用指定对象的 "update" 函数。<br>
         * 优先级的值越低，定时器被触发的越早。
         * @method scheduleUpdate
         * @param {Object} target
         * @param {Number} priority
         * @param {Boolean} paused
         */
        scheduleUpdate(target: any, priority: Number, paused: Boolean): void;
        /**
         * @en
         * Unschedules a callback for a callback and a given target.<br>
         * If you want to unschedule the "update", use `unscheduleUpdate()`
         * @zh
         * 根据指定的回调函数和调用对象。<br>
         * 如果需要取消 update 定时器，请使用 unscheduleUpdate()。
         * @method unschedule
         * @param {Function} callback The callback to be unscheduled
         * @param {Object} target The target bound to the callback.
         */
        unschedule(callback: any, target: any): void;
        /**
         * @en Unschedules the update callback for a given target.
         * @zh 取消指定对象的 update 定时器。
         * @method unscheduleUpdate
         * @param {Object} target The target to be unscheduled.
         */
        unscheduleUpdate(target: any): void;
        /**
         * @en
         * Unschedules all scheduled callbacks for a given target.
         * This also includes the "update" callback.
         * @zh 取消指定对象的所有定时器，包括 update 定时器。
         * @method unscheduleAllForTarget
         * @param {Object} target The target to be unscheduled.
         */
        unscheduleAllForTarget(target: any): void;
        /**
         * @en
         * Unschedules all scheduled callbacks from all targets including the system callbacks.<br/>
         * You should NEVER call this method, unless you know what you are doing.
         * @zh
         * 取消所有对象的所有定时器，包括系统定时器。<br/>
         * 不用调用此函数，除非你确定你在做什么。
         * @method unscheduleAll
         */
        unscheduleAll(): void;
        /**
         * @en
         * Unschedules all callbacks from all targets with a minimum priority.<br/>
         * You should only call this with `PRIORITY_NON_SYSTEM_MIN` or higher.
         * @zh
         * 取消所有优先级的值大于指定优先级的定时器。<br/>
         * 你应该只取消优先级的值大于 PRIORITY_NON_SYSTEM_MIN 的定时器。
         * @method unscheduleAllWithMinPriority
         * @param {Number} minPriority The minimum priority of selector to be unscheduled. Which means, all selectors which
         *        priority is higher than minPriority will be unscheduled.
         */
        unscheduleAllWithMinPriority(minPriority: number): void;
        /**
         * @en Checks whether a callback for a given target is scheduled.
         * @zh 检查指定的回调函数和回调对象组合是否存在定时器。
         * @method isScheduled
         * @param {Function} callback The callback to check.
         * @param {Object} target The target of the callback.
         * @return {Boolean} True if the specified callback is invoked, false if not.
         */
        isScheduled(callback: any, target: any): boolean;
        /**
         * @en
         * Pause all selectors from all targets.<br/>
         * You should NEVER call this method, unless you know what you are doing.
         * @zh
         * 暂停所有对象的所有定时器。<br/>
         * 不要调用这个方法，除非你知道你正在做什么。
         * @method pauseAllTargets
         */
        pauseAllTargets(): any;
        /**
         * @en
         * Pause all selectors from all targets with a minimum priority. <br/>
         * You should only call this with kCCPriorityNonSystemMin or higher.
         * @zh
         * 暂停所有优先级的值大于指定优先级的定时器。<br/>
         * 你应该只暂停优先级的值大于 PRIORITY_NON_SYSTEM_MIN 的定时器。
         * @method pauseAllTargetsWithMinPriority
         * @param {Number} minPriority
         */
        pauseAllTargetsWithMinPriority(minPriority: number): any;
        /**
         * @en
         * Resume selectors on a set of targets.<br/>
         * This can be useful for undoing a call to pauseAllCallbacks.
         * @zh
         * 恢复指定数组中所有对象的定时器。<br/>
         * 这个函数是 pauseAllCallbacks 的逆操作。
         * @method resumeTargets
         * @param {Array} targetsToResume
         */
        resumeTargets(targetsToResume: any): void;
        /**
         * @en
         * Pauses the target.<br/>
         * All scheduled selectors/update for a given target won't be 'ticked' until the target is resumed.<br/>
         * If the target is not present, nothing happens.
         * @zh
         * 暂停指定对象的定时器。<br/>
         * 指定对象的所有定时器都会被暂停。<br/>
         * 如果指定的对象没有定时器，什么也不会发生。
         * @method pauseTarget
         * @param {Object} target
         */
        pauseTarget(target: any): void;
        /**
         * @en
         * Resumes the target.<br/>
         * The 'target' will be unpaused, so all schedule selectors/update will be 'ticked' again.<br/>
         * If the target is not present, nothing happens.
         * @zh
         * 恢复指定对象的所有定时器。<br/>
         * 指定对象的所有定时器将继续工作。<br/>
         * 如果指定的对象没有定时器，什么也不会发生。
         * @method resumeTarget
         * @param {Object} target
         */
        resumeTarget(target: any): void;
        /**
         * @en Returns whether or not the target is paused.
         * @zh 返回指定对象的定时器是否处于暂停状态。
         * @method isTargetPaused
         * @param {Object} target
         * @return {Boolean}
         */
        isTargetPaused(target: any): any;
        private _removeHashElement;
        private _removeUpdateFromHash;
        private _priorityIn;
        private _appendIn;
    }
    export default Scheduler;
}
declare module "cocos/core/director" {
    import { Scene } from "cocos/scene-graph/index";
    import { EventTarget } from "cocos/core/event/event-target";
    import { Root } from "cocos/core/root";
    import Scheduler from "cocos/core/scheduler";
    /**
     * @en
     * <p>
     *    ATTENTION: USE cc.director INSTEAD OF cc.Director.<br/>
     *    cc.director is a singleton object which manage your game's logic flow.<br/>
     *    Since the cc.director is a singleton, you don't need to call any constructor or create functions,<br/>
     *    the standard way to use it is by calling:<br/>
     *      - cc.director.methodName(); <br/>
     *
     *    It creates and handle the main Window and manages how and when to execute the Scenes.<br/>
     *    <br/>
     *    The cc.director is also responsible for:<br/>
     *      - initializing the OpenGL context<br/>
     *      - setting the OpenGL pixel format (default on is RGB565)<br/>
     *      - setting the OpenGL buffer depth (default on is 0-bit)<br/>
     *      - setting the color for clear screen (default one is BLACK)<br/>
     *      - setting the projection (default one is 3D)<br/>
     *      - setting the orientation (default one is Portrait)<br/>
     *      <br/>
     *    <br/>
     *    The cc.director also sets the default OpenGL context:<br/>
     *      - GL_TEXTURE_2D is enabled<br/>
     *      - GL_VERTEX_ARRAY is enabled<br/>
     *      - GL_COLOR_ARRAY is enabled<br/>
     *      - GL_TEXTURE_COORD_ARRAY is enabled<br/>
     * </p>
     * <p>
     *   cc.director also synchronizes timers with the refresh rate of the display.<br/>
     *   Features and Limitations:<br/>
     *      - Scheduled timers & drawing are synchronizes with the refresh rate of the display<br/>
     *      - Only supports animation intervals of 1/60 1/30 & 1/15<br/>
     * </p>
     *
     * @zh
     * <p>
     *     注意：用 cc.director 代替 cc.Director。<br/>
     *     cc.director 一个管理你的游戏的逻辑流程的单例对象。<br/>
     *     由于 cc.director 是一个单例，你不需要调用任何构造函数或创建函数，<br/>
     *     使用它的标准方法是通过调用：<br/>
     *       - cc.director.methodName();
     *     <br/>
     *     它创建和处理主窗口并且管理什么时候执行场景。<br/>
     *     <br/>
     *     cc.director 还负责：<br/>
     *      - 初始化 OpenGL 环境。<br/>
     *      - 设置OpenGL像素格式。(默认是 RGB565)<br/>
     *      - 设置OpenGL缓冲区深度 (默认是 0-bit)<br/>
     *      - 设置空白场景的颜色 (默认是 黑色)<br/>
     *      - 设置投影 (默认是 3D)<br/>
     *      - 设置方向 (默认是 Portrait)<br/>
     *    <br/>
     *    cc.director 设置了 OpenGL 默认环境 <br/>
     *      - GL_TEXTURE_2D   启用。<br/>
     *      - GL_VERTEX_ARRAY 启用。<br/>
     *      - GL_COLOR_ARRAY  启用。<br/>
     *      - GL_TEXTURE_COORD_ARRAY 启用。<br/>
     * </p>
     * <p>
     *   cc.director 也同步定时器与显示器的刷新速率。
     *   <br/>
     *   特点和局限性: <br/>
     *      - 将计时器 & 渲染与显示器的刷新频率同步。<br/>
     *      - 只支持动画的间隔 1/60 1/30 & 1/15。<br/>
     * </p>
     *
     * @class Director
     * @extends EventTarget
     */
    class Director extends EventTarget {
        /**
         * @en The event which will be triggered before loading a new scene.
         * @zh 加载新场景之前所触发的事件。
         * @event cc.Director.EVENT_BEFORE_SCENE_LOADING
         * @param {String} sceneName - The loading scene name
         */
        /**
         * @en The event which will be triggered before loading a new scene.
         * @zh 加载新场景之前所触发的事件。
         * @property {String} EVENT_BEFORE_SCENE_LOADING
         * @readonly
         */
        static EVENT_BEFORE_SCENE_LOADING: string;
        /**
         * @en The event which will be triggered before launching a new scene.
         * @zh 运行新场景之前所触发的事件。
         * @property {String} EVENT_BEFORE_SCENE_LAUNCH
         * @readonly
         */
        static EVENT_BEFORE_SCENE_LAUNCH: string;
        /**
         * @en The event which will be triggered after launching a new scene.
         * @zh 运行新场景之后所触发的事件。
         * @event cc.Director.EVENT_AFTER_SCENE_LAUNCH
         * @param {String} sceneName - New scene which is launched
         */
        /**
         * @en The event which will be triggered after launching a new scene.
         * @zh 运行新场景之后所触发的事件。
         * @property {String} EVENT_AFTER_SCENE_LAUNCH
         * @readonly
         */
        static EVENT_AFTER_SCENE_LAUNCH: string;
        /**
         * @en The event which will be triggered at the beginning of every frame.
         * @zh 每个帧的开始时所触发的事件。
         * @event cc.Director.EVENT_BEFORE_UPDATE
         */
        /**
         * @en The event which will be triggered at the beginning of every frame.
         * @zh 每个帧的开始时所触发的事件。
         * @property {String} EVENT_BEFORE_UPDATE
         * @readonly
         */
        static EVENT_BEFORE_UPDATE: string;
        /**
         * @en The event which will be triggered after engine and components update logic.
         * @zh 将在引擎和组件 “update” 逻辑之后所触发的事件。
         * @event cc.Director.EVENT_AFTER_UPDATE
         */
        /**
         * @en The event which will be triggered after engine and components update logic.
         * @zh 将在引擎和组件 “update” 逻辑之后所触发的事件。
         * @property {String} EVENT_AFTER_UPDATE
         * @readonly
         */
        static EVENT_AFTER_UPDATE: string;
        /**
         * @en The event which will be triggered before the rendering process.
         * @zh 渲染过程之前所触发的事件。
         * @event cc.Director.EVENT_BEFORE_DRAW
         */
        /**
         * @en The event which will be triggered before the rendering process.
         * @zh 渲染过程之前所触发的事件。
         * @property {String} EVENT_BEFORE_DRAW
         * @readonly
         */
        static EVENT_BEFORE_DRAW: string;
        /**
         * @en The event which will be triggered after the rendering process.
         * @zh 渲染过程之后所触发的事件。
         * @event cc.Director.EVENT_AFTER_DRAW
         */
        /**
         * @en The event which will be triggered after the rendering process.
         * @zh 渲染过程之后所触发的事件。
         * @property {String} EVENT_AFTER_DRAW
         * @readonly
         */
        static EVENT_AFTER_DRAW: string;
        private invalid;
        private _paused;
        private _purgeDirectorInNextLoop;
        private _root;
        private _loadingScene;
        private _scene;
        private _totalFrames;
        private _lastUpdate;
        private _deltaTime;
        private _scheduler;
        private _compScheduler;
        private _nodeActivator;
        private _actionManager;
        private _physicsSystem;
        private _systems;
        private _animationManager;
        constructor();
        init(): boolean;
        sharedInit(): void;
        /**
         * calculates delta time since last time it was called
         */
        calculateDeltaTime(): void;
        /**
         * @en
         * Converts a view coordinate to an WebGL coordinate<br/>
         * Useful to convert (multi) touches coordinates to the current layout (portrait or landscape)<br/>
         * Implementation can be found in directorWebGL.
         * @zh 将触摸点的屏幕坐标转换为 WebGL View 下的坐标。
         * @method convertToGL
         * @param {Vec2} uiPoint
         * @return {Vec2}
         * @deprecated since v2.0
         */
        convertToGL(uiPoint: any): any;
        /**
         * @en
         * Converts an OpenGL coordinate to a view coordinate<br/>
         * Useful to convert node points to window points for calls such as glScissor<br/>
         * Implementation can be found in directorWebGL.
         * @zh 将触摸点的 WebGL View 坐标转换为屏幕坐标。
         * @method convertToUI
         * @param {Vec2} glPoint
         * @return {Vec2}
         * @deprecated since v2.0
         */
        convertToUI(glPoint: any): any;
        /**
         * End the life of director in the next frame
         * @method end
         */
        end(): void;
        /**
         * @en
         * Returns the size of the WebGL view in points.<br/>
         * It takes into account any possible rotation (device orientation) of the window.
         * @zh 获取视图的大小，以点为单位。
         * @method getWinSize
         * @return {Size}
         * @deprecated since v2.0
         */
        getWinSize(): any;
        /**
         * @en
         * Returns the size of the OpenGL view in pixels.<br/>
         * It takes into account any possible rotation (device orientation) of the window.<br/>
         * On Mac winSize and winSizeInPixels return the same value.
         * (The pixel here refers to the resource resolution. If you want to get the physics resolution of device, you need to use cc.view.getFrameSize())
         * @zh
         * 获取视图大小，以像素为单位（这里的像素指的是资源分辨率。
         * 如果要获取屏幕物理分辨率，需要用 cc.view.getFrameSize()）
         * @method getWinSizeInPixels
         * @return {Size}
         * @deprecated since v2.0
         */
        getWinSizeInPixels(): any;
        /**
         * @en Pause the director's ticker, only involve the game logic execution.<br>
         * It won't pause the rendering process nor the event manager.<br>
         * If you want to pause the entier game including rendering, audio and event,<br>
         * please use cc.game.pause
         * @zh 暂停正在运行的场景，该暂停只会停止游戏逻辑执行，但是不会停止渲染和 UI 响应。<br>
         * 如果想要更彻底得暂停游戏，包含渲染，音频和事件，请使用 cc.game.pause 。
         * @method pause
         */
        pause(): void;
        /**
         * @en Removes cached all cocos2d cached data.
         * @zh 删除cocos2d所有的缓存数据
         * @deprecated since v2.0
         */
        purgeCachedData(): void;
        /**
         * @en Purge the cc.director itself, including unschedule all schedule,<br>
         * remove all event listeners, clean up and exit the running scene, stops all animations, clear cached data.
         * @zh 清除 cc.director 本身，包括停止所有的计时器，<br>
         * 移除所有的事件监听器，清理并退出当前运行的场景，停止所有动画，清理缓存数据。
         */
        purgeDirector(): void;
        /**
         * @en Reset the cc.director, can be used to restart the director after purge
         * @zh 重置 cc.director，可用于在清除后重启 director
         */
        reset(): void;
        /**
         * @en
         * Run a scene. Replaces the running scene with a new one or enter the first scene.<br>
         * The new scene will be launched immediately.
         * @zh 立刻切换指定场景。
         * @method runSceneImmediate
         * @param {Scene} scene - The need run scene.
         * @param {Function} [onBeforeLoadScene] - The function invoked at the scene before loading.
         * @param {Function} [onLaunched] - The function invoked at the scene after launch.
         */
        runSceneImmediate(scene: any, onBeforeLoadScene: any, onLaunched: any): void;
        /**
         * @en
         * Run a scene. Replaces the running scene with a new one or enter the first scene.<br>
         * The new scene will be launched at the end of the current frame.<br>
         * @zh 运行指定场景。
         * @method runScene
         * @param {Scene} scene - The need run scene.
         * @param {Function} [onBeforeLoadScene] - The function invoked at the scene before loading.
         * @param {Function} [onLaunched] - The function invoked at the scene after launch.
         * @private
         */
        runScene(scene: any, onBeforeLoadScene: any, onLaunched: any): void;
        _getSceneUuid(key: any): any;
        /**
         * @en Loads the scene by its name.
         * @zh 通过场景名称进行加载场景。
         *
         * @method loadScene
         * @param {String} sceneName - The name of the scene to load.
         * @param {Function} [onLaunched] - callback, will be called after scene launched.
         * @return {Boolean} if error, return false
         */
        loadScene(sceneName: any, onLaunched: any, _onUnloaded: any): boolean;
        /**
         * @en
         * Preloads the scene to reduces loading time. You can call this method at any time you want.<br>
         * After calling this method, you still need to launch the scene by `cc.director.loadScene`.<br>
         * It will be totally fine to call `cc.director.loadScene` at any time even if the preloading is not<br>
         * yet finished, the scene will be launched after loaded automatically.
         * @zh 预加载场景，你可以在任何时候调用这个方法。
         * 调用完后，你仍然需要通过 `cc.director.loadScene` 来启动场景，因为这个方法不会执行场景加载操作。<br>
         * 就算预加载还没完成，你也可以直接调用 `cc.director.loadScene`，加载完成后场景就会启动。
         * <br>
         * @method preloadScene
         * @param {String} sceneName - The name of the scene to preload.
         * @param {Function} [onProgress] - callback, will be called when the load progression change.
         * @param {Number} onProgress.completedCount - The number of the items that are already completed
         * @param {Number} onProgress.totalCount - The total number of the items
         * @param {Object} onProgress.item - The latest item which flow out the pipeline
         * @param {Function} [onLoaded] - callback, will be called after scene loaded.
         * @param {Error} onLoaded.error - null or the error object.
         */
        preloadScene(sceneName: any, onProgress: any, onLoaded: any): void;
        /**
         * @en Loads the scene by its uuid.
         * @zh 通过uuid加载场景
         * @method _loadSceneByUuid
         * @param {String} uuid - the uuid of the scene asset to load
         * @param {Function} [onLaunched]
         * @param {Function} [onUnloaded]
         * @param {Boolean} [dontRunScene] - Just download and initialize the scene but will not launch it,
         *                                   only take effect in the Editor.
         * @private
         */
        _loadSceneByUuid(uuid: String, onLaunched?: Function | null, onUnloaded?: Function | null, dontRunScene?: Boolean): void;
        /**
         * @en Resume game logic execution after pause, if the current scene is not paused, nothing will happen.
         * @zh 恢复暂停场景的游戏逻辑，如果当前场景没有暂停将没任何事情发生。
         * @method resume
         */
        resume(): void;
        /**
         * @en
         * Enables or disables WebGL depth test.<br>
         * Implementation can be found in directorCanvas.js/directorWebGL.js
         * @zh 启用/禁用深度测试（在 Canvas 渲染模式下不会生效）。
         * @method setDepthTest
         * @param {Boolean} on
         * @deprecated since v2.0
         */
        setDepthTest(value: any): void;
        /**
         * @en
         * Set color for clear screen.<br>
         * (Implementation can be found in directorCanvas.js/directorWebGL.js)
         * @zh
         * 设置场景的默认擦除颜色。<br>
         * 支持全透明，但不支持透明度为中间值。要支持全透明需手工开启 cc.macro.ENABLE_TRANSPARENT_CANVAS。
         * @method setClearColor
         * @param {Color} clearColor
         * @deprecated since v2.0
         */
        setClearColor(clearColor: any): void;
        readonly root: Root | null;
        /**
         * @en Returns current logic Scene.
         * @zh 获取当前逻辑场景。
         * @method getRunningScene
         * @return {Scene}
         * @deprecated since v2.0
         */
        getRunningScene(): Scene | null;
        /**
         * @en Returns current logic Scene.
         * @zh 获取当前逻辑场景。
         * @method getScene
         * @return {Scene}
         * @example
         *  // This will help you to get the Canvas node in scene
         *  cc.director.getScene().getChildByName('Canvas');
         */
        getScene(): Scene | null;
        /**
         * @en Returns the FPS value. Please use {{#crossLink "Game.setFrameRate"}}cc.game.setFrameRate{{/crossLink}} to control animation interval.
         * @zh 获取单位帧执行时间。请使用 {{#crossLink "Game.setFrameRate"}}cc.game.setFrameRate{{/crossLink}} 来控制游戏帧率。
         * @method getAnimationInterval
         * @deprecated since v2.0
         * @return {Number}
         */
        getAnimationInterval(): number;
        /**
         * @en Sets animation interval, this doesn't control the main loop.<br>
         * To control the game's frame rate overall, please use cc.game.setFrameRate
         * @zh 设置动画间隔，这不控制主循环。<br>
         * 要控制游戏的帧速率，请使用 cc.game.setFrameRate
         * @method setAnimationInterval
         * @deprecated since v2.0
         * @param {Number} value - The animation interval desired.
         */
        setAnimationInterval(value: any): void;
        /**
         * @en Returns the delta time since last frame.
         * @zh 获取上一帧的增量时间。
         * @method getDeltaTime
         * @return {Number}
         */
        getDeltaTime(): number;
        /**
         * @en Returns how many frames were called since the director started.
         * @zh 获取 director 启动以来游戏运行的总帧数。
         * @method getTotalFrames
         * @return {Number}
         */
        getTotalFrames(): number;
        /**
         * @en Returns whether or not the Director is paused.
         * @zh 是否处于暂停状态。
         * @method isPaused
         * @return {Boolean}
         */
        isPaused(): boolean;
        /**
         * @en Returns the cc.Scheduler associated with this director.
         * @zh 获取和 director 相关联的 cc.Scheduler。
         * @method getScheduler
         * @return {Scheduler}
         */
        getScheduler(): Scheduler;
        /**
         * @en Sets the cc.Scheduler associated with this director.
         * @zh 设置和 director 相关联的 cc.Scheduler。
         * @method setScheduler
         * @param {Scheduler} scheduler
         */
        setScheduler(scheduler: any): void;
        /**
         * @en register a system.
         * @zh 注册一个 system。
         * @method registerSystem
         * @param {string} name
         * @param {function} cls
         * @param {Array} compClsNames
         * @param {number} priority
         * @return {System}
         */
        registerSystem(name: any, cls: any, compClsNames: any, priority: any): any;
        /**
         * @en get a system.
         * @zh 获取一个 system。
         * @param {string} name
         * @return {System}
         */
        getSystem(name: any): any;
        /**
         * @en Returns the cc.ActionManager associated with this director.
         * @zh 获取和 director 相关联的 cc.ActionManager（动作管理器）。
         * @method getActionManager
         * @return {ActionManager}
         */
        getActionManager(): any;
        /**
         * @en Sets the cc.ActionManager associated with this director.
         * @zh 设置和 director 相关联的 cc.ActionManager（动作管理器）。
         * @method setActionManager
         * @param {ActionManager} actionManager
         */
        setActionManager(actionManager: any): void;
        /**
         * @en Returns the cc.AnimationManager associated with this director.
         * @zh 获取和 director 相关联的 cc.AnimationManager（动画管理器）。
         * @method getAnimationManager
         */
        getAnimationManager(): any;
        /**
         * @en Starts Animation
         * @zh 开始动画
         */
        startAnimation(): void;
        /**
         * @en Stops animation
         * @zh 停止动画
         */
        stopAnimation(): void;
        /**
         * @en Run main loop of director
         * @zh 运行主循环
         */
        mainLoop(): void;
        __fastOn(type: any, callback: any, target: any): void;
        __fastOff(type: any, callback: any, target: any): void;
    }
    /**
     * @module cc
     */
    /**
     * @en Director
     * @zh 导演类。
     * @property director
     * @type {Director}
     */
    const director: Director;
    export default director;
}
declare module "cocos/core/index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import * as vmath from "cocos/core/vmath/index";
    export * from "cocos/core/utils/index";
    export * from "cocos/core/data/index";
    export * from "cocos/core/event/index";
    export * from "cocos/core/platform/index";
    export * from "cocos/core/value-types/index";
    import "cocos/core/game";
    export * from "cocos/core/scheduler";
    import "cocos/core/director";
    export { vmath };
}
declare module "cocos/gfx/webgl/webgl-command-allocator" {
    import { CachedArray } from "cocos/core/memop/cached-array";
    import { GFXCommandAllocator, IGFXCommandAllocatorInfo } from "cocos/gfx/command-allocator";
    import { GFXDevice } from "cocos/gfx/device";
    import { WebGLCmdBeginRenderPass, WebGLCmdBindStates, WebGLCmdCopyBufferToTexture, WebGLCmdDraw, WebGLCmdObject, WebGLCmdPackage, WebGLCmdUpdateBuffer } from "cocos/gfx/webgl/webgl-commands";
    export class WebGLGFXCommandPool<T extends WebGLCmdObject> {
        private _frees;
        private _freeIdx;
        private _freeCmds;
        constructor(clazz: new () => T, count: number);
        alloc(clazz: new () => T): T;
        free(cmd: T): void;
        freeCmds(cmds: CachedArray<T>): void;
        release(): void;
    }
    export class WebGLGFXCommandAllocator extends GFXCommandAllocator {
        beginRenderPassCmdPool: WebGLGFXCommandPool<WebGLCmdBeginRenderPass>;
        bindStatesCmdPool: WebGLGFXCommandPool<WebGLCmdBindStates>;
        drawCmdPool: WebGLGFXCommandPool<WebGLCmdDraw>;
        updateBufferCmdPool: WebGLGFXCommandPool<WebGLCmdUpdateBuffer>;
        copyBufferToTextureCmdPool: WebGLGFXCommandPool<WebGLCmdCopyBufferToTexture>;
        constructor(device: GFXDevice);
        initialize(info: IGFXCommandAllocatorInfo): boolean;
        destroy(): void;
        clearCmds(cmdPackage: WebGLCmdPackage): void;
        releaseCmds(): void;
    }
}
declare module "cocos/gfx/webgl/webgl-gpu-objects" {
    import { IGFXDrawInfo } from "cocos/gfx/buffer";
    import { GFXBindingType, GFXBufferUsage, GFXDynamicState, GFXFormat, GFXMemoryUsage, GFXSampleCount, GFXShaderType, GFXTextureFlags, GFXTextureType, GFXTextureUsage, GFXTextureViewType, GFXType } from "cocos/gfx/define";
    import { IGFXAttribute } from "cocos/gfx/input-assembler";
    import { GFXBlendState, GFXDepthStencilState, GFXRasterizerState } from "cocos/gfx/pipeline-state";
    import { GFXColorAttachment, GFXDepthStencilAttachment } from "cocos/gfx/render-pass";
    import { GFXUniformBlock, GFXUniformSampler, IGFXShaderMacro } from "cocos/gfx/shader";
    export interface IWebGLGPUUniformInfo {
        name: string;
        type: GFXType;
        count: number;
        offset: number;
        view: Float32Array | Int32Array;
        isDirty: boolean;
    }
    export class WebGLGPUBuffer {
        usage: GFXBufferUsage;
        memUsage: GFXMemoryUsage;
        size: number;
        stride: number;
        glTarget: GLenum;
        glBuffer: WebGLBuffer | null;
        buffer: ArrayBuffer | null;
        vf32: Float32Array | null;
        indirects: IGFXDrawInfo[];
    }
    export class WebGLGPUTexture {
        type: GFXTextureType;
        viewType: GFXTextureViewType;
        format: GFXFormat;
        usage: GFXTextureUsage;
        width: number;
        height: number;
        depth: number;
        size: number;
        arrayLayer: number;
        mipLevel: number;
        samples: GFXSampleCount;
        flags: GFXTextureFlags;
        isPowerOf2: boolean;
        glTarget: GLenum;
        glInternelFmt: GLenum;
        glFormat: GLenum;
        glType: GLenum;
        glUsage: GLenum;
        glTexture: WebGLTexture | null;
        glRenderbuffer: WebGLRenderbuffer | null;
        glWrapS: GLenum;
        glWrapT: GLenum;
        glMinFilter: GLenum;
        glMagFilter: GLenum;
    }
    export class WebGLGPUTextureView {
        gpuTexture: WebGLGPUTexture;
        type: GFXTextureViewType;
        format: GFXFormat;
        baseLevel: number;
        levelCount: number;
        constructor(texture: WebGLGPUTexture);
    }
    export class WebGLGPURenderPass {
        colorAttachments: GFXColorAttachment[];
        depthStencilAttachment: GFXDepthStencilAttachment | null;
    }
    export class WebGLGPUFramebuffer {
        gpuRenderPass: WebGLGPURenderPass;
        gpuColorViews: WebGLGPUTextureView[];
        gpuDepthStencilView: WebGLGPUTextureView | null;
        isOffscreen?: boolean;
        glFramebuffer: WebGLFramebuffer | null;
        constructor(gpuRenderPass: WebGLGPURenderPass);
    }
    export class WebGLGPUSampler {
        glMinFilter: GLenum;
        glMagFilter: GLenum;
        glWrapS: GLenum;
        glWrapT: GLenum;
        glWrapR: GLenum;
    }
    export class WebGLGPUInput {
        binding: number;
        name: string;
        type: GFXType;
        stride: number;
        count: number;
        size: number;
        glType: GLenum;
        glLoc: GLint;
    }
    export interface IWebGLGPUUniform {
        binding: number;
        name: string;
        type: GFXType;
        stride: number;
        count: number;
        size: number;
        offset: number;
        glType: GLenum;
        glLoc: WebGLUniformLocation;
        array: number[];
        begin: number;
        isFirst: boolean;
    }
    export class WebGLGPUUniformBlock {
        binding: number;
        name: string;
        size: number;
        glUniforms: IWebGLGPUUniform[];
        glActiveUniforms: IWebGLGPUUniform[];
        isUniformPackage: boolean;
    }
    export class WebGLGPUUniformSampler {
        binding: number;
        name: string;
        type: GFXType;
        units: number[];
        glType: GLenum;
        glLoc: WebGLUniformLocation;
    }
    export class WebGLGPUShaderStage {
        type: GFXShaderType;
        source: string;
        macros: IGFXShaderMacro[];
        glShader: WebGLShader | null;
    }
    export class WebGLGPUShader {
        name: string;
        blocks: GFXUniformBlock[];
        samplers: GFXUniformSampler[];
        gpuStages: WebGLGPUShaderStage[];
        glProgram: WebGLProgram | null;
        glInputs: WebGLGPUInput[];
        glUniforms: IWebGLGPUUniform[];
        glBlocks: WebGLGPUUniformBlock[];
        glSamplers: WebGLGPUUniformSampler[];
    }
    export class WebGLGPUPipelineLayout {
    }
    export class WebGLGPUPipelineState {
        glPrimitive: GLenum;
        gpuShader: WebGLGPUShader | null;
        rs: GFXRasterizerState;
        dss: GFXDepthStencilState;
        bs: GFXBlendState;
        dynamicStates: GFXDynamicState[];
        gpuLayout: WebGLGPUPipelineLayout | null;
        gpuRenderPass: WebGLGPURenderPass | null;
    }
    export class WebGLGPUBinding {
        binding: number;
        type: GFXBindingType;
        name: string;
        gpuBuffer: WebGLGPUBuffer | null;
        gpuTexView: WebGLGPUTextureView | null;
        gpuSampler: WebGLGPUSampler | null;
    }
    export class WebGLGPUBindingLayout {
        gpuBindings: WebGLGPUBinding[];
    }
    export class WebGLAttrib {
        name: string;
        glBuffer: WebGLBuffer | null;
        glType: GLenum;
        size: number;
        count: number;
        stride: number;
        componentCount: number;
        isNormalized: boolean;
        isInstanced: boolean;
        offset: number;
    }
    export interface IWebGLGPUInputAssembler {
        attributes: IGFXAttribute[];
        gpuVertexBuffers: WebGLGPUBuffer[];
        gpuIndexBuffer: WebGLGPUBuffer | null;
        gpuIndirectBuffer: WebGLGPUBuffer | null;
        glAttribs: WebGLAttrib[];
        glIndexType: GLenum;
        glVAOs: Map<WebGLProgram, WebGLVertexArrayObjectOES>;
    }
}
declare module "cocos/gfx/webgl/webgl-render-pass" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXRenderPass, IGFXRenderPassInfo } from "cocos/gfx/render-pass";
    import { WebGLGPURenderPass } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXRenderPass extends GFXRenderPass {
        readonly gpuRenderPass: WebGLGPURenderPass;
        private _gpuRenderPass;
        constructor(device: GFXDevice);
        initialize(info: IGFXRenderPassInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl/webgl-texture" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXTexture, IGFXTextureInfo } from "cocos/gfx/texture";
    import { WebGLGPUTexture } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXTexture extends GFXTexture {
        readonly gpuTexture: WebGLGPUTexture;
        private _gpuTexture;
        constructor(device: GFXDevice);
        initialize(info: IGFXTextureInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
    }
}
declare module "cocos/gfx/webgl/webgl-texture-view" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXTextureView, IGFXTextureViewInfo } from "cocos/gfx/texture-view";
    import { WebGLGPUTextureView } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXTextureView extends GFXTextureView {
        readonly gpuTextureView: WebGLGPUTextureView;
        private _gpuTextureView;
        constructor(device: GFXDevice);
        initialize(info: IGFXTextureViewInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl/webgl-framebuffer" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXFramebuffer, IGFXFramebufferInfo } from "cocos/gfx/framebuffer";
    import { WebGLGPUFramebuffer } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXFramebuffer extends GFXFramebuffer {
        readonly gpuFramebuffer: WebGLGPUFramebuffer;
        private _gpuFramebuffer;
        constructor(device: GFXDevice);
        initialize(info: IGFXFramebufferInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl/webgl-input-assembler" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXInputAssembler, IGFXInputAssemblerInfo } from "cocos/gfx/input-assembler";
    import { WebGLCmdDraw } from "cocos/gfx/webgl/webgl-commands";
    import { IWebGLGPUInputAssembler } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXInputAssembler extends GFXInputAssembler {
        readonly gpuInputAssembler: IWebGLGPUInputAssembler;
        private _gpuInputAssembler;
        constructor(device: GFXDevice);
        initialize(info: IGFXInputAssemblerInfo): boolean;
        destroy(): void;
        extractCmdDraw(cmd: WebGLCmdDraw): void;
    }
}
declare module "cocos/gfx/webgl/webgl-pipeline-layout" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXPipelineLayout, IGFXPipelineLayoutInfo } from "cocos/gfx/pipeline-layout";
    import { WebGLGPUPipelineLayout } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXPipelineLayout extends GFXPipelineLayout {
        readonly gpuPipelineLayout: WebGLGPUPipelineLayout;
        private _gpuPipelineLayout;
        constructor(device: GFXDevice);
        initialize(info: IGFXPipelineLayoutInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl/webgl-shader" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXShader, IGFXShaderInfo } from "cocos/gfx/shader";
    import { WebGLGPUShader } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXShader extends GFXShader {
        readonly gpuShader: WebGLGPUShader;
        private _gpuShader;
        constructor(device: GFXDevice);
        initialize(info: IGFXShaderInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl/webgl-pipeline-state" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXPipelineState, IGFXPipelineStateInfo } from "cocos/gfx/pipeline-state";
    import { WebGLGPUPipelineState } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXPipelineState extends GFXPipelineState {
        readonly gpuPipelineState: WebGLGPUPipelineState;
        private _gpuPipelineState;
        constructor(device: GFXDevice);
        initialize(info: IGFXPipelineStateInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl/webgl-command-buffer" {
    import { GFXBindingLayout } from "cocos/gfx/binding-layout";
    import { GFXBuffer, GFXBufferSource } from "cocos/gfx/buffer";
    import { GFXCommandBuffer, IGFXCommandBufferInfo } from "cocos/gfx/command-buffer";
    import { GFXBufferTextureCopy, GFXClearFlag, GFXStencilFace, GFXTextureLayout, IGFXColor, IGFXRect, IGFXViewport } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXFramebuffer } from "cocos/gfx/framebuffer";
    import { GFXInputAssembler } from "cocos/gfx/input-assembler";
    import { GFXPipelineState } from "cocos/gfx/pipeline-state";
    import { GFXTexture } from "cocos/gfx/texture";
    import { WebGLCmdPackage } from "cocos/gfx/webgl/webgl-commands";
    import { WebGLGFXDevice } from "cocos/gfx/webgl/webgl-device";
    export interface IWebGLDepthBias {
        constantFactor: number;
        clamp: number;
        slopeFactor: number;
    }
    export interface IWebGLDepthBounds {
        minBounds: number;
        maxBounds: number;
    }
    export interface IWebGLStencilWriteMask {
        face: GFXStencilFace;
        writeMask: number;
    }
    export interface IWebGLStencilCompareMask {
        face: GFXStencilFace;
        reference: number;
        compareMask: number;
    }
    export class WebGLGFXCommandBuffer extends GFXCommandBuffer {
        cmdPackage: WebGLCmdPackage;
        private _webGLAllocator;
        private _isInRenderPass;
        private _curGPUPipelineState;
        private _curGPUBindingLayout;
        private _curGPUInputAssembler;
        private _curViewport;
        private _curScissor;
        private _curLineWidth;
        private _curDepthBias;
        private _curBlendConstants;
        private _curDepthBounds;
        private _curStencilWriteMask;
        private _curStencilCompareMask;
        private _isStateInvalied;
        constructor(device: GFXDevice);
        initialize(info: IGFXCommandBufferInfo): boolean;
        destroy(): void;
        begin(): void;
        end(): void;
        beginRenderPass(framebuffer: GFXFramebuffer, renderArea: IGFXRect, clearFlag: GFXClearFlag, clearColors: IGFXColor[], clearDepth: number, clearStencil: number): void;
        endRenderPass(): void;
        bindPipelineState(pipelineState: GFXPipelineState): void;
        bindBindingLayout(bindingLayout: GFXBindingLayout): void;
        bindInputAssembler(inputAssembler: GFXInputAssembler): void;
        setViewport(viewport: IGFXViewport): void;
        setScissor(scissor: IGFXRect): void;
        setLineWidth(lineWidth: number): void;
        setDepthBias(depthBiasConstantFacotr: number, depthBiasClamp: number, depthBiasSlopeFactor: number): void;
        setBlendConstants(blendConstants: number[]): void;
        setDepthBound(minDepthBounds: number, maxDepthBounds: number): void;
        setStencilWriteMask(face: GFXStencilFace, writeMask: number): void;
        setStencilCompareMask(face: GFXStencilFace, reference: number, compareMask: number): void;
        draw(inputAssembler: GFXInputAssembler): void;
        updateBuffer(buffer: GFXBuffer, data: GFXBufferSource, offset?: number, size?: number): void;
        copyBufferToTexture(srcBuff: GFXBuffer, dstTex: GFXTexture, dstLayout: GFXTextureLayout, regions: GFXBufferTextureCopy[]): void;
        execute(cmdBuffs: GFXCommandBuffer[], count: number): void;
        readonly webGLDevice: WebGLGFXDevice;
        private bindStates;
    }
}
declare module "cocos/gfx/webgl/webgl-define" {
    export enum WebGLEXT {
        RGBA16F_EXT = 34842,
        RGB16F_EXT = 34843,
        RGBA32F_EXT = 34836,
        FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 33297,
        UNSIGNED_NORMALIZED_EXT = 35863,
        UNSIGNED_INT_24_8_WEBGL = 34042,
        HALF_FLOAT_OES = 36193,
        COMPRESSED_RGB_S3TC_DXT1_EXT = 33776,
        COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777,
        COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778,
        COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779,
        COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916,
        COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917,
        COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918,
        COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919,
        COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840,
        COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841,
        COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842,
        COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843,
        COMPRESSED_RGB_ETC1_WEBGL = 36196,
        COMPRESSED_R11_EAC = 37488,
        COMPRESSED_SIGNED_R11_EAC = 37489,
        COMPRESSED_RG11_EAC = 37490,
        COMPRESSED_SIGNED_RG11_EAC = 37491,
        COMPRESSED_RGB8_ETC2 = 37492,
        COMPRESSED_SRGB8_ETC2 = 37493,
        COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494,
        COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495,
        COMPRESSED_RGBA8_ETC2_EAC = 37496,
        COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497
    }
}
declare module "cocos/gfx/webgl/webgl-state-cache" {
    import { IGFXRect, IGFXViewport } from "cocos/gfx/define";
    import { GFXBlendState, GFXDepthStencilState, GFXRasterizerState } from "cocos/gfx/pipeline-state";
    export interface IWebGLTexUnit {
        glTexture: WebGLTexture | null;
    }
    export class WebGLStateCache {
        glArrayBuffer: WebGLBuffer | null;
        glElementArrayBuffer: WebGLBuffer | null;
        glVAO: WebGLVertexArrayObjectOES | null;
        texUnit: number;
        glTex2DUnits: IWebGLTexUnit[];
        glTexCubeUnits: IWebGLTexUnit[];
        glRenderbuffer: WebGLRenderbuffer | null;
        glFramebuffer: WebGLFramebuffer | null;
        viewport: IGFXViewport;
        scissorRect: IGFXRect;
        rs: GFXRasterizerState;
        dss: GFXDepthStencilState;
        bs: GFXBlendState;
        glProgram: WebGLProgram | null;
        glEnabledAttribLocs: boolean[];
        glCurrentAttribLocs: boolean[];
        constructor();
    }
}
declare module "cocos/gfx/webgl/webgl-commands" {
    import { CachedArray } from "cocos/core/memop/cached-array";
    import { GFXBufferSource, IGFXDrawInfo } from "cocos/gfx/buffer";
    import { GFXBufferTextureCopy, GFXClearFlag, GFXTextureLayout, IGFXColor, IGFXRect, IGFXViewport } from "cocos/gfx/define";
    import { WebGLGFXCommandAllocator } from "cocos/gfx/webgl/webgl-command-allocator";
    import { IWebGLDepthBias, IWebGLDepthBounds, IWebGLStencilCompareMask, IWebGLStencilWriteMask } from "cocos/gfx/webgl/webgl-command-buffer";
    import { WebGLGFXDevice } from "cocos/gfx/webgl/webgl-device";
    import { IWebGLGPUInputAssembler, WebGLGPUBindingLayout, WebGLGPUBuffer, WebGLGPUFramebuffer, WebGLGPUPipelineState, WebGLGPUShader, WebGLGPUTexture } from "cocos/gfx/webgl/webgl-gpu-objects";
    export enum WebGLCmd {
        BEGIN_RENDER_PASS = 0,
        END_RENDER_PASS = 1,
        BIND_STATES = 2,
        DRAW = 3,
        UPDATE_BUFFER = 4,
        COPY_BUFFER_TO_TEXTURE = 5,
        COUNT = 6
    }
    export abstract class WebGLCmdObject {
        cmdType: WebGLCmd;
        refCount: number;
        constructor(type: WebGLCmd);
        abstract clear(): any;
    }
    export class WebGLCmdBeginRenderPass extends WebGLCmdObject {
        gpuFramebuffer: WebGLGPUFramebuffer | null;
        renderArea: IGFXRect;
        clearFlag: GFXClearFlag;
        clearColors: IGFXColor[];
        clearDepth: number;
        clearStencil: number;
        constructor();
        clear(): void;
    }
    export class WebGLCmdBindStates extends WebGLCmdObject {
        gpuPipelineState: WebGLGPUPipelineState | null;
        gpuBindingLayout: WebGLGPUBindingLayout | null;
        gpuInputAssembler: IWebGLGPUInputAssembler | null;
        viewport: IGFXViewport | null;
        scissor: IGFXRect | null;
        lineWidth: number | null;
        depthBias: IWebGLDepthBias | null;
        blendConstants: number[] | null;
        depthBounds: IWebGLDepthBounds | null;
        stencilWriteMask: IWebGLStencilWriteMask | null;
        stencilCompareMask: IWebGLStencilCompareMask | null;
        constructor();
        clear(): void;
    }
    export class WebGLCmdDraw extends WebGLCmdObject {
        drawInfo: IGFXDrawInfo;
        constructor();
        clear(): void;
    }
    export class WebGLCmdUpdateBuffer extends WebGLCmdObject {
        gpuBuffer: WebGLGPUBuffer | null;
        buffer: GFXBufferSource | null;
        offset: number;
        size: number;
        constructor();
        clear(): void;
    }
    export class WebGLGFXTextureSubres {
        baseMipLevel: number;
        levelCount: number;
        baseArrayLayer: number;
        layerCount: number;
    }
    export class WebGLGFXBufferTextureCopy {
        buffOffset: number;
        buffStride: number;
        buffTexHeight: number;
        texOffset: number[];
        texExtent: number[];
        texSubres: WebGLGFXTextureSubres;
    }
    export class WebGLCmdCopyBufferToTexture extends WebGLCmdObject {
        gpuBuffer: WebGLGPUBuffer | null;
        gpuTexture: WebGLGPUTexture | null;
        dstLayout: GFXTextureLayout | null;
        regions: GFXBufferTextureCopy[];
        constructor();
        clear(): void;
    }
    export class WebGLCmdPackage {
        cmds: CachedArray<WebGLCmd>;
        beginRenderPassCmds: CachedArray<WebGLCmdBeginRenderPass>;
        bindStatesCmds: CachedArray<WebGLCmdBindStates>;
        drawCmds: CachedArray<WebGLCmdDraw>;
        updateBufferCmds: CachedArray<WebGLCmdUpdateBuffer>;
        copyBufferToTextureCmds: CachedArray<WebGLCmdCopyBufferToTexture>;
        clearCmds(allocator: WebGLGFXCommandAllocator): void;
    }
    export function WebGLCmdFuncCreateBuffer(device: WebGLGFXDevice, gpuBuffer: WebGLGPUBuffer): void;
    export function WebGLCmdFuncDestroyBuffer(device: WebGLGFXDevice, gpuBuffer: WebGLGPUBuffer): void;
    export function WebGLCmdFuncResizeBuffer(device: WebGLGFXDevice, gpuBuffer: WebGLGPUBuffer): void;
    export function WebGLCmdFuncUpdateBuffer(device: WebGLGFXDevice, gpuBuffer: WebGLGPUBuffer, buffer: GFXBufferSource, offset: number, size: number): void;
    export function WebGLCmdFuncCreateTexture(device: WebGLGFXDevice, gpuTexture: WebGLGPUTexture): void;
    export function WebGLCmdFuncDestroyTexture(device: WebGLGFXDevice, gpuTexture: WebGLGPUTexture): void;
    export function WebGLCmdFuncResizeTexture(device: WebGLGFXDevice, gpuTexture: WebGLGPUTexture): void;
    export function WebGLCmdFuncCreateFramebuffer(device: WebGLGFXDevice, gpuFramebuffer: WebGLGPUFramebuffer): void;
    export function WebGLCmdFuncDestroyFramebuffer(device: WebGLGFXDevice, gpuFramebuffer: WebGLGPUFramebuffer): void;
    export function WebGLCmdFuncCreateShader(device: WebGLGFXDevice, gpuShader: WebGLGPUShader): void;
    export function WebGLCmdFuncDestroyShader(device: WebGLGFXDevice, gpuShader: WebGLGPUShader): void;
    export function WebGLCmdFuncCreateInputAssember(device: WebGLGFXDevice, gpuInputAssembler: IWebGLGPUInputAssembler): void;
    export function WebGLCmdFuncDestroyInputAssembler(device: WebGLGFXDevice, gpuInputAssembler: IWebGLGPUInputAssembler): void;
    export function WebGLCmdFuncExecuteCmds(device: WebGLGFXDevice, cmdPackage: WebGLCmdPackage): void;
    export function WebGLCmdFuncCopyTexImagesToTexture(device: WebGLGFXDevice, texImages: TexImageSource[], gpuTexture: WebGLGPUTexture, regions: GFXBufferTextureCopy[]): void;
    export function WebGLCmdFuncCopyBuffersToTexture(device: WebGLGFXDevice, buffers: ArrayBuffer[], gpuTexture: WebGLGPUTexture, regions: GFXBufferTextureCopy[]): void;
}
declare module "cocos/gfx/webgl/webgl-buffer" {
    import { GFXBuffer, GFXBufferSource, IGFXBufferInfo } from "cocos/gfx/buffer";
    import { GFXDevice } from "cocos/gfx/device";
    import { WebGLGPUBuffer } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXBuffer extends GFXBuffer {
        readonly gpuBuffer: WebGLGPUBuffer;
        private _gpuBuffer;
        private _uniformBuffer;
        private _indirectBuffer;
        constructor(device: GFXDevice);
        initialize(info: IGFXBufferInfo): boolean;
        destroy(): void;
        resize(size: number): void;
        update(buffer: GFXBufferSource, offset?: number, size?: number): void;
    }
}
declare module "cocos/gfx/webgl/webgl-sampler" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXSampler, IGFXSamplerInfo } from "cocos/gfx/sampler";
    import { WebGLGPUSampler } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXSampler extends GFXSampler {
        readonly gpuSampler: WebGLGPUSampler;
        private _gpuSampler;
        constructor(device: GFXDevice);
        initialize(info: IGFXSamplerInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl/webgl-binding-layout" {
    import { GFXBindingLayout, IGFXBindingLayoutInfo } from "cocos/gfx/binding-layout";
    import { GFXDevice } from "cocos/gfx/device";
    import { WebGLGPUBindingLayout } from "cocos/gfx/webgl/webgl-gpu-objects";
    export class WebGLGFXBindingLayout extends GFXBindingLayout {
        readonly gpuBindingLayout: WebGLGPUBindingLayout;
        private _gpuBindingLayout;
        constructor(device: GFXDevice);
        initialize(info: IGFXBindingLayoutInfo): boolean;
        destroy(): void;
        update(): void;
    }
}
declare module "cocos/gfx/webgl/webgl-queue" {
    import { GFXCommandBuffer } from "cocos/gfx/command-buffer";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXQueue, IGFXQueueInfo } from "cocos/gfx/queue";
    export class WebGLGFXQueue extends GFXQueue {
        numDrawCalls: number;
        numTris: number;
        private _isAsync;
        constructor(device: GFXDevice);
        initialize(info: IGFXQueueInfo): boolean;
        destroy(): void;
        submit(cmdBuffs: GFXCommandBuffer[], fence?: any): void;
        clear(): void;
    }
}
declare module "cocos/gfx/webgl/webgl-window" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXWindow, IGFXWindowInfo } from "cocos/gfx/window";
    export class WebGLGFXWindow extends GFXWindow {
        constructor(device: GFXDevice);
        initialize(info: IGFXWindowInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
    }
}
declare module "cocos/gfx/webgl/webgl-device" {
    import { GFXBindingLayout, IGFXBindingLayoutInfo } from "cocos/gfx/binding-layout";
    import { GFXBuffer, IGFXBufferInfo } from "cocos/gfx/buffer";
    import { GFXCommandAllocator, IGFXCommandAllocatorInfo } from "cocos/gfx/command-allocator";
    import { GFXCommandBuffer, IGFXCommandBufferInfo } from "cocos/gfx/command-buffer";
    import { GFXBufferTextureCopy, GFXFilter, IGFXRect } from "cocos/gfx/define";
    import { GFXDevice, IGFXDeviceInfo } from "cocos/gfx/device";
    import { GFXFramebuffer, IGFXFramebufferInfo } from "cocos/gfx/framebuffer";
    import { GFXInputAssembler, IGFXInputAssemblerInfo } from "cocos/gfx/input-assembler";
    import { GFXPipelineLayout, IGFXPipelineLayoutInfo } from "cocos/gfx/pipeline-layout";
    import { GFXPipelineState, IGFXPipelineStateInfo } from "cocos/gfx/pipeline-state";
    import { GFXQueue, IGFXQueueInfo } from "cocos/gfx/queue";
    import { GFXRenderPass, IGFXRenderPassInfo } from "cocos/gfx/render-pass";
    import { GFXSampler, IGFXSamplerInfo } from "cocos/gfx/sampler";
    import { GFXShader, IGFXShaderInfo } from "cocos/gfx/shader";
    import { GFXTexture, IGFXTextureInfo } from "cocos/gfx/texture";
    import { GFXTextureView, IGFXTextureViewInfo } from "cocos/gfx/texture-view";
    import { GFXWindow, IGFXWindowInfo } from "cocos/gfx/window";
    import { WebGLGFXQueue } from "cocos/gfx/webgl/webgl-queue";
    import { WebGLStateCache } from "cocos/gfx/webgl/webgl-state-cache";
    import { WebGLGFXTexture } from "cocos/gfx/webgl/webgl-texture";
    export class WebGLGFXDevice extends GFXDevice {
        readonly gl: WebGLRenderingContext;
        readonly webGLQueue: WebGLGFXQueue;
        readonly isAntialias: boolean;
        readonly isPremultipliedAlpha: boolean;
        readonly useVAO: boolean;
        readonly EXT_texture_filter_anisotropic: EXT_texture_filter_anisotropic | null;
        readonly EXT_frag_depth: EXT_frag_depth | null;
        readonly EXT_shader_texture_lod: EXT_shader_texture_lod | null;
        readonly EXT_sRGB: EXT_sRGB | null;
        readonly OES_vertex_array_object: OES_vertex_array_object | null;
        readonly WEBGL_color_buffer_float: WEBGL_color_buffer_float | null;
        readonly WEBGL_compressed_texture_etc1: WEBGL_compressed_texture_etc1 | null;
        readonly WEBGL_compressed_texture_pvrtc: WEBGL_compressed_texture_pvrtc | null;
        readonly WEBGL_compressed_texture_astc: WEBGL_compressed_texture_astc | null;
        readonly WEBGL_compressed_texture_s3tc: WEBGL_compressed_texture_s3tc | null;
        readonly WEBGL_compressed_texture_s3tc_srgb: WEBGL_compressed_texture_s3tc_srgb | null;
        readonly WEBGL_debug_shaders: WEBGL_debug_shaders | null;
        readonly WEBGL_draw_buffers: WEBGL_draw_buffers | null;
        readonly WEBGL_lose_context: WEBGL_lose_context | null;
        readonly WEBGL_depth_texture: WEBGL_depth_texture | null;
        readonly WEBGL_debug_renderer_info: WEBGL_debug_renderer_info | null;
        readonly OES_texture_half_float: OES_texture_half_float | null;
        readonly OES_texture_half_float_linear: OES_texture_half_float_linear | null;
        readonly OES_texture_float: OES_texture_float | null;
        readonly OES_standard_derivatives: OES_standard_derivatives | null;
        readonly OES_element_index_uint: OES_element_index_uint | null;
        readonly ANGLE_instanced_arrays: ANGLE_instanced_arrays | null;
        stateCache: WebGLStateCache;
        nullTex2D: WebGLGFXTexture | null;
        nullTexCube: WebGLGFXTexture | null;
        private _webGLRC;
        private _isAntialias;
        private _isPremultipliedAlpha;
        private _useVAO;
        private _extensions;
        private _EXT_texture_filter_anisotropic;
        private _EXT_frag_depth;
        private _EXT_shader_texture_lod;
        private _EXT_sRGB;
        private _OES_vertex_array_object;
        private _EXT_color_buffer_half_float;
        private _WEBGL_color_buffer_float;
        private _WEBGL_compressed_texture_etc1;
        private _WEBGL_compressed_texture_etc;
        private _WEBGL_compressed_texture_pvrtc;
        private _WEBGL_compressed_texture_astc;
        private _WEBGL_compressed_texture_s3tc;
        private _WEBGL_compressed_texture_s3tc_srgb;
        private _WEBGL_debug_shaders;
        private _WEBGL_draw_buffers;
        private _WEBGL_lose_context;
        private _WEBGL_depth_texture;
        private _WEBGL_debug_renderer_info;
        private _OES_texture_half_float;
        private _OES_texture_half_float_linear;
        private _OES_texture_float;
        private _OES_texture_float_linear;
        private _OES_standard_derivatives;
        private _OES_element_index_uint;
        private _ANGLE_instanced_arrays;
        constructor();
        initialize(info: IGFXDeviceInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
        createBuffer(info: IGFXBufferInfo): GFXBuffer;
        createTexture(info: IGFXTextureInfo): GFXTexture;
        createTextureView(info: IGFXTextureViewInfo): GFXTextureView;
        createSampler(info: IGFXSamplerInfo): GFXSampler;
        createBindingLayout(info: IGFXBindingLayoutInfo): GFXBindingLayout;
        createShader(info: IGFXShaderInfo): GFXShader;
        createInputAssembler(info: IGFXInputAssemblerInfo): GFXInputAssembler;
        createRenderPass(info: IGFXRenderPassInfo): GFXRenderPass;
        createFramebuffer(info: IGFXFramebufferInfo): GFXFramebuffer;
        createPipelineLayout(info: IGFXPipelineLayoutInfo): GFXPipelineLayout;
        createPipelineState(info: IGFXPipelineStateInfo): GFXPipelineState;
        createCommandAllocator(info: IGFXCommandAllocatorInfo): GFXCommandAllocator;
        createCommandBuffer(info: IGFXCommandBufferInfo): GFXCommandBuffer;
        createQueue(info: IGFXQueueInfo): GFXQueue;
        createWindow(info: IGFXWindowInfo): GFXWindow;
        present(): void;
        copyBuffersToTexture(buffers: ArrayBuffer[], texture: GFXTexture, regions: GFXBufferTextureCopy[]): void;
        copyTexImagesToTexture(texImages: TexImageSource[], texture: GFXTexture, regions: GFXBufferTextureCopy[]): void;
        copyFramebufferToBuffer(srcFramebuffer: GFXFramebuffer, dstBuffer: ArrayBuffer, regions: GFXBufferTextureCopy[]): void;
        blitFramebuffer(src: GFXFramebuffer, dst: GFXFramebuffer, srcRect: IGFXRect, dstRect: IGFXRect, filter: GFXFilter): void;
        private initStates;
    }
}
declare module "cocos/gfx/webgl2/webgl2-command-allocator" {
    import { CachedArray } from "cocos/core/memop/cached-array";
    import { GFXCommandAllocator, IGFXCommandAllocatorInfo } from "cocos/gfx/command-allocator";
    import { GFXDevice } from "cocos/gfx/device";
    import { WebGL2CmdBeginRenderPass, WebGL2CmdBindStates, WebGL2CmdCopyBufferToTexture, WebGL2CmdDraw, WebGL2CmdObject, WebGL2CmdPackage, WebGL2CmdUpdateBuffer } from "cocos/gfx/webgl2/webgl2-commands";
    export class WebGL2GFXCommandPool<T extends WebGL2CmdObject> {
        private _frees;
        private _freeIdx;
        private _freeCmds;
        constructor(clazz: new () => T, count: number);
        alloc(clazz: new () => T): T;
        free(cmd: T): void;
        freeCmds(cmds: CachedArray<T>): void;
        release(): void;
    }
    export class WebGL2GFXCommandAllocator extends GFXCommandAllocator {
        beginRenderPassCmdPool: WebGL2GFXCommandPool<WebGL2CmdBeginRenderPass>;
        bindStatesCmdPool: WebGL2GFXCommandPool<WebGL2CmdBindStates>;
        drawCmdPool: WebGL2GFXCommandPool<WebGL2CmdDraw>;
        updateBufferCmdPool: WebGL2GFXCommandPool<WebGL2CmdUpdateBuffer>;
        copyBufferToTextureCmdPool: WebGL2GFXCommandPool<WebGL2CmdCopyBufferToTexture>;
        constructor(device: GFXDevice);
        initialize(info: IGFXCommandAllocatorInfo): boolean;
        destroy(): void;
        clearCmds(cmdPackage: WebGL2CmdPackage): void;
        releaseCmds(): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-gpu-objects" {
    import { IGFXDrawInfo } from "cocos/gfx/buffer";
    import { GFXAddress, GFXBindingType, GFXBufferUsage, GFXDynamicState, GFXFilter, GFXFormat, GFXMemoryUsage, GFXSampleCount, GFXShaderType, GFXTextureFlags, GFXTextureType, GFXTextureUsage, GFXTextureViewType, GFXType } from "cocos/gfx/define";
    import { IGFXAttribute } from "cocos/gfx/input-assembler";
    import { GFXBlendState, GFXDepthStencilState, GFXRasterizerState } from "cocos/gfx/pipeline-state";
    import { GFXColorAttachment, GFXDepthStencilAttachment } from "cocos/gfx/render-pass";
    import { GFXUniformBlock, GFXUniformSampler, IGFXShaderMacro } from "cocos/gfx/shader";
    export interface IWebGL2GPUUniformInfo {
        name: string;
        type: GFXType;
        count: number;
        offset: number;
        view: Float32Array | Int32Array;
        isDirty: boolean;
    }
    export class WebGL2GPUBuffer {
        usage: GFXBufferUsage;
        memUsage: GFXMemoryUsage;
        size: number;
        stride: number;
        glTarget: GLenum;
        glBuffer: WebGLBuffer | null;
        buffer: ArrayBuffer | null;
        vf32: Float32Array | null;
        indirects: IGFXDrawInfo[];
    }
    export class WebGL2GPUTexture {
        type: GFXTextureType;
        viewType: GFXTextureViewType;
        format: GFXFormat;
        usage: GFXTextureUsage;
        width: number;
        height: number;
        depth: number;
        size: number;
        arrayLayer: number;
        mipLevel: number;
        samples: GFXSampleCount;
        flags: GFXTextureFlags;
        isPowerOf2: boolean;
        glTarget: GLenum;
        glInternelFmt: GLenum;
        glFormat: GLenum;
        glType: GLenum;
        glUsage: GLenum;
        glTexture: WebGLTexture | null;
        glRenderbuffer: WebGLRenderbuffer | null;
        glWrapS: GLenum;
        glWrapT: GLenum;
        glMinFilter: GLenum;
        glMagFilter: GLenum;
    }
    export class WebGL2GPUTextureView {
        gpuTexture: WebGL2GPUTexture;
        type: GFXTextureViewType;
        format: GFXFormat;
        baseLevel: number;
        levelCount: number;
        constructor(texture: WebGL2GPUTexture);
    }
    export class WebGL2GPURenderPass {
        colorAttachments: GFXColorAttachment[];
        depthStencilAttachment: GFXDepthStencilAttachment | null;
    }
    export class WebGL2GPUFramebuffer {
        gpuRenderPass: WebGL2GPURenderPass;
        gpuColorViews: WebGL2GPUTextureView[];
        gpuDepthStencilView: WebGL2GPUTextureView | null;
        isOffscreen?: boolean;
        glFramebuffer: WebGLFramebuffer | null;
        constructor(gpuRenderPass: WebGL2GPURenderPass);
    }
    export class WebGL2GPUSampler {
        glSampler: WebGLSampler | null;
        minFilter: GFXFilter;
        magFilter: GFXFilter;
        mipFilter: GFXFilter;
        addressU: GFXAddress;
        addressV: GFXAddress;
        addressW: GFXAddress;
        minLOD: number;
        maxLOD: number;
        glMinFilter: GLenum;
        glMagFilter: GLenum;
        glWrapS: GLenum;
        glWrapT: GLenum;
        glWrapR: GLenum;
    }
    export class WebGL2GPUInput {
        binding: number;
        name: string;
        type: GFXType;
        stride: number;
        count: number;
        size: number;
        glType: GLenum;
        glLoc: GLint;
    }
    export interface IWebGL2GPUUniform {
        binding: number;
        name: string;
        type: GFXType;
        stride: number;
        count: number;
        size: number;
        offset: number;
        glType: GLenum;
        glLoc: WebGLUniformLocation;
        array: number[];
        begin: number;
        isFirst: boolean;
    }
    export class WebGL2GPUUniformBlock {
        binding: number;
        idx: number;
        name: string;
        size: number;
        glUniforms: IWebGL2GPUUniform[];
        glActiveUniforms: IWebGL2GPUUniform[];
        isUniformPackage: boolean;
    }
    export class WebGL2GPUUniformSampler {
        binding: number;
        name: string;
        type: GFXType;
        units: number[];
        glType: GLenum;
        glLoc: WebGLUniformLocation;
    }
    export class WebGL2GPUShaderStage {
        type: GFXShaderType;
        source: string;
        macros: IGFXShaderMacro[];
        glShader: WebGLShader | null;
    }
    export class WebGL2GPUShader {
        name: string;
        blocks: GFXUniformBlock[];
        samplers: GFXUniformSampler[];
        gpuStages: WebGL2GPUShaderStage[];
        glProgram: WebGLProgram | null;
        glInputs: WebGL2GPUInput[];
        glUniforms: IWebGL2GPUUniform[];
        glBlocks: WebGL2GPUUniformBlock[];
        glSamplers: WebGL2GPUUniformSampler[];
    }
    export class WebGL2GPUPipelineLayout {
    }
    export class WebGL2GPUPipelineState {
        glPrimitive: GLenum;
        gpuShader: WebGL2GPUShader | null;
        rs: GFXRasterizerState;
        dss: GFXDepthStencilState;
        bs: GFXBlendState;
        dynamicStates: GFXDynamicState[];
        gpuLayout: WebGL2GPUPipelineLayout | null;
        gpuRenderPass: WebGL2GPURenderPass | null;
    }
    export class WebGL2GPUBinding {
        binding: number;
        type: GFXBindingType;
        name: string;
        gpuBuffer: WebGL2GPUBuffer | null;
        gpuTexView: WebGL2GPUTextureView | null;
        gpuSampler: WebGL2GPUSampler | null;
    }
    export class WebGL2GPUBindingLayout {
        gpuBindings: WebGL2GPUBinding[];
    }
    export class WebGL2Attrib {
        name: string;
        glBuffer: WebGLBuffer | null;
        glType: GLenum;
        size: number;
        count: number;
        stride: number;
        componentCount: number;
        isNormalized: boolean;
        isInstanced: boolean;
        offset: number;
    }
    export interface IWebGL2GPUInputAssembler {
        attributes: IGFXAttribute[];
        gpuVertexBuffers: WebGL2GPUBuffer[];
        gpuIndexBuffer: WebGL2GPUBuffer | null;
        gpuIndirectBuffer: WebGL2GPUBuffer | null;
        glAttribs: WebGL2Attrib[];
        glIndexType: GLenum;
        glVAOs: Map<WebGLProgram, WebGLVertexArrayObject>;
    }
}
declare module "cocos/gfx/webgl2/webgl2-render-pass" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXRenderPass, IGFXRenderPassInfo } from "cocos/gfx/render-pass";
    import { WebGL2GPURenderPass } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXRenderPass extends GFXRenderPass {
        readonly gpuRenderPass: WebGL2GPURenderPass;
        private _gpuRenderPass;
        constructor(device: GFXDevice);
        initialize(info: IGFXRenderPassInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-texture" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXTexture, IGFXTextureInfo } from "cocos/gfx/texture";
    import { WebGL2GPUTexture } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXTexture extends GFXTexture {
        readonly gpuTexture: WebGL2GPUTexture;
        private _gpuTexture;
        constructor(device: GFXDevice);
        initialize(info: IGFXTextureInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-texture-view" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXTextureView, IGFXTextureViewInfo } from "cocos/gfx/texture-view";
    import { WebGL2GPUTextureView } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXTextureView extends GFXTextureView {
        readonly gpuTextureView: WebGL2GPUTextureView;
        private _gpuTextureView;
        constructor(device: GFXDevice);
        initialize(info: IGFXTextureViewInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-framebuffer" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXFramebuffer, IGFXFramebufferInfo } from "cocos/gfx/framebuffer";
    import { WebGL2GPUFramebuffer } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXFramebuffer extends GFXFramebuffer {
        readonly gpuFramebuffer: WebGL2GPUFramebuffer;
        private _gpuFramebuffer;
        constructor(device: GFXDevice);
        initialize(info: IGFXFramebufferInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-input-assembler" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXInputAssembler, IGFXInputAssemblerInfo } from "cocos/gfx/input-assembler";
    import { WebGL2CmdDraw } from "cocos/gfx/webgl2/webgl2-commands";
    import { IWebGL2GPUInputAssembler } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXInputAssembler extends GFXInputAssembler {
        readonly gpuInputAssembler: IWebGL2GPUInputAssembler;
        private _gpuInputAssembler;
        constructor(device: GFXDevice);
        initialize(info: IGFXInputAssemblerInfo): boolean;
        destroy(): void;
        extractCmdDraw(cmd: WebGL2CmdDraw): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-pipeline-layout" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXPipelineLayout, IGFXPipelineLayoutInfo } from "cocos/gfx/pipeline-layout";
    import { WebGL2GPUPipelineLayout } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXPipelineLayout extends GFXPipelineLayout {
        readonly gpuPipelineLayout: WebGL2GPUPipelineLayout;
        private _gpuPipelineLayout;
        constructor(device: GFXDevice);
        initialize(info: IGFXPipelineLayoutInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-shader" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXShader, IGFXShaderInfo } from "cocos/gfx/shader";
    import { WebGL2GPUShader } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXShader extends GFXShader {
        readonly gpuShader: WebGL2GPUShader;
        private _gpuShader;
        constructor(device: GFXDevice);
        initialize(info: IGFXShaderInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-pipeline-state" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXPipelineState, IGFXPipelineStateInfo } from "cocos/gfx/pipeline-state";
    import { WebGL2GPUPipelineState } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXPipelineState extends GFXPipelineState {
        readonly gpuPipelineState: WebGL2GPUPipelineState;
        private _gpuPipelineState;
        constructor(device: GFXDevice);
        initialize(info: IGFXPipelineStateInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-command-buffer" {
    import { GFXBindingLayout } from "cocos/gfx/binding-layout";
    import { GFXBuffer, GFXBufferSource } from "cocos/gfx/buffer";
    import { GFXCommandBuffer, IGFXCommandBufferInfo } from "cocos/gfx/command-buffer";
    import { GFXBufferTextureCopy, GFXClearFlag, GFXStencilFace, GFXTextureLayout, IGFXColor, IGFXRect, IGFXViewport } from "cocos/gfx/define";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXFramebuffer } from "cocos/gfx/framebuffer";
    import { GFXInputAssembler } from "cocos/gfx/input-assembler";
    import { GFXPipelineState } from "cocos/gfx/pipeline-state";
    import { GFXTexture } from "cocos/gfx/texture";
    import { WebGL2CmdPackage } from "cocos/gfx/webgl2/webgl2-commands";
    import { WebGL2GFXDevice } from "cocos/gfx/webgl2/webgl2-device";
    export interface IWebGL2DepthBias {
        constantFactor: number;
        clamp: number;
        slopeFactor: number;
    }
    export interface IWebGL2DepthBounds {
        minBounds: number;
        maxBounds: number;
    }
    export interface IWebGL2StencilWriteMask {
        face: GFXStencilFace;
        writeMask: number;
    }
    export interface IWebGL2StencilCompareMask {
        face: GFXStencilFace;
        reference: number;
        compareMask: number;
    }
    export class WebGL2GFXCommandBuffer extends GFXCommandBuffer {
        cmdPackage: WebGL2CmdPackage;
        private _webGLAllocator;
        private _isInRenderPass;
        private _curGPUPipelineState;
        private _curGPUBindingLayout;
        private _curGPUInputAssembler;
        private _curViewport;
        private _curScissor;
        private _curLineWidth;
        private _curDepthBias;
        private _curBlendConstants;
        private _curDepthBounds;
        private _curStencilWriteMask;
        private _curStencilCompareMask;
        private _isStateInvalied;
        constructor(device: GFXDevice);
        initialize(info: IGFXCommandBufferInfo): boolean;
        destroy(): void;
        begin(): void;
        end(): void;
        beginRenderPass(framebuffer: GFXFramebuffer, renderArea: IGFXRect, clearFlag: GFXClearFlag, clearColors: IGFXColor[], clearDepth: number, clearStencil: number): void;
        endRenderPass(): void;
        bindPipelineState(pipelineState: GFXPipelineState): void;
        bindBindingLayout(bindingLayout: GFXBindingLayout): void;
        bindInputAssembler(inputAssembler: GFXInputAssembler): void;
        setViewport(viewport: IGFXViewport): void;
        setScissor(scissor: IGFXRect): void;
        setLineWidth(lineWidth: number): void;
        setDepthBias(depthBiasConstantFacotr: number, depthBiasClamp: number, depthBiasSlopeFactor: number): void;
        setBlendConstants(blendConstants: number[]): void;
        setDepthBound(minDepthBounds: number, maxDepthBounds: number): void;
        setStencilWriteMask(face: GFXStencilFace, writeMask: number): void;
        setStencilCompareMask(face: GFXStencilFace, reference: number, compareMask: number): void;
        draw(inputAssembler: GFXInputAssembler): void;
        updateBuffer(buffer: GFXBuffer, data: GFXBufferSource, offset?: number, size?: number): void;
        copyBufferToTexture(srcBuff: GFXBuffer, dstTex: GFXTexture, dstLayout: GFXTextureLayout, regions: GFXBufferTextureCopy[]): void;
        execute(cmdBuffs: GFXCommandBuffer[], count: number): void;
        readonly webGLDevice: WebGL2GFXDevice;
        private bindStates;
    }
}
declare module "cocos/gfx/webgl2/webgl2-state-cache" {
    import { IGFXRect, IGFXViewport } from "cocos/gfx/define";
    import { GFXBlendState, GFXDepthStencilState, GFXRasterizerState } from "cocos/gfx/pipeline-state";
    export interface IWebGL2TexUnit {
        glTexture: WebGLTexture | null;
    }
    export class WebGL2StateCache {
        glArrayBuffer: WebGLBuffer | null;
        glElementArrayBuffer: WebGLBuffer | null;
        glUniformBuffer: WebGLBuffer | null;
        glBindUBOs: Array<WebGLBuffer | null>;
        glVAO: WebGLVertexArrayObject | null;
        texUnit: number;
        glTex2DUnits: IWebGL2TexUnit[];
        glTexCubeUnits: IWebGL2TexUnit[];
        glSamplerUnits: Array<WebGLSampler | null>;
        glRenderbuffer: WebGLRenderbuffer | null;
        glFramebuffer: WebGLFramebuffer | null;
        glReadFramebuffer: WebGLFramebuffer | null;
        viewport: IGFXViewport;
        scissorRect: IGFXRect;
        rs: GFXRasterizerState;
        dss: GFXDepthStencilState;
        bs: GFXBlendState;
        glProgram: WebGLProgram | null;
        glEnabledAttribLocs: boolean[];
        glCurrentAttribLocs: boolean[];
        constructor();
    }
}
declare module "cocos/gfx/webgl2/webgl2-commands" {
    import { CachedArray } from "cocos/core/memop/cached-array";
    import { GFXBufferSource, IGFXDrawInfo } from "cocos/gfx/buffer";
    import { GFXBufferTextureCopy, GFXClearFlag, GFXFilter, GFXTextureLayout, IGFXColor, IGFXRect, IGFXViewport } from "cocos/gfx/define";
    import { WebGL2GFXCommandAllocator } from "cocos/gfx/webgl2/webgl2-command-allocator";
    import { IWebGL2DepthBias, IWebGL2DepthBounds, IWebGL2StencilCompareMask, IWebGL2StencilWriteMask } from "cocos/gfx/webgl2/webgl2-command-buffer";
    import { WebGL2GFXDevice } from "cocos/gfx/webgl2/webgl2-device";
    import { IWebGL2GPUInputAssembler, WebGL2GPUBindingLayout, WebGL2GPUBuffer, WebGL2GPUFramebuffer, WebGL2GPUPipelineState, WebGL2GPUSampler, WebGL2GPUShader, WebGL2GPUTexture } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export enum WebGL2Cmd {
        BEGIN_RENDER_PASS = 0,
        END_RENDER_PASS = 1,
        BIND_STATES = 2,
        DRAW = 3,
        UPDATE_BUFFER = 4,
        COPY_BUFFER_TO_TEXTURE = 5,
        COUNT = 6
    }
    export abstract class WebGL2CmdObject {
        cmdType: WebGL2Cmd;
        refCount: number;
        constructor(type: WebGL2Cmd);
        abstract clear(): any;
    }
    export class WebGL2CmdBeginRenderPass extends WebGL2CmdObject {
        gpuFramebuffer: WebGL2GPUFramebuffer | null;
        renderArea: IGFXRect;
        clearFlag: GFXClearFlag;
        clearColors: IGFXColor[];
        clearDepth: number;
        clearStencil: number;
        constructor();
        clear(): void;
    }
    export class WebGL2CmdBindStates extends WebGL2CmdObject {
        gpuPipelineState: WebGL2GPUPipelineState | null;
        gpuBindingLayout: WebGL2GPUBindingLayout | null;
        gpuInputAssembler: IWebGL2GPUInputAssembler | null;
        viewport: IGFXViewport | null;
        scissor: IGFXRect | null;
        lineWidth: number | null;
        depthBias: IWebGL2DepthBias | null;
        blendConstants: number[] | null;
        depthBounds: IWebGL2DepthBounds | null;
        stencilWriteMask: IWebGL2StencilWriteMask | null;
        stencilCompareMask: IWebGL2StencilCompareMask | null;
        constructor();
        clear(): void;
    }
    export class WebGL2CmdDraw extends WebGL2CmdObject {
        drawInfo: IGFXDrawInfo;
        constructor();
        clear(): void;
    }
    export class WebGL2CmdUpdateBuffer extends WebGL2CmdObject {
        gpuBuffer: WebGL2GPUBuffer | null;
        buffer: GFXBufferSource | null;
        offset: number;
        size: number;
        constructor();
        clear(): void;
    }
    export class WebGL2GFXTextureSubres {
        baseMipLevel: number;
        levelCount: number;
        baseArrayLayer: number;
        layerCount: number;
    }
    export class WebGL2GFXBufferTextureCopy {
        buffOffset: number;
        buffStride: number;
        buffTexHeight: number;
        texOffset: number[];
        texExtent: number[];
        texSubres: WebGL2GFXTextureSubres;
    }
    export class WebGL2CmdCopyBufferToTexture extends WebGL2CmdObject {
        gpuBuffer: WebGL2GPUBuffer | null;
        gpuTexture: WebGL2GPUTexture | null;
        dstLayout: GFXTextureLayout | null;
        regions: GFXBufferTextureCopy[];
        constructor();
        clear(): void;
    }
    export class WebGL2CmdPackage {
        cmds: CachedArray<WebGL2Cmd>;
        beginRenderPassCmds: CachedArray<WebGL2CmdBeginRenderPass>;
        bindStatesCmds: CachedArray<WebGL2CmdBindStates>;
        drawCmds: CachedArray<WebGL2CmdDraw>;
        updateBufferCmds: CachedArray<WebGL2CmdUpdateBuffer>;
        copyBufferToTextureCmds: CachedArray<WebGL2CmdCopyBufferToTexture>;
        clearCmds(allocator: WebGL2GFXCommandAllocator): void;
    }
    export function WebGL2CmdFuncCreateBuffer(device: WebGL2GFXDevice, gpuBuffer: WebGL2GPUBuffer): void;
    export function WebGL2CmdFuncDestroyBuffer(device: WebGL2GFXDevice, gpuBuffer: WebGL2GPUBuffer): void;
    export function WebGL2CmdFuncResizeBuffer(device: WebGL2GFXDevice, gpuBuffer: WebGL2GPUBuffer): void;
    export function WebGL2CmdFuncUpdateBuffer(device: WebGL2GFXDevice, gpuBuffer: WebGL2GPUBuffer, buffer: GFXBufferSource, offset: number, size: number): void;
    export function WebGL2CmdFuncCreateTexture(device: WebGL2GFXDevice, gpuTexture: WebGL2GPUTexture): void;
    export function WebGL2CmdFuncDestroyTexture(device: WebGL2GFXDevice, gpuTexture: WebGL2GPUTexture): void;
    export function WebGL2CmdFuncResizeTexture(device: WebGL2GFXDevice, gpuTexture: WebGL2GPUTexture): void;
    export function WebGL2CmdFuncCreateSampler(device: WebGL2GFXDevice, gpuSampler: WebGL2GPUSampler): void;
    export function WebGL2CmdFuncDestroySampler(device: WebGL2GFXDevice, gpuSampler: WebGL2GPUSampler): void;
    export function WebGL2CmdFuncCreateFramebuffer(device: WebGL2GFXDevice, gpuFramebuffer: WebGL2GPUFramebuffer): void;
    export function WebGL2CmdFuncDestroyFramebuffer(device: WebGL2GFXDevice, gpuFramebuffer: WebGL2GPUFramebuffer): void;
    export function WebGL2CmdFuncCreateShader(device: WebGL2GFXDevice, gpuShader: WebGL2GPUShader): void;
    export function WebGL2CmdFuncDestroyShader(device: WebGL2GFXDevice, gpuShader: WebGL2GPUShader): void;
    export function WebGL2CmdFuncCreateInputAssember(device: WebGL2GFXDevice, gpuInputAssembler: IWebGL2GPUInputAssembler): void;
    export function WebGL2CmdFuncDestroyInputAssembler(device: WebGL2GFXDevice, gpuInputAssembler: IWebGL2GPUInputAssembler): void;
    export function WebGL2CmdFuncExecuteCmds(device: WebGL2GFXDevice, cmdPackage: WebGL2CmdPackage): void;
    export function WebGL2CmdFuncCopyTexImagesToTexture(device: WebGL2GFXDevice, texImages: TexImageSource[], gpuTexture: WebGL2GPUTexture, regions: GFXBufferTextureCopy[]): void;
    export function WebGL2CmdFuncCopyBuffersToTexture(device: WebGL2GFXDevice, buffers: ArrayBuffer[], gpuTexture: WebGL2GPUTexture, regions: GFXBufferTextureCopy[]): void;
    export function WebGL2CmdFuncBlitFramebuffer(device: WebGL2GFXDevice, src: WebGL2GPUFramebuffer, dst: WebGL2GPUFramebuffer, srcRect: IGFXRect, dstRect: IGFXRect, filter: GFXFilter): void;
}
declare module "cocos/gfx/webgl2/webgl2-buffer" {
    import { GFXBuffer, GFXBufferSource, IGFXBufferInfo } from "cocos/gfx/buffer";
    import { GFXDevice } from "cocos/gfx/device";
    import { WebGL2GPUBuffer } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXBuffer extends GFXBuffer {
        readonly gpuBuffer: WebGL2GPUBuffer;
        private _gpuBuffer;
        private _indirectBuffer;
        constructor(device: GFXDevice);
        initialize(info: IGFXBufferInfo): boolean;
        destroy(): void;
        resize(size: number): void;
        update(buffer: GFXBufferSource, offset?: number, size?: number): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-sampler" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXSampler, IGFXSamplerInfo } from "cocos/gfx/sampler";
    import { WebGL2GPUSampler } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXSampler extends GFXSampler {
        readonly gpuSampler: WebGL2GPUSampler;
        private _gpuSampler;
        constructor(device: GFXDevice);
        initialize(info: IGFXSamplerInfo): boolean;
        destroy(): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-binding-layout" {
    import { GFXBindingLayout, IGFXBindingLayoutInfo } from "cocos/gfx/binding-layout";
    import { GFXDevice } from "cocos/gfx/device";
    import { WebGL2GPUBindingLayout } from "cocos/gfx/webgl2/webgl2-gpu-objects";
    export class WebGL2GFXBindingLayout extends GFXBindingLayout {
        readonly gpuBindingLayout: WebGL2GPUBindingLayout;
        private _gpuBindingLayout;
        constructor(device: GFXDevice);
        initialize(info: IGFXBindingLayoutInfo): boolean;
        destroy(): void;
        update(): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-queue" {
    import { GFXCommandBuffer } from "cocos/gfx/command-buffer";
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXQueue, IGFXQueueInfo } from "cocos/gfx/queue";
    export class WebGL2GFXQueue extends GFXQueue {
        numDrawCalls: number;
        numTris: number;
        private _isAsync;
        constructor(device: GFXDevice);
        initialize(info: IGFXQueueInfo): boolean;
        destroy(): void;
        submit(cmdBuffs: GFXCommandBuffer[], fence?: any): void;
        clear(): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-window" {
    import { GFXDevice } from "cocos/gfx/device";
    import { GFXWindow, IGFXWindowInfo } from "cocos/gfx/window";
    export class WebGL2GFXWindow extends GFXWindow {
        constructor(device: GFXDevice);
        initialize(info: IGFXWindowInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
    }
}
declare module "cocos/gfx/webgl2/webgl2-device" {
    import { GFXBindingLayout, IGFXBindingLayoutInfo } from "cocos/gfx/binding-layout";
    import { GFXBuffer, IGFXBufferInfo } from "cocos/gfx/buffer";
    import { GFXCommandAllocator, IGFXCommandAllocatorInfo } from "cocos/gfx/command-allocator";
    import { GFXCommandBuffer, IGFXCommandBufferInfo } from "cocos/gfx/command-buffer";
    import { GFXBufferTextureCopy, GFXFilter, IGFXRect } from "cocos/gfx/define";
    import { GFXDevice, IGFXDeviceInfo } from "cocos/gfx/device";
    import { GFXFramebuffer, IGFXFramebufferInfo } from "cocos/gfx/framebuffer";
    import { GFXInputAssembler, IGFXInputAssemblerInfo } from "cocos/gfx/input-assembler";
    import { GFXPipelineLayout, IGFXPipelineLayoutInfo } from "cocos/gfx/pipeline-layout";
    import { GFXPipelineState, IGFXPipelineStateInfo } from "cocos/gfx/pipeline-state";
    import { GFXQueue, IGFXQueueInfo } from "cocos/gfx/queue";
    import { GFXRenderPass, IGFXRenderPassInfo } from "cocos/gfx/render-pass";
    import { GFXSampler, IGFXSamplerInfo } from "cocos/gfx/sampler";
    import { GFXShader, IGFXShaderInfo } from "cocos/gfx/shader";
    import { GFXTexture, IGFXTextureInfo } from "cocos/gfx/texture";
    import { GFXTextureView, IGFXTextureViewInfo } from "cocos/gfx/texture-view";
    import { GFXWindow, IGFXWindowInfo } from "cocos/gfx/window";
    import { WebGL2StateCache } from "cocos/gfx/webgl2/webgl2-state-cache";
    import { WebGL2GFXTexture } from "cocos/gfx/webgl2/webgl2-texture";
    export class WebGL2GFXDevice extends GFXDevice {
        readonly gl: WebGL2RenderingContext;
        readonly isAntialias: boolean;
        readonly isPremultipliedAlpha: boolean;
        readonly useVAO: boolean;
        readonly EXT_texture_filter_anisotropic: EXT_texture_filter_anisotropic | null;
        readonly OES_texture_float_linear: OES_texture_float_linear | null;
        readonly EXT_color_buffer_float: EXT_color_buffer_float | null;
        readonly EXT_disjoint_timer_query_webgl2: EXT_disjoint_timer_query_webgl2 | null;
        readonly WEBGL_compressed_texture_etc1: WEBGL_compressed_texture_etc1 | null;
        readonly WEBGL_compressed_texture_etc: WEBGL_compressed_texture_etc | null;
        readonly WEBGL_compressed_texture_pvrtc: WEBGL_compressed_texture_pvrtc | null;
        readonly WEBGL_compressed_texture_s3tc: WEBGL_compressed_texture_s3tc | null;
        readonly WEBGL_compressed_texture_s3tc_srgb: WEBGL_compressed_texture_s3tc_srgb | null;
        stateCache: WebGL2StateCache;
        nullTex2D: WebGL2GFXTexture | null;
        nullTexCube: WebGL2GFXTexture | null;
        private _webGL2RC;
        private _isAntialias;
        private _isPremultipliedAlpha;
        private _useVAO;
        private _extensions;
        private _EXT_texture_filter_anisotropic;
        private _OES_texture_float_linear;
        private _OES_texture_half_float_linear;
        private _EXT_color_buffer_float;
        private _EXT_disjoint_timer_query_webgl2;
        private _WEBGL_compressed_texture_etc1;
        private _WEBGL_compressed_texture_etc;
        private _WEBGL_compressed_texture_pvrtc;
        private _WEBGL_compressed_texture_s3tc;
        private _WEBGL_compressed_texture_s3tc_srgb;
        private _WEBGL_debug_renderer_info;
        private _WEBGL_texture_storage_multisample;
        private _WEBGL_debug_shaders;
        private _WEBGL_lose_context;
        constructor();
        initialize(info: IGFXDeviceInfo): boolean;
        destroy(): void;
        resize(width: number, height: number): void;
        createBuffer(info: IGFXBufferInfo): GFXBuffer;
        createTexture(info: IGFXTextureInfo): GFXTexture;
        createTextureView(info: IGFXTextureViewInfo): GFXTextureView;
        createSampler(info: IGFXSamplerInfo): GFXSampler;
        createBindingLayout(info: IGFXBindingLayoutInfo): GFXBindingLayout;
        createShader(info: IGFXShaderInfo): GFXShader;
        createInputAssembler(info: IGFXInputAssemblerInfo): GFXInputAssembler;
        createRenderPass(info: IGFXRenderPassInfo): GFXRenderPass;
        createFramebuffer(info: IGFXFramebufferInfo): GFXFramebuffer;
        createPipelineLayout(info: IGFXPipelineLayoutInfo): GFXPipelineLayout;
        createPipelineState(info: IGFXPipelineStateInfo): GFXPipelineState;
        createCommandAllocator(info: IGFXCommandAllocatorInfo): GFXCommandAllocator;
        createCommandBuffer(info: IGFXCommandBufferInfo): GFXCommandBuffer;
        createQueue(info: IGFXQueueInfo): GFXQueue;
        createWindow(info: IGFXWindowInfo): GFXWindow;
        present(): void;
        copyBuffersToTexture(buffers: ArrayBuffer[], texture: GFXTexture, regions: GFXBufferTextureCopy[]): void;
        copyTexImagesToTexture(texImages: TexImageSource[], texture: GFXTexture, regions: GFXBufferTextureCopy[]): void;
        copyFramebufferToBuffer(srcFramebuffer: GFXFramebuffer, dstBuffer: ArrayBuffer, regions: GFXBufferTextureCopy[]): void;
        blitFramebuffer(src: GFXFramebuffer, dst: GFXFramebuffer, srcRect: IGFXRect, dstRect: IGFXRect, filter: GFXFilter): void;
        private initStates;
    }
}
declare module "cocos/gfx/index" {
    export { GFXAttributeName, GFXFormat, GFXPrimitiveMode } from "cocos/gfx/define";
}
declare module "cocos/pipeline/utils" {
    import { CameraComponent } from "cocos/3d/index";
    import { Vec3 } from "cocos/core/index";
    import { Node } from "cocos/scene-graph/index";
    /**
     * !#en
     * Conversion of non-UI nodes to UI Node (Local) Space coordinate system.
     * !#zh
     * 非 UI 节点转换到 UI 节点(局部) 空间坐标系
     * @method convertToNodeSpaceAR
     * @param {CameraComponent} mainCamera
     * @param {Vec3} wpos
     * @param {Node} uiNode
     * @return {Vec3}
     */
    export function WorldNode3DToLocalNodeUI(mainCamera: CameraComponent, wpos: Vec3, uiNode: Node, out?: Vec3): Vec3;
    export function WorldNode3DToWorldNodeUI(mainCamera: CameraComponent, wpos: Vec3, out?: Vec3): Vec3;
}
declare module "cocos/pipeline/index" {
    import "cocos/pipeline/define";
    import "cocos/pipeline/render-view";
    import "cocos/pipeline/utils";
}
declare module "extensions/ccpool/node-pool" {
    import { Component } from "cocos/components/component";
    import { Node } from "cocos/scene-graph/index";
    /****************************************************************************
     Copyright (c) 2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos2d-x.org
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
    
     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    type Constructor<T = {}> = new (...args: any[]) => T;
    interface IPoolHandlerComponent extends Component {
        unuse(): void;
        reuse(...args: any[]): void;
    }
    /**
     * !#en
     *  cc.NodePool is the cache pool designed for node type.<br/>
     *  It can helps you to improve your game performance for objects which need frequent release and recreate operations<br/>
     *
     * It's recommended to create cc.NodePool instances by node type, the type corresponds to node type in game design, not the class,
     * for example, a prefab is a specific node type. <br/>
     * When you create a node pool, you can pass a Component which contains `unuse`, `reuse` functions to control the content of node.<br/>
     *
     * Some common use case is :<br/>
     *      1. Bullets in game (die very soon, massive creation and recreation, no side effect on other objects)<br/>
     *      2. Blocks in candy crash (massive creation and recreation)<br/>
     *      etc...
     * !#zh
     * cc.NodePool 是用于管理节点对象的对象缓存池。<br/>
     * 它可以帮助您提高游戏性能，适用于优化对象的反复创建和销毁<br/>
     * 以前 cocos2d-x 中的 cc.pool 和新的节点事件注册系统不兼容，因此请使用 cc.NodePool 来代替。
     *
     * 新的 NodePool 需要实例化之后才能使用，每种不同的节点对象池需要一个不同的对象池实例，这里的种类对应于游戏中的节点设计，一个 prefab 相当于一个种类的节点。<br/>
     * 在创建缓冲池时，可以传入一个包含 unuse, reuse 函数的组件类型用于节点的回收和复用逻辑。<br/>
     *
     * 一些常见的用例是：<br/>
     *      1.在游戏中的子弹（死亡很快，频繁创建，对其他对象无副作用）<br/>
     *      2.糖果粉碎传奇中的木块（频繁创建）。
     *      等等....
     */
    export class NodePool {
        /**
         * !#en The pool handler component, it could be the class name or the constructor.
         * !#zh 缓冲池处理组件，用于节点的回收和复用逻辑，这个属性可以是组件类名或组件的构造函数。
         */
        poolHandlerComp?: Constructor<IPoolHandlerComponent> | string;
        private _pool;
        /**
         * !#en
         * Constructor for creating a pool for a specific node template (usually a prefab).
         * You can pass a component (type or name) argument for handling event for reusing and recycling node.
         * !#zh
         * 使用构造函数来创建一个节点专用的对象池，您可以传递一个组件类型或名称，用于处理节点回收和复用时的事件逻辑。
         * @param poolHandlerComp !#en The constructor or the class name of the component to control the unuse/reuse logic. !#zh 处理节点回收和复用事件逻辑的组件类型或名称。
         * @example
         *  properties: {
         *      template: cc.Prefab
         *     },
         *     onLoad () {
         *       // MyTemplateHandler is a component with 'unuse' and 'reuse' to handle events when node is reused or recycled.
         *       this.myPool = new cc.NodePool('MyTemplateHandler');
         *     }
         *  }
         */
        constructor(poolHandlerComp?: Constructor<IPoolHandlerComponent> | string);
        /**
         * !#en The current available size in the pool
         * !#zh 获取当前缓冲池的可用对象数量
         */
        size(): number;
        /**
         * !#en Destroy all cached nodes in the pool
         * !#zh 销毁对象池中缓存的所有节点
         */
        clear(): void;
        /**
         * !#en Put a new Node into the pool.
         * It will automatically remove the node from its parent without cleanup.
         * It will also invoke unuse method of the poolHandlerComp if exist.
         * !#zh 向缓冲池中存入一个不再需要的节点对象。
         * 这个函数会自动将目标节点从父节点上移除，但是不会进行 cleanup 操作。
         * 这个函数会调用 poolHandlerComp 的 unuse 函数，如果组件和函数都存在的话。
         * @example
         *   let myNode = cc.instantiate(this.template);
         *   this.myPool.put(myNode);
         */
        put(obj: Node): void;
        /**
         * !#en Get a obj from pool, if no available object in pool, null will be returned.
         * This function will invoke the reuse function of poolHandlerComp if exist.
         * !#zh 获取对象池中的对象，如果对象池没有可用对象，则返回空。
         * 这个函数会调用 poolHandlerComp 的 reuse 函数，如果组件和函数都存在的话。
         * @param args - !#en Params to pass to 'reuse' method in poolHandlerComp !#zh 向 poolHandlerComp 中的 'reuse' 函数传递的参数
         * @example
         *   let newNode = this.myPool.get();
         */
        get(...args: any[]): Node | null;
    }
}
declare module "index" {
    /****************************************************************************
     Copyright (c) 2013-2016 Chukong Technologies Inc.
     Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
    
     http://www.cocos.com
    
     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated engine source code (the "Software"), a limited,
      worldwide, royalty-free, non-assignable, revocable and non-exclusive license
     to use Cocos Creator solely to develop games on your target platforms. You shall
      not use Cocos Creator software for developing other software or tools that's
      used for developing games. You are not granted to publish, distribute,
      sublicense, and/or sell copies of Cocos Creator.
    
     The software or tools in this License Agreement are licensed, not sold.
     Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     ****************************************************************************/
    import "predefine";
    import "cocos/legacy";
    export * from "cocos/core/index";
    export * from "cocos/scene-graph/index";
    import * as renderer from "cocos/renderer/index";
    export { renderer };
    export * from "cocos/assets/index";
    export * from "cocos/animation/index";
    export * from "cocos/load-pipeline/index";
    export * from "cocos/components/index";
    export * from "cocos/3d/index";
    export * from "cocos/gfx/index";
    export * from "cocos/pipeline/index";
    export * from "extensions/ccpool/node-pool";
    const cclegacy: {
        [x: string]: any;
    };
    export { cclegacy };
}
interface IBox {
    x: number;
    y: number;
}
interface IBox {
    x: number;
    z: string;
}
declare let sc: IBox;
declare module "cocos/3d/assets/audio/player-wx" {
    import { AudioClip } from "cocos/3d/assets/audio/clip";
    /**
     * WeChat audio to port. https://developers.weixin.qq.com/minigame/dev/document/media/audio/InnerAudioContext.html
     */
    export default class WxGameAudioClip extends AudioClip {
        private _volume;
        private _loop;
        private _oneShoting;
        private _currentTime;
        private _state;
        constructor();
        setNativeAsset(clip: any, info: any): void;
        _initEventsListener(): void;
        play(): void;
        pause(): void;
        stop(): void;
        playOneShot(volume?: number): void;
        getCurrentTime(): number;
        setCurrentTime(val: any): void;
        getDuration(): any;
        getVolume(): any;
        setVolume(val: any): void;
        getLoop(): boolean;
        setLoop(val: any): void;
    }
}
declare module "cocos/3d/framework/particle/animator/optimized-curve" {
    import { AnimationCurve } from "cocos/3d/geom-utils/curve";
    import CurveRange from "cocos/3d/framework/particle/animator/curve-range";
    export class OptimizedCurve {
        private optimizedKeys;
        private integral;
        private constructUniform;
        coefUniform: Float32Array | null;
        timeUniform: Float32Array | null;
        integralUniform: Float32Array | null;
        constructor(constructUniform?: boolean);
        buildCurve(animationCurve: AnimationCurve, multiplier?: number): void;
        evaluate(time: number): number;
        integrateOnce(): void;
        evaluateIntegral(t: number, ts?: number): number;
        integrateTwice(): void;
        evaluateIntegralTwice(t: number, ts?: number): number;
        updateKeyUniform(): void;
        updateIntegralUniform(): void;
    }
    export class CurveUniform {
        private mode;
        private minConstant;
        private maxConstant;
        private minCurve;
        private maxCurve;
        constructor();
        constructCurve(cr: CurveRange): void;
        constructCurveIntegral(cr: CurveRange): void;
        constructCurveIntegralTwice(cr: CurveRange): void;
        uploadUniform(device: any, name: number): void;
    }
}
declare module "cocos/3d/geom-utils/box" {
    import { mat3, quat, vec3 } from "cocos/core/vmath/index";
    export default class box {
        /**
         * create a new box
         */
        static create(): box;
        /**
         * create a new axis-aligned box from two corner points
         *
         * @param minPos lower corner position of the box
         * @param maxPos upper corner position of the box
         * @return
         */
        static fromPoints(minPos: vec3, maxPos: vec3): box;
        /**
         * clone a new box
         *
         * @param a the source box
         * @return
         */
        static clone(a: box): box;
        /**
         * copy the values from one box to another
         *
         * @param out the receiving box
         * @param a the source box
         * @return
         */
        static copy(out: box, a: box): box;
        /**
         * Set the components of a box to the given values
         *
         * @param {box} out the receiving box
         * @param px X coordinates for box's original point
         * @param py Y coordinates for box's original point
         * @param pz Z coordinates for box's original point
         * @param w the half of box width
         * @param h the half of box height
         * @param l the half of box length
         * @param ox_1 the orientation vector coordinates
         * @param ox_2 the orientation vector coordinates
         * @param ox_3 the orientation vector coordinates
         * @param oy_1 the orientation vector coordinates
         * @param oy_2 the orientation vector coordinates
         * @param oy_3 the orientation vector coordinates
         * @param oz_1 the orientation vector coordinates
         * @param oz_2 the orientation vector coordinates
         * @param oz_3 the orientation vector coordinates
         * @returns out
         * @function
         */
        static set(out: box, px: number, py: number, pz: number, w: number, h: number, l: number, ox_1: number, ox_2: number, ox_3: number, oy_1: number, oy_2: number, oy_3: number, oz_1: number, oz_2: number, oz_3: number): box;
        center: vec3;
        halfExtents: vec3;
        orientation: mat3;
        constructor(px: number, py: number, pz: number, w: number, h: number, l: number, ox_1: number, ox_2: number, ox_3: number, oy_1: number, oy_2: number, oy_3: number, oz_1: number, oz_2: number, oz_3: number);
        /**
         * Get the bounding points of this shape
         * @param minPos
         * @param maxPos
         */
        getBoundary(minPos: vec3, maxPos: vec3): void;
        /**
         * Translate this shape and apply the effect to a target shape
         * @param pos the translation factor
         * @param out the target shape
         */
        translate(pos: vec3, out?: box): void;
        /**
         * Rotate this shape and apply the effect to a target shape
         * @param rot the rotation factor
         * @param out the target shape
         */
        rotate(rot: quat, out?: box): void;
        /**
         * Scale this shape and apply the effect to a target shape
         * @param scale the scaling factor
         * @param out the target shape
         */
        scale(scale: vec3, out?: box): void;
    }
}
declare module "cocos/3d/memop/optimized-array" {
    export class OptimizedArray<T = {}> {
        private _size;
        private _data;
        /**
         * Initialize this array with specified capacity.
         * @param {Number} [size] The size.
         */
        constructor(size?: number);
        /**
         * Size of this array.
         * @return {Number}
         */
        readonly size: number;
        /**
         * The underlying Array of this array.
         * @return {Array}
         */
        readonly data: (T | undefined)[];
        /**
         * Capacity of this array.
         */
        readonly capacity: number;
        /**
         * Push a value to back of this array.
         * @param {any} value
         */
        push(value: any): void;
        /**
         * Remove the last element and return it, if exists.
         */
        pop(): T | undefined;
        /**
         * Remove all elements.
         */
        clear(): void;
        /**
         * @ignore
         * @param {Number} size
         */
        _extends(size: any): void;
    }
    type Allocator<T> = () => T;
    type Deallocator<T> = (value: T) => void;
    export class OptimizedValueArray<T = {}> {
        private _size;
        private _data;
        private _ctor;
        private _dtor;
        /**
         * Initialize this array with specified capacity.
         * @param {any} ctor The constructor to create the value.
         * @param {Number} [size] The size.
         */
        constructor(ctor: Allocator<T>, dtor: Deallocator<T>, size?: number);
        /**
         * Size of this array.
         * @return {Number}
         */
        readonly size: number;
        /**
         * The underlying Array of this array.
         * @return {Array}
         */
        readonly data: T[];
        /**
         * Capacity of this array.
         */
        readonly capacity: number;
        /**
         * Push a value to back of this array.
         */
        push(): T;
        /**
         * Remove the last element, if exists.
         * Since that element is not erased, so we cannot return it.
         */
        pop(): void;
        /**
         * Remove all elements.
         */
        clear(): void;
        splice(from: any, number: any): void;
        forEach(fx: any): void;
        map(fx: any): any[];
        /**
         * @ignore
         * @param {Number} size
         */
        _extends(size: any): void;
    }
}
declare module "cocos/3d/memop/sort" {
    /**
     * Calls the _quickSort function with it's initial values.
     *
     * @param array The input array which should be sorted
     * @param from
     * @param to
     * @param cmp
     * @returns array Sorted array
     */
    export default function <T>(array: T[], from?: number, to?: number, cmp?: CompareFunction<T>): T[];
}
declare module "cocos/3d/physics/ammo/debugger" {
    import Ammo from 'ammo.js';
    import { Node } from "cocos/scene-graph/index";
    export class Debugger implements Ammo.btIDebugDraw {
        private _node;
        private _debugMode;
        private _iVertex;
        private _positions;
        private _maxPos;
        private _minPos;
        private _colors;
        private _modelComponent;
        private _mesh;
        private _ammoDebugDrawer;
        private _tmpExtents;
        private _tmpVertex;
        constructor();
        readonly avaiable: boolean;
        readonly ammoDrawDebugger: Ammo.DebugDrawer;
        bind(node: Node): void;
        clear(): void;
        present(): void;
        drawLine(pfrom: Ammo.Pointer, pto: Ammo.Pointer, pcolor: Ammo.Pointer): void;
        drawContactPoint(pointOnB: Ammo.Pointer, normalOnB: Ammo.Pointer, distance: number, liftTime: number, color: Ammo.Pointer): void;
        reportErrorWarning(warningString: string): void;
        draw3dText(location: Ammo.Pointer, textString: string): void;
        setDebugMode(debugMode: number): void;
        getDebugMode(): number;
        private _addVertex;
    }
    export enum DebugDrawModes {
        DBG_NoDebug = 0,
        DBG_DrawWireframe = 1,
        DBG_DrawAabb = 2,
        DBG_DrawFeaturesText = 4,
        DBG_DrawContactPoints = 8,
        DBG_NoDeactivation = 16,
        DBG_NoHelpText = 32,
        DBG_DrawText = 64,
        DBG_ProfileTimings = 128,
        DBG_EnableSatComparison = 256,
        DBG_DisableBulletLCP = 512,
        DBG_EnableCCD = 1024,
        DBG_DrawConstraints = 2048,
        DBG_DrawConstraintLimits = 4096,
        DBG_FastWireframe = 8192,
        DBG_DrawNormals = 16384,
        DBG_DrawFrames = 32768,
        DBG_MAX_DEBUG_DRAW_MODE = 32769
    }
}
/****************************************************************************
 Copyright (c) 2013-2016 Chukong Technologies Inc.
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

 http://www.cocos.com

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
  worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
  not use Cocos Creator software for developing other software or tools that's
  used for developing games. You are not granted to publish, distribute,
  sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
declare module "cocos/3d/ui/assembler/sprite/tiled" {
    import { IAssembler } from "cocos/3d/ui/assembler/assembler";
    export const tilled: IAssembler;
}
declare module "cocos/components/WXSubContextView" {
    let WXSubContextView: any;
    export default WXSubContextView;
}
declare module "cocos/core/utils/binary-search" {
    /**
     * Searches the entire sorted Array for an element and returns the index of the element.
     *
     * @method binarySearch
     * @param {number[]} array
     * @param {number} value
     * @return {number} The index of item in the sorted Array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of array's length.
     */
    /**
     * Searches the entire sorted Array for an element and returns the index of the element.
     * It accepts iteratee which is invoked for value and each element of array to compute their sort ranking.
     * The iteratee is invoked with one argument: (value).
     *
     * @method binarySearchBy
     * @param {number[]} array
     * @param {number} value
     * @param {function} iteratee - the iteratee invoked per element
     * @return {number} The index of item in the sorted Array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of array's length.
     */
    export default function binarySearchEpsilon(array: any, value: any): number;
}
declare module "cocos/core/vmath/rect" {
    export interface IRect2D {
        x?: number;
        y?: number;
        width?: number;
        height?: number;
    }
    export interface INormalizedRect2D {
        x: number;
        y: number;
        width: number;
        height: number;
    }
    export function normalizeRect2D(rect: IRect2D, fullWidth: number, fullHeight: number): INormalizedRect2D;
}
declare module "cocos/renderer/models/model-uniforms" { }
